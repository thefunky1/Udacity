#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package B {
sub CLONE;
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub regex_padav;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashoff;
sub stashpv;
sub warnings;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub HSCXT;
sub NAME_HEK;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GPFLAGS;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::METHOP {
sub first;
sub meth_sv;
sub rclass;
}
package B::NV {
sub NV;
sub NVX;
}
package B::OP {
sub desc;
sub flags;
sub folded;
sub moresib;
sub name;
sub next;
sub oplist;
sub opt;
sub parent;
sub ppaddr;
sub private;
sub savefree;
sub sibling;
sub size;
sub slabbed;
sub spare;
sub static;
sub targ;
sub type;
}
package B::PADLIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub NAMES;
sub REFCNT;
sub id;
sub outid;
}
package B::PADNAME {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub FLAGS;
sub LEN;
sub OURSTASH;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
sub PROTOCV;
sub PV;
sub PVX;
sub REFCNT;
sub SvSTASH;
sub TYPE;
}
package B::PADNAMELIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub REFCNT;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub code_list;
sub pmflags;
sub pmoffset;
sub pmregexp;
sub pmreplroot;
sub pmreplstart;
sub pmstash;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub compflags;
sub precomp;
sub qr_anoncv;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package B::UNOP_AUX {
sub aux_list;
sub string;
}
package B::Utils {
sub anon_sub;
sub blessed($) ;
sub main_cv;
sub main_root;
sub main_start;
sub ppname;
sub shuffle(@) ;
sub weaken($) ;
}
package BerkeleyDB {
sub _db_remove;
sub _db_rename;
sub _db_verify;
sub constant;
sub db_value_set;
sub db_version;
sub has_heap;
}
package BerkeleyDB::Btree {
sub _db_open_btree;
sub db_stat;
}
package BerkeleyDB::Common {
sub ArrayOffset;
sub _DESTROY;
sub _Txn;
sub __db_write_cursor;
sub _db_cursor;
sub _db_join;
sub associate;
sub associate_foreign;
sub byteswapped;
sub cds_enabled;
sub compact;
sub db_close;
sub db_create_sequence;
sub db_del;
sub db_exists;
sub db_fd;
sub db_get;
sub db_key_range;
sub db_pget;
sub db_put;
sub db_sync;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub get_blob_dir;
sub get_blob_threshold;
sub partial_clear;
sub partial_set;
sub stat_print;
sub status;
sub truncate;
sub type;
}
package BerkeleyDB::Cursor {
sub _DESTROY;
sub _c_close;
sub _c_dup;
sub _c_get_db_stream;
sub _db_stream;
sub c_count;
sub c_del;
sub c_get;
sub c_pget;
sub c_put;
sub partial_clear;
sub partial_set;
sub status;
}
package BerkeleyDB::DbStream {
sub DESTROY;
sub close;
sub read;
sub size;
sub write;
}
package BerkeleyDB::Env {
sub DB_ENV;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub _DESTROY;
sub _TxnMgr;
sub _db_appinit;
sub _txn_begin;
sub cds_enabled;
sub close;
sub create;
sub db_appexit;
sub errPrefix;
sub failchk;
sub get_blob_dir;
sub get_blob_threshold;
sub get_shm_key;
sub get_timeout;
sub lock_detect;
sub lock_stat_print;
sub log_archive;
sub log_get_config;
sub log_set_config;
sub lsn_reset;
sub mutex_stat_print;
sub open;
sub printEnv;
sub set_blob_threshold;
sub set_data_dir;
sub set_encrypt;
sub set_flags;
sub set_isalive;
sub set_lg_bsize;
sub set_lg_dir;
sub set_lg_max;
sub set_mutexlocks;
sub set_timeout;
sub set_tmp_dir;
sub set_verbose;
sub stat_print;
sub status;
sub txn_checkpoint;
sub txn_stat;
sub txn_stat_print;
}
package BerkeleyDB::Hash {
sub _db_open_hash;
sub db_stat;
}
package BerkeleyDB::Heap {
sub _db_open_heap;
}
package BerkeleyDB::Queue {
sub FETCHSIZE;
sub _db_open_queue;
sub db_stat;
}
package BerkeleyDB::Recno {
sub FETCHSIZE;
sub _db_open_recno;
sub db_stat;
}
package BerkeleyDB::Sequence {
sub DESTROY;
sub close;
sub get;
sub get_cachesize;
sub get_flags;
sub get_key;
sub initial_value;
sub open;
sub remove;
sub set_cachesize;
sub set_flags;
sub set_range;
sub stat;
}
package BerkeleyDB::Term {
sub close_everything;
sub safeCroak;
}
package BerkeleyDB::Txn {
sub _DESTROY;
sub _txn_abort;
sub _txn_commit;
sub _txn_discard;
sub get_tx_max;
sub set_timeout;
sub set_tx_max;
sub status;
sub txn_id;
sub txn_prepare;
sub txn_unlink;
}
package BerkeleyDB::TxnMgr {
sub _DESTROY;
sub _txn_begin;
sub status;
sub txn_checkpoint;
sub txn_close;
sub txn_open;
sub txn_stat;
}
package BerkeleyDB::Unknown {
sub _db_open_unknown;
}
package BerkeleyDB::_tiedArray {
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub length;
}
package BerkeleyDB::_tiedHash {
sub FIRSTKEY;
sub NEXTKEY;
}
package Carp {
sub downgrade;
sub is_utf8;
}
package Class::Load {
sub is_class_loaded;
}
package Class::Load::XS {
sub is_class_loaded;
}
package Class::MOP {
sub blessed($) ;
sub check_package_cache_flag($) ;
sub get_code_info($) ;
sub isweak($) ;
sub weaken($) ;
}
package Class::MOP::Attribute {
sub associated_class;
sub associated_methods;
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Class {
sub all(&@) ;
sub blessed($) ;
sub constructor_class;
sub constructor_name;
sub destructor_class;
sub immutable_trait;
sub instance_metaclass;
sub subname;
}
package Class::MOP::Instance {
sub associated_metaclass;
sub blessed($) ;
sub isweak($) ;
sub slot_hash;
sub slots;
sub weaken($) ;
}
package Class::MOP::Method {
sub blessed($) ;
sub body;
sub is_stub;
sub name;
sub package_name;
sub reftype($) ;
sub weaken($) ;
}
package Class::MOP::Method::Accessor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Constructor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Generated {
sub definition_context;
sub is_inline;
}
package Class::MOP::Method::Inlined {
sub _expected_method_class;
sub refaddr($) ;
}
package Class::MOP::Method::Meta {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Wrapped {
sub blessed($) ;
sub subname;
}
package Class::MOP::Mixin {
sub blessed($) ;
}
package Class::MOP::Mixin::AttributeCore {
sub accessor;
sub blessed($) ;
sub builder;
sub clearer;
sub definition_context;
sub init_arg;
sub initializer;
sub insertion_order;
sub name;
sub predicate;
sub reader;
sub writer;
}
package Class::MOP::Mixin::HasAttributes {
sub _attribute_map;
sub attribute_metaclass;
sub blessed($) ;
}
package Class::MOP::Mixin::HasMethods {
sub _method_map;
sub blessed($) ;
sub method_metaclass;
sub reftype($) ;
sub subname;
sub wrapped_method_metaclass;
}
package Class::MOP::Mixin::HasOverloads {
sub blessed($) ;
}
package Class::MOP::Object {
sub blessed($) ;
}
package Class::MOP::Overload {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Package {
sub blessed($) ;
sub name;
sub weaken($) ;
}
package Class::XSAccessor {
sub __entersub_optimized__() ;
sub _newxs_compat_accessor;
sub _newxs_compat_setter;
sub accessor;
sub array_accessor;
sub array_accessor_init;
sub array_setter;
sub array_setter_init;
sub chained_accessor;
sub chained_setter;
sub constant_false;
sub constant_true;
sub constructor;
sub defined_predicate;
sub exists_predicate;
sub getter;
sub lvalue_accessor;
sub newxs_accessor;
sub newxs_boolean;
sub newxs_constructor;
sub newxs_defined_predicate;
sub newxs_exists_predicate;
sub newxs_getter;
sub newxs_lvalue_accessor;
sub newxs_predicate;
sub newxs_setter;
sub newxs_test;
sub setter;
sub test;
}
package Class::XSAccessor::Array {
sub accessor;
sub chained_accessor;
sub chained_setter;
sub constructor;
sub getter;
sub lvalue_accessor;
sub newxs_accessor;
sub newxs_constructor;
sub newxs_getter;
sub newxs_lvalue_accessor;
sub newxs_predicate;
sub newxs_setter;
sub predicate;
sub setter;
}
package Clone {
sub clone($;$) ;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Lzma {
sub LZMA_BACKWARD_SIZE_MAX;
sub LZMA_FILTER_LZMA1;
sub blessed($) ;
sub constant;
sub lzma_alone_decoder;
sub lzma_alone_encoder;
sub lzma_auto_decoder;
sub lzma_check_is_supported;
sub lzma_check_size;
sub lzma_easy_decoder_memusage;
sub lzma_easy_encoder;
sub lzma_easy_encoder_memusage;
sub lzma_filter_decoder_is_supported;
sub lzma_filter_encoder_is_supported;
sub lzma_mf_is_supported;
sub lzma_mode_is_supported;
sub lzma_raw_decoder;
sub lzma_raw_encoder;
sub lzma_stream_buffer_bound;
sub lzma_stream_decoder;
sub lzma_stream_encoder;
sub lzma_version_number;
sub lzma_version_string;
}
package Compress::Raw::Lzma::Decoder {
sub DESTROY;
sub code;
sub compressedBytes;
sub uncompressedBytes;
}
package Compress::Raw::Lzma::Encoder {
sub DESTROY;
sub code;
sub compressedBytes;
sub flush;
sub uncompressedBytes;
}
package Compress::Raw::Lzma::Options {
sub DESTROY;
sub lzma_lzma_preset;
sub new;
}
package Compress::Raw::Zlib {
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub zlibCompileFlags;
sub zlib_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::unLZMA {
sub uncompressdata;
sub uncompressfile;
}
package Config {
sub AUTOLOAD;
}
package Cpanel::JSON::XS {
sub CLONE;
sub DESTROY;
sub _from_json($;$) ;
sub _to_json($) ;
sub allow_barekey;
sub allow_bignum;
sub allow_blessed;
sub allow_nonref;
sub allow_singlequote;
sub allow_stringify;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub binary;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($;$) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub escape_slash;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_barekey;
sub get_allow_bignum;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_singlequote;
sub get_allow_stringify;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_binary;
sub get_canonical;
sub get_convert_blessed;
sub get_escape_slash;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_stringify_infnan;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub sort_by;
sub space_after;
sub space_before;
sub stringify_infnan;
sub utf8;
}
package Crypt::AuthEnc::CCM {
sub _memory_decrypt;
sub _memory_encrypt;
}
package Crypt::AuthEnc::EAX {
sub DESTROY;
sub _new;
sub clone;
sub decrypt_add;
sub decrypt_done;
sub encrypt_add;
sub encrypt_done;
sub header_add;
}
package Crypt::AuthEnc::GCM {
sub DESTROY;
sub _new;
sub adata_add;
sub clone;
sub decrypt_add;
sub decrypt_done;
sub encrypt_add;
sub encrypt_done;
sub iv_add;
sub reset;
}
package Crypt::AuthEnc::OCB {
sub DESTROY;
sub _new;
sub adata_add;
sub blocksize;
sub clone;
sub decrypt_add;
sub decrypt_done;
sub decrypt_last;
sub encrypt_add;
sub encrypt_done;
sub encrypt_last;
}
package Crypt::Blowfish {
sub crypt;
sub init;
}
package Crypt::Checksum::Adler32 {
sub DESTROY;
sub add;
sub clone;
sub digest;
sub hexdigest;
sub new;
sub reset;
}
package Crypt::Checksum::CRC32 {
sub DESTROY;
sub add;
sub clone;
sub digest;
sub hexdigest;
sub new;
sub reset;
}
package Crypt::Cipher {
sub DESTROY;
sub _block_length_by_name;
sub _blocksize;
sub _default_rounds;
sub _default_rounds_by_name;
sub _max_key_length_by_name;
sub _max_keysize;
sub _min_key_length_by_name;
sub _min_keysize;
sub _new;
sub decrypt;
sub encrypt;
}
package Crypt::DES {
sub crypt;
sub expand_key;
}
package Crypt::Digest {
sub DESTROY;
sub _hashsize;
sub _hashsize_by_name;
sub _new;
sub add;
sub b64digest;
sub b64udigest;
sub clone;
sub digest;
sub hexdigest;
sub reset;
}
package Crypt::IDEA {
sub crypt;
sub expand_key;
sub invert_key;
}
package Crypt::KeyDerivation {
sub _hkdf;
sub _hkdf_expand;
sub _hkdf_extract;
sub _pkcs_5_alg1;
sub _pkcs_5_alg2;
}
package Crypt::Mac::F9 {
sub DESTROY;
sub _add_single;
sub _new;
sub b64mac;
sub b64umac;
sub clone;
sub hexmac;
sub mac;
}
package Crypt::Mac::HMAC {
sub DESTROY;
sub _add_single;
sub _new;
sub b64mac;
sub b64umac;
sub clone;
sub hexmac;
sub mac;
}
package Crypt::Mac::OMAC {
sub DESTROY;
sub _add_single;
sub _new;
sub b64mac;
sub b64umac;
sub clone;
sub hexmac;
sub mac;
}
package Crypt::Mac::PMAC {
sub DESTROY;
sub _add_single;
sub _new;
sub b64mac;
sub b64umac;
sub clone;
sub hexmac;
sub mac;
}
package Crypt::Mac::Pelican {
sub DESTROY;
sub _add_single;
sub _new;
sub b64mac;
sub b64umac;
sub clone;
sub hexmac;
sub mac;
}
package Crypt::Mac::XCBC {
sub DESTROY;
sub _add_single;
sub _new;
sub b64mac;
sub b64umac;
sub clone;
sub hexmac;
sub mac;
}
package Crypt::Mode::CBC {
sub DESTROY;
sub _decrypt;
sub _encrypt;
sub _finish_dec;
sub _finish_enc;
sub _get_dir;
sub _new;
sub _start;
}
package Crypt::Mode::CFB {
sub DESTROY;
sub _crypt;
sub _finish;
sub _get_dir;
sub _new;
sub _start;
}
package Crypt::Mode::CTR {
sub DESTROY;
sub _crypt;
sub _finish;
sub _get_dir;
sub _new;
sub _start;
}
package Crypt::Mode::ECB {
sub DESTROY;
sub _decrypt;
sub _encrypt;
sub _finish_dec;
sub _finish_enc;
sub _get_dir;
sub _new;
sub _start;
}
package Crypt::Mode::OFB {
sub DESTROY;
sub _crypt;
sub _finish;
sub _get_dir;
sub _new;
sub _start;
}
package Crypt::OpenSSL::AES {
sub DESTROY($) ;
sub decrypt($$) ;
sub encrypt($$) ;
sub new($$) ;
}
package Crypt::OpenSSL::Bignum {
sub DESTROY;
sub add;
sub bless_pointer;
sub cmp;
sub copy;
sub div;
sub equals;
sub exp;
sub gcd;
sub get_word;
sub is_odd;
sub is_one;
sub is_zero;
sub lshift;
sub mod;
sub mod_exp;
sub mod_inverse;
sub mod_mul;
sub mul;
sub new;
sub new_from_bin;
sub new_from_decimal;
sub new_from_hex;
sub new_from_word;
sub num_bits;
sub num_bytes;
sub one;
sub pointer_copy;
sub pseudo_rand;
sub rand;
sub rand_range;
sub rshift;
sub sqr;
sub sub;
sub swap;
sub to_bin;
sub to_decimal;
sub to_hex;
sub ucmp;
sub zero;
}
package Crypt::OpenSSL::Bignum::CTX {
sub DESTROY;
sub new;
}
package Crypt::OpenSSL::DSA {
sub DESTROY;
sub _load_key;
sub do_sign;
sub do_verify;
sub generate_key;
sub generate_parameters;
sub get_g;
sub get_p;
sub get_priv_key;
sub get_pub_key;
sub get_q;
sub new;
sub read_params;
sub read_priv_key;
sub read_pub_key;
sub set_g;
sub set_p;
sub set_priv_key;
sub set_pub_key;
sub set_q;
sub sign;
sub verify;
sub write_params;
sub write_priv_key;
sub write_pub_key;
}
package Crypt::OpenSSL::DSA::Signature {
sub DESTROY;
sub get_r;
sub get_s;
sub new;
sub set_r;
sub set_s;
}
package Crypt::OpenSSL::RSA {
sub DESTROY;
sub _get_key_parameters;
sub _new_key_from_parameters;
sub _new_public_key_pkcs1;
sub _new_public_key_x509;
sub _random_seed;
sub _random_status;
sub check_key;
sub decrypt;
sub encrypt;
sub generate_key;
sub get_key_parameters;
sub get_private_key_string;
sub get_public_key_string;
sub get_public_key_x509_string;
sub import_random_seed;
sub is_private;
sub new_key_from_parameters;
sub new_private_key;
sub new_public_key;
sub private_encrypt;
sub public_decrypt;
sub sign;
sub size;
sub use_md5_hash;
sub use_no_padding;
sub use_pkcs1_oaep_padding;
sub use_pkcs1_padding;
sub use_ripemd160_hash;
sub use_sha1_hash;
sub use_sha224_hash;
sub use_sha256_hash;
sub use_sha384_hash;
sub use_sha512_hash;
sub use_sslv23_padding;
sub verify;
}
package Crypt::OpenSSL::Random {
sub random_bytes;
sub random_egd;
sub random_pseudo_bytes;
sub random_seed;
sub random_status;
}
package Crypt::OpenSSL::X509 {
sub DESTROY;
sub __X509_cleanup;
sub accessor;
sub as_string;
sub bit_length;
sub checkend;
sub curve;
sub email;
sub exponent;
sub extension;
sub extensions;
sub extensions_by_long_name;
sub extensions_by_name;
sub extensions_by_oid;
sub fingerprint_md5;
sub fingerprint_sha1;
sub fingerprint_sha224;
sub fingerprint_sha256;
sub fingerprint_sha384;
sub fingerprint_sha512;
sub hash;
sub issuer;
sub issuer_name;
sub key_alg_name;
sub modulus;
sub new;
sub new_from_file;
sub new_from_string;
sub notAfter;
sub notBefore;
sub num_extensions;
sub pub_exponent;
sub pubkey;
sub pubkey_type;
sub serial;
sub sig_alg_name;
sub sig_print;
sub subject;
sub subject_name;
sub version;
}
package Crypt::OpenSSL::X509::Extension {
sub auth_att;
sub basicC;
sub bit_string;
sub critical;
sub extendedKeyUsage;
sub ia5string;
sub keyid_data;
sub object;
sub to_string;
sub value;
}
package Crypt::OpenSSL::X509::Name {
sub as_string;
sub entries;
sub get_entry_by_long_type;
sub get_entry_by_type;
sub get_index_by_long_type;
sub get_index_by_oid_type;
sub get_index_by_type;
sub has_entry;
sub has_long_entry;
sub has_oid_entry;
}
package Crypt::OpenSSL::X509::Name_Entry {
sub as_long_string;
sub as_string;
sub encoding;
sub is_asn1_type;
sub is_ia5string;
sub is_printableString;
sub is_utf8string;
sub long_type;
sub type;
sub value;
}
package Crypt::OpenSSL::X509::ObjectID {
sub name;
sub oid;
}
package Crypt::OpenSSL::X509_CRL {
sub CRL_accessor;
sub CRL_issuer;
sub CRL_sig_alg_name;
sub new_from_crl_file;
sub new_from_crl_string;
}
package Crypt::PK::DH {
sub DESTROY;
sub _decrypt;
sub _encrypt;
sub _generate_key;
sub _generate_key_ex;
sub _import;
sub _import_raw;
sub _is_pubkey_valid;
sub _new;
sub _sign;
sub _verify;
sub export_key;
sub export_key_raw;
sub is_private;
sub key2hash;
sub params2hash;
sub shared_secret;
sub size;
}
package Crypt::PK::DSA {
sub DESTROY;
sub _decrypt;
sub _encrypt;
sub _import;
sub _import_hex;
sub _new;
sub _sign;
sub _verify;
sub export_key_der;
sub generate_key;
sub is_private;
sub key2hash;
sub size;
sub size_q;
}
package Crypt::PK::ECC {
sub DESTROY;
sub _decrypt;
sub _encrypt;
sub _import;
sub _import_pkcs8;
sub _new;
sub _sign;
sub _sign_rfc7518;
sub _verify;
sub _verify_rfc7518;
sub export_key_der;
sub export_key_raw;
sub generate_key;
sub import_key_raw;
sub is_private;
sub key2hash;
sub shared_secret;
sub size;
}
package Crypt::PK::RSA {
sub DESTROY;
sub _decrypt;
sub _encrypt;
sub _import;
sub _import_hex;
sub _import_pkcs8;
sub _new;
sub _sign;
sub _verify;
sub export_key_der;
sub generate_key;
sub is_private;
sub key2hash;
sub size;
}
package Crypt::PRNG {
sub DESTROY;
sub _bytes;
sub _double;
sub _int32;
sub _new;
sub add_entropy;
}
package Crypt::RC6 {
sub DESTROY($) ;
sub decrypt($$) ;
sub encrypt($$) ;
sub new($$) ;
}
package Crypt::RIPEMD160 {
sub DESTROY;
sub add;
sub digest;
sub new;
sub reset;
}
package Crypt::Rijndael {
sub DESTROY;
sub decrypt;
sub encrypt;
sub new;
sub set_iv;
}
package Crypt::SSLeay::CTX {
sub check_private_key;
sub free;
sub new;
sub set_cipher_list;
sub set_verify;
sub use_PrivateKey_file;
sub use_certificate_file;
sub use_pkcs12_file;
}
package Crypt::SSLeay::Conn {
sub accept;
sub connect;
sub free;
sub get_cipher;
sub get_peer_certificate;
sub get_shared_ciphers;
sub get_verify_result;
sub new;
sub pending;
sub read;
sub set_fd;
sub set_tlsext_host_name;
sub write;
}
package Crypt::SSLeay::Err {
sub get_error_string;
}
package Crypt::SSLeay::Version {
sub openssl_built_on;
sub openssl_cflags;
sub openssl_dir;
sub openssl_platform;
sub openssl_version;
sub openssl_version_number;
}
package Crypt::SSLeay::X509 {
sub free;
sub get_notAfterString;
sub get_notBeforeString;
sub issuer_name;
sub subject_name;
}
package Crypt::Serpent {
sub DESTROY($) ;
sub decrypt($$) ;
sub encrypt($$) ;
sub new($$;$) ;
}
package Crypt::Twofish {
sub DESTROY;
sub crypt;
sub setup;
}
package CryptX {
sub _decode_base64;
sub _decode_base64url;
sub _encode_base64;
sub _encode_base64url;
sub decode_json($;$) ;
sub encode_json($) ;
}
package Cwd {
sub CLONE;
sub getdcwd(;@) ;
}
package DBD::ODBC::db {
sub DESTROY;
sub FETCH;
sub GetFunctions;
sub STORE;
sub _ExecDirect;
sub _GetForeignKeys;
sub _GetInfo;
sub _GetPrimaryKeys;
sub _GetSpecialColumns;
sub _GetStatistics;
sub _GetTypeInfo;
sub _columns;
sub _login;
sub commit;
sub disconnect;
sub odbc_getdiagfield;
sub odbc_getdiagrec;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
}
package DBD::ODBC::dr {
sub _data_sources;
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::ODBC::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _Cancel;
sub _ColAttributes;
sub _prepare;
sub _primary_keys;
sub _statistics;
sub _tables;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub odbc_describe_param;
sub odbc_execute_for_fetch;
sub odbc_getdiagfield;
sub odbc_getdiagrec;
sub odbc_lob_read($$$$;$) ;
sub odbc_rows;
}
package DBD::Oracle::db {
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
}
package DBD::Pg {
sub PG_ABSTIME() ;
sub PG_ABSTIMEARRAY() ;
sub PG_ACLITEM() ;
sub PG_ACLITEMARRAY() ;
sub PG_ANY() ;
sub PG_ANYARRAY() ;
sub PG_ANYELEMENT() ;
sub PG_ANYENUM() ;
sub PG_ANYNONARRAY() ;
sub PG_ANYRANGE() ;
sub PG_ASYNC() ;
sub PG_BIT() ;
sub PG_BITARRAY() ;
sub PG_BOOL() ;
sub PG_BOOLARRAY() ;
sub PG_BOX() ;
sub PG_BOXARRAY() ;
sub PG_BPCHAR() ;
sub PG_BPCHARARRAY() ;
sub PG_BYTEA() ;
sub PG_BYTEAARRAY() ;
sub PG_CHAR() ;
sub PG_CHARARRAY() ;
sub PG_CID() ;
sub PG_CIDARRAY() ;
sub PG_CIDR() ;
sub PG_CIDRARRAY() ;
sub PG_CIRCLE() ;
sub PG_CIRCLEARRAY() ;
sub PG_CSTRING() ;
sub PG_CSTRINGARRAY() ;
sub PG_DATE() ;
sub PG_DATEARRAY() ;
sub PG_DATERANGE() ;
sub PG_DATERANGEARRAY() ;
sub PG_EVENT_TRIGGER() ;
sub PG_FDW_HANDLER() ;
sub PG_FLOAT4() ;
sub PG_FLOAT4ARRAY() ;
sub PG_FLOAT8() ;
sub PG_FLOAT8ARRAY() ;
sub PG_GTSVECTOR() ;
sub PG_GTSVECTORARRAY() ;
sub PG_INET() ;
sub PG_INETARRAY() ;
sub PG_INT2() ;
sub PG_INT2ARRAY() ;
sub PG_INT2VECTOR() ;
sub PG_INT2VECTORARRAY() ;
sub PG_INT4() ;
sub PG_INT4ARRAY() ;
sub PG_INT4RANGE() ;
sub PG_INT4RANGEARRAY() ;
sub PG_INT8() ;
sub PG_INT8ARRAY() ;
sub PG_INT8RANGE() ;
sub PG_INT8RANGEARRAY() ;
sub PG_INTERNAL() ;
sub PG_INTERVAL() ;
sub PG_INTERVALARRAY() ;
sub PG_JSON() ;
sub PG_JSONARRAY() ;
sub PG_JSONB() ;
sub PG_JSONBARRAY() ;
sub PG_LANGUAGE_HANDLER() ;
sub PG_LINE() ;
sub PG_LINEARRAY() ;
sub PG_LSEG() ;
sub PG_LSEGARRAY() ;
sub PG_MACADDR() ;
sub PG_MACADDRARRAY() ;
sub PG_MONEY() ;
sub PG_MONEYARRAY() ;
sub PG_NAME() ;
sub PG_NAMEARRAY() ;
sub PG_NUMERIC() ;
sub PG_NUMERICARRAY() ;
sub PG_NUMRANGE() ;
sub PG_NUMRANGEARRAY() ;
sub PG_OID() ;
sub PG_OIDARRAY() ;
sub PG_OIDVECTOR() ;
sub PG_OIDVECTORARRAY() ;
sub PG_OLDQUERY_CANCEL() ;
sub PG_OLDQUERY_WAIT() ;
sub PG_OPAQUE() ;
sub PG_PATH() ;
sub PG_PATHARRAY() ;
sub PG_PG_ATTRIBUTE() ;
sub PG_PG_CLASS() ;
sub PG_PG_LSN() ;
sub PG_PG_LSNARRAY() ;
sub PG_PG_NODE_TREE() ;
sub PG_PG_PROC() ;
sub PG_PG_TYPE() ;
sub PG_POINT() ;
sub PG_POINTARRAY() ;
sub PG_POLYGON() ;
sub PG_POLYGONARRAY() ;
sub PG_RECORD() ;
sub PG_RECORDARRAY() ;
sub PG_REFCURSOR() ;
sub PG_REFCURSORARRAY() ;
sub PG_REGCLASS() ;
sub PG_REGCLASSARRAY() ;
sub PG_REGCONFIG() ;
sub PG_REGCONFIGARRAY() ;
sub PG_REGDICTIONARY() ;
sub PG_REGDICTIONARYARRAY() ;
sub PG_REGOPER() ;
sub PG_REGOPERARRAY() ;
sub PG_REGOPERATOR() ;
sub PG_REGOPERATORARRAY() ;
sub PG_REGPROC() ;
sub PG_REGPROCARRAY() ;
sub PG_REGPROCEDURE() ;
sub PG_REGPROCEDUREARRAY() ;
sub PG_REGTYPE() ;
sub PG_REGTYPEARRAY() ;
sub PG_RELTIME() ;
sub PG_RELTIMEARRAY() ;
sub PG_SMGR() ;
sub PG_TEXT() ;
sub PG_TEXTARRAY() ;
sub PG_TID() ;
sub PG_TIDARRAY() ;
sub PG_TIME() ;
sub PG_TIMEARRAY() ;
sub PG_TIMESTAMP() ;
sub PG_TIMESTAMPARRAY() ;
sub PG_TIMESTAMPTZ() ;
sub PG_TIMESTAMPTZARRAY() ;
sub PG_TIMETZ() ;
sub PG_TIMETZARRAY() ;
sub PG_TINTERVAL() ;
sub PG_TINTERVALARRAY() ;
sub PG_TRIGGER() ;
sub PG_TSQUERY() ;
sub PG_TSQUERYARRAY() ;
sub PG_TSRANGE() ;
sub PG_TSRANGEARRAY() ;
sub PG_TSTZRANGE() ;
sub PG_TSTZRANGEARRAY() ;
sub PG_TSVECTOR() ;
sub PG_TSVECTORARRAY() ;
sub PG_TXID_SNAPSHOT() ;
sub PG_TXID_SNAPSHOTARRAY() ;
sub PG_UNKNOWN() ;
sub PG_UUID() ;
sub PG_UUIDARRAY() ;
sub PG_VARBIT() ;
sub PG_VARBITARRAY() ;
sub PG_VARCHAR() ;
sub PG_VARCHARARRAY() ;
sub PG_VOID() ;
sub PG_XID() ;
sub PG_XIDARRAY() ;
sub PG_XML() ;
sub PG_XMLARRAY() ;
sub constant() ;
}
package DBD::Pg::db {
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _login;
sub _pg_type_info;
sub _ping;
sub commit;
sub disconnect;
sub do($$;$@) ;
sub endcopy;
sub getfd;
sub getline;
sub lo_close;
sub lo_creat;
sub lo_export;
sub lo_import;
sub lo_lseek;
sub lo_open;
sub lo_read;
sub lo_tell;
sub lo_unlink;
sub lo_write;
sub pg_cancel;
sub pg_endcopy;
sub pg_getcopydata;
sub pg_getcopydata_async;
sub pg_getline;
sub pg_lo_close;
sub pg_lo_creat;
sub pg_lo_export;
sub pg_lo_import;
sub pg_lo_import_with_oid;
sub pg_lo_lseek;
sub pg_lo_open;
sub pg_lo_read;
sub pg_lo_tell;
sub pg_lo_truncate;
sub pg_lo_unlink;
sub pg_lo_write;
sub pg_notifies;
sub pg_putcopydata;
sub pg_putcopyend;
sub pg_putline;
sub pg_ready;
sub pg_release;
sub pg_result;
sub pg_rollback_to;
sub pg_savepoint;
sub pg_server_trace;
sub pg_server_untrace;
sub putline;
sub quote;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub state;
}
package DBD::Pg::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::Pg::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub cancel;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub pg_cancel;
sub pg_ready;
sub pg_result;
sub rows;
sub state;
}
package DBD::SQLite {
sub ALTER_TABLE() ;
sub ANALYZE() ;
sub ATTACH() ;
sub COPY() ;
sub CREATE_INDEX() ;
sub CREATE_TABLE() ;
sub CREATE_TEMP_INDEX() ;
sub CREATE_TEMP_TABLE() ;
sub CREATE_TEMP_TRIGGER() ;
sub CREATE_TEMP_VIEW() ;
sub CREATE_TRIGGER() ;
sub CREATE_VIEW() ;
sub CREATE_VTABLE() ;
sub DELETE() ;
sub DENY() ;
sub DETACH() ;
sub DROP_INDEX() ;
sub DROP_TABLE() ;
sub DROP_TEMP_INDEX() ;
sub DROP_TEMP_TABLE() ;
sub DROP_TEMP_TRIGGER() ;
sub DROP_TEMP_VIEW() ;
sub DROP_TRIGGER() ;
sub DROP_VIEW() ;
sub DROP_VTABLE() ;
sub FUNCTION() ;
sub IGNORE() ;
sub INSERT() ;
sub OK() ;
sub OPEN_CREATE() ;
sub OPEN_FULLMUTEX() ;
sub OPEN_MEMORY() ;
sub OPEN_NOMUTEX() ;
sub OPEN_PRIVATECACHE() ;
sub OPEN_READONLY() ;
sub OPEN_READWRITE() ;
sub OPEN_SHAREDCACHE() ;
sub OPEN_URI() ;
sub PRAGMA() ;
sub READ() ;
sub RECURSIVE() ;
sub REINDEX() ;
sub SAVEPOINT() ;
sub SELECT() ;
sub TRANSACTION() ;
sub UPDATE() ;
sub _const__authorizer_action_codes() ;
sub _const__authorizer_action_codes_3006008() ;
sub _const__authorizer_action_codes_3008003() ;
sub _const__authorizer_return_codes() ;
sub _const__flags_for_file_open_operations() ;
sub _const__flags_for_file_open_operations_3006002() ;
sub _const__flags_for_file_open_operations_3006018() ;
sub _const__flags_for_file_open_operations_3007007() ;
sub _const__flags_for_file_open_operations_3007013() ;
sub compile_options;
sub sqlite_status;
sub strglob;
sub strlike;
}
package DBD::SQLite::Constants {
sub SQLITE_ABORT() ;
sub SQLITE_ABORT_ROLLBACK() ;
sub SQLITE_ALTER_TABLE() ;
sub SQLITE_ANALYZE() ;
sub SQLITE_ATTACH() ;
sub SQLITE_AUTH() ;
sub SQLITE_AUTH_USER() ;
sub SQLITE_BLOB() ;
sub SQLITE_BUSY() ;
sub SQLITE_BUSY_RECOVERY() ;
sub SQLITE_BUSY_SNAPSHOT() ;
sub SQLITE_CANTOPEN() ;
sub SQLITE_CANTOPEN_CONVPATH() ;
sub SQLITE_CANTOPEN_FULLPATH() ;
sub SQLITE_CANTOPEN_ISDIR() ;
sub SQLITE_CANTOPEN_NOTEMPDIR() ;
sub SQLITE_CONSTRAINT() ;
sub SQLITE_CONSTRAINT_CHECK() ;
sub SQLITE_CONSTRAINT_COMMITHOOK() ;
sub SQLITE_CONSTRAINT_FOREIGNKEY() ;
sub SQLITE_CONSTRAINT_FUNCTION() ;
sub SQLITE_CONSTRAINT_NOTNULL() ;
sub SQLITE_CONSTRAINT_PRIMARYKEY() ;
sub SQLITE_CONSTRAINT_ROWID() ;
sub SQLITE_CONSTRAINT_TRIGGER() ;
sub SQLITE_CONSTRAINT_UNIQUE() ;
sub SQLITE_CONSTRAINT_VTAB() ;
sub SQLITE_COPY() ;
sub SQLITE_CORRUPT() ;
sub SQLITE_CORRUPT_VTAB() ;
sub SQLITE_CREATE_INDEX() ;
sub SQLITE_CREATE_TABLE() ;
sub SQLITE_CREATE_TEMP_INDEX() ;
sub SQLITE_CREATE_TEMP_TABLE() ;
sub SQLITE_CREATE_TEMP_TRIGGER() ;
sub SQLITE_CREATE_TEMP_VIEW() ;
sub SQLITE_CREATE_TRIGGER() ;
sub SQLITE_CREATE_VIEW() ;
sub SQLITE_CREATE_VTABLE() ;
sub SQLITE_DELETE() ;
sub SQLITE_DENY() ;
sub SQLITE_DETACH() ;
sub SQLITE_DETERMINISTIC() ;
sub SQLITE_DONE() ;
sub SQLITE_DROP_INDEX() ;
sub SQLITE_DROP_TABLE() ;
sub SQLITE_DROP_TEMP_INDEX() ;
sub SQLITE_DROP_TEMP_TABLE() ;
sub SQLITE_DROP_TEMP_TRIGGER() ;
sub SQLITE_DROP_TEMP_VIEW() ;
sub SQLITE_DROP_TRIGGER() ;
sub SQLITE_DROP_VIEW() ;
sub SQLITE_DROP_VTABLE() ;
sub SQLITE_EMPTY() ;
sub SQLITE_ERROR() ;
sub SQLITE_FLOAT() ;
sub SQLITE_FORMAT() ;
sub SQLITE_FULL() ;
sub SQLITE_FUNCTION() ;
sub SQLITE_IGNORE() ;
sub SQLITE_INSERT() ;
sub SQLITE_INTEGER() ;
sub SQLITE_INTERNAL() ;
sub SQLITE_INTERRUPT() ;
sub SQLITE_IOERR() ;
sub SQLITE_IOERR_ACCESS() ;
sub SQLITE_IOERR_AUTH() ;
sub SQLITE_IOERR_BLOCKED() ;
sub SQLITE_IOERR_CHECKRESERVEDLOCK() ;
sub SQLITE_IOERR_CLOSE() ;
sub SQLITE_IOERR_CONVPATH() ;
sub SQLITE_IOERR_DELETE() ;
sub SQLITE_IOERR_DELETE_NOENT() ;
sub SQLITE_IOERR_DIR_CLOSE() ;
sub SQLITE_IOERR_DIR_FSYNC() ;
sub SQLITE_IOERR_FSTAT() ;
sub SQLITE_IOERR_FSYNC() ;
sub SQLITE_IOERR_GETTEMPPATH() ;
sub SQLITE_IOERR_LOCK() ;
sub SQLITE_IOERR_MMAP() ;
sub SQLITE_IOERR_NOMEM() ;
sub SQLITE_IOERR_RDLOCK() ;
sub SQLITE_IOERR_READ() ;
sub SQLITE_IOERR_SEEK() ;
sub SQLITE_IOERR_SHMLOCK() ;
sub SQLITE_IOERR_SHMMAP() ;
sub SQLITE_IOERR_SHMOPEN() ;
sub SQLITE_IOERR_SHMSIZE() ;
sub SQLITE_IOERR_SHORT_READ() ;
sub SQLITE_IOERR_TRUNCATE() ;
sub SQLITE_IOERR_UNLOCK() ;
sub SQLITE_IOERR_VNODE() ;
sub SQLITE_IOERR_WRITE() ;
sub SQLITE_LOCKED() ;
sub SQLITE_LOCKED_SHAREDCACHE() ;
sub SQLITE_MISMATCH() ;
sub SQLITE_MISUSE() ;
sub SQLITE_NOLFS() ;
sub SQLITE_NOMEM() ;
sub SQLITE_NOTADB() ;
sub SQLITE_NOTFOUND() ;
sub SQLITE_NOTICE() ;
sub SQLITE_NOTICE_RECOVER_ROLLBACK() ;
sub SQLITE_NOTICE_RECOVER_WAL() ;
sub SQLITE_NULL() ;
sub SQLITE_OK() ;
sub SQLITE_OPEN_CREATE() ;
sub SQLITE_OPEN_FULLMUTEX() ;
sub SQLITE_OPEN_MEMORY() ;
sub SQLITE_OPEN_NOMUTEX() ;
sub SQLITE_OPEN_PRIVATECACHE() ;
sub SQLITE_OPEN_READONLY() ;
sub SQLITE_OPEN_READWRITE() ;
sub SQLITE_OPEN_SHAREDCACHE() ;
sub SQLITE_OPEN_URI() ;
sub SQLITE_PERM() ;
sub SQLITE_PRAGMA() ;
sub SQLITE_PROTOCOL() ;
sub SQLITE_RANGE() ;
sub SQLITE_READ() ;
sub SQLITE_READONLY() ;
sub SQLITE_READONLY_CANTLOCK() ;
sub SQLITE_READONLY_DBMOVED() ;
sub SQLITE_READONLY_RECOVERY() ;
sub SQLITE_READONLY_ROLLBACK() ;
sub SQLITE_RECURSIVE() ;
sub SQLITE_REINDEX() ;
sub SQLITE_ROW() ;
sub SQLITE_SAVEPOINT() ;
sub SQLITE_SCHEMA() ;
sub SQLITE_SELECT() ;
sub SQLITE_TOOBIG() ;
sub SQLITE_TRANSACTION() ;
sub SQLITE_UPDATE() ;
sub SQLITE_VERSION_NUMBER() ;
sub SQLITE_WARNING() ;
sub SQLITE_WARNING_AUTOINDEX() ;
sub _const_authorizer_action_codes() ;
sub _const_authorizer_action_codes_3006008() ;
sub _const_authorizer_action_codes_3008003() ;
sub _const_authorizer_return_codes() ;
sub _const_compile_time_library_version_numbers() ;
sub _const_extended_result_codes_3006002() ;
sub _const_extended_result_codes_3006005() ;
sub _const_extended_result_codes_3006007() ;
sub _const_extended_result_codes_3006012() ;
sub _const_extended_result_codes_3007000() ;
sub _const_extended_result_codes_3007007() ;
sub _const_extended_result_codes_3007011() ;
sub _const_extended_result_codes_3007012() ;
sub _const_extended_result_codes_3007015() ;
sub _const_extended_result_codes_3007016() ;
sub _const_extended_result_codes_3007017() ;
sub _const_extended_result_codes_3008000() ;
sub _const_extended_result_codes_3008001() ;
sub _const_extended_result_codes_3008002() ;
sub _const_extended_result_codes_3008003() ;
sub _const_extended_result_codes_3008007() ;
sub _const_extended_result_codes_3009000() ;
sub _const_extended_result_codes_3010000() ;
sub _const_flags_for_file_open_operations() ;
sub _const_flags_for_file_open_operations_3006002() ;
sub _const_flags_for_file_open_operations_3006018() ;
sub _const_flags_for_file_open_operations_3007007() ;
sub _const_flags_for_file_open_operations_3007013() ;
sub _const_function_flags_3008003() ;
sub _const_fundamental_datatypes() ;
sub _const_result_codes() ;
sub _const_result_codes_3007017() ;
}
package DBD::SQLite::db {
sub DESTROY;
sub FETCH;
sub STORE;
sub _do;
sub _login;
sub backup_from_file;
sub backup_to_file;
sub busy_timeout;
sub collation_needed;
sub commit;
sub commit_hook;
sub create_aggregate;
sub create_collation;
sub create_function;
sub create_module;
sub db_filename;
sub db_status;
sub disconnect;
sub enable_load_extension;
sub last_insert_id;
sub last_insert_rowid;
sub load_extension;
sub profile;
sub progress_handler;
sub register_fts3_perl_tokenizer;
sub rollback;
sub rollback_hook;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub set_authorizer;
sub sqlite_backup_from_file;
sub sqlite_backup_to_file;
sub sqlite_busy_timeout;
sub sqlite_collation_needed;
sub sqlite_commit_hook;
sub sqlite_create_aggregate;
sub sqlite_create_collation;
sub sqlite_create_function;
sub sqlite_create_module;
sub sqlite_db_filename;
sub sqlite_db_status;
sub sqlite_enable_load_extension;
sub sqlite_last_insert_rowid;
sub sqlite_load_extension;
sub sqlite_profile;
sub sqlite_progress_handler;
sub sqlite_register_fts3_perl_tokenizer;
sub sqlite_rollback_hook;
sub sqlite_set_authorizer;
sub sqlite_table_column_metadata;
sub sqlite_trace;
sub sqlite_update_hook;
sub table_column_metadata;
sub update_hook;
}
package DBD::SQLite::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::SQLite::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub rows;
sub sqlite_st_status;
sub st_status;
}
package DBD::_::common {
sub DELETE;
sub DESTROY;
sub FETCH;
sub STORE;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub private_data;
sub rows;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
}
package DBD::_::db {
sub connected;
sub preparse;
sub take_imp_data;
}
package DBD::_::dr {
sub dbixs_revision;
}
package DBD::_::st {
sub DESTROY;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub fetch;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub rows;
}
package DBD::_mem::common {
sub DESTROY;
}
package DBD::mysql {
sub constant;
}
package DBD::mysql::GetInfo {
sub dbd_mysql_get_info;
}
package DBD::mysql::db {
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _ListDBs;
sub _async_check;
sub _login;
sub commit;
sub disconnect;
sub do($$;$@) ;
sub last_insert_id;
sub mysql_async_ready;
sub mysql_async_result;
sub mysql_fd;
sub ping($) ;
sub quote($$;$) ;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub type_info_all;
}
package DBD::mysql::dr {
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _ListDBs;
sub _admin_internal;
sub dbixs_revision;
}
package DBD::mysql::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _async_check;
sub _prepare;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub dataseek($$) ;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub more_results;
sub mysql_async_ready;
sub mysql_async_result;
sub rows;
}
package DBI {
sub DBIf_TRACE_CON() ;
sub DBIf_TRACE_DBD() ;
sub DBIf_TRACE_ENC() ;
sub DBIf_TRACE_SQL() ;
sub DBIf_TRACE_TXN() ;
sub DBIpp_cm_XX() ;
sub DBIpp_cm_br() ;
sub DBIpp_cm_cs() ;
sub DBIpp_cm_dd() ;
sub DBIpp_cm_dw() ;
sub DBIpp_cm_hs() ;
sub DBIpp_ph_XX() ;
sub DBIpp_ph_cn() ;
sub DBIpp_ph_cs() ;
sub DBIpp_ph_qm() ;
sub DBIpp_ph_sp() ;
sub DBIpp_st_XX() ;
sub DBIpp_st_bs() ;
sub DBIpp_st_qq() ;
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_CURSOR_DYNAMIC() ;
sub SQL_CURSOR_FORWARD_ONLY() ;
sub SQL_CURSOR_KEYSET_DRIVEN() ;
sub SQL_CURSOR_STATIC() ;
sub SQL_CURSOR_TYPE_DEFAULT() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _clone_dbis;
sub _concat_hash_sorted;
sub _dbi_state_lval;
sub _debug_dispatch;
sub _get_imp_data;
sub _handles;
sub _install_method;
sub _new_handle;
sub _setup_handle;
sub _svdump;
sub constant() ;
sub dbi_profile;
sub dbi_profile_merge;
sub dbi_profile_merge_nodes;
sub dbi_time;
sub dump_handle;
sub hash;
sub looks_like_number;
sub neat;
sub set_err;
sub sql_type_cast;
sub trace;
sub trace_msg;
}
package DBI::common {
sub CLEAR;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FETCH_many;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub can;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub func;
sub parse_trace_flag;
sub parse_trace_flags;
sub private_attribute_info;
sub private_data;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
sub visit_child_handles;
}
package DBI::db {
sub TIEHASH;
sub begin_work;
sub clone;
sub column_info;
sub commit;
sub connected;
sub data_sources;
sub disconnect;
sub do;
sub foreign_key_info;
sub get_info;
sub last_insert_id;
sub ping;
sub prepare;
sub prepare_cached;
sub preparse;
sub primary_key;
sub primary_key_info;
sub quote;
sub quote_identifier;
sub rollback;
sub rows;
sub selectall_array;
sub selectall_arrayref;
sub selectall_hashref;
sub selectcol_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub selectrow_hashref;
sub statistics_info;
sub table_info;
sub tables;
sub take_imp_data;
sub type_info;
sub type_info_all;
}
package DBI::dr {
sub TIEHASH;
sub connect;
sub connect_cached;
sub data_sources;
sub dbixs_revision;
sub default_user;
sub disconnect_all;
}
package DBI::st {
sub TIEHASH;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub bind_columns;
sub bind_param;
sub bind_param_array;
sub bind_param_inout;
sub bind_param_inout_array;
sub blob_copy_to_file;
sub blob_read;
sub cancel;
sub dump_results;
sub execute;
sub execute_array;
sub execute_for_fetch;
sub fetch;
sub fetchall_arrayref;
sub fetchall_hashref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub more_results;
sub rows;
}
package DBI::var {
sub FETCH;
}
package DB_File {
sub DELETE;
sub DESTROY;
sub DoTie_;
sub EXISTS;
sub FETCH;
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub POP;
sub PUSH;
sub SHIFT;
sub STORE;
sub UNSHIFT;
sub constant;
sub del;
sub fd;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub get;
sub length;
sub pop;
sub push;
sub put;
sub seq;
sub shift;
sub sync;
sub unshift;
}
package Data::Dump::Streamer {
sub SvREADONLY_ref($;$) ;
sub SvREFCNT_ref($;$) ;
sub _could_be_dualvar($) ;
sub _globname($) ;
sub _make_ro($) ;
sub alias_av(\@$$) ;
sub alias_hv(\%$$) ;
sub alias_ref;
sub all_keys(\%\@\@) ;
sub blessed($) ;
sub dualvar($$) ;
sub globname($) ;
sub hidden_keys(\%) ;
sub is_numeric($) ;
sub is_regexp($) ;
sub isweak($) ;
sub legal_keys(\%) ;
sub looks_like_number($) ;
sub make_ro($) ;
sub push_alias(\@$) ;
sub readonly($) ;
sub readonly_set($) ;
sub refaddr($) ;
sub refaddr_or_glob($) ;
sub refcount($) ;
sub reftype($) ;
sub reftype_or_glob($) ;
sub regex($) ;
sub regexp_pattern($) ;
sub sv_refcount($) ;
sub weak_refcount($) ;
sub weaken($) ;
}
package Data::Dumper {
sub Dumpxs($;$$) ;
sub _vstring($) ;
}
package DateTime {
sub _accumulated_leap_seconds($$) ;
sub _day_has_leap_second($$) ;
sub _day_length($$) ;
sub _is_leap_year($$) ;
sub _normalize_leap_seconds($$$) ;
sub _normalize_tai_seconds($$$) ;
sub _rd2ymd($$;$) ;
sub _seconds_as_components($$;$$) ;
sub _time_as_seconds($$$$) ;
sub _ymd2rd($$$$) ;
}
package Devel::Declare {
sub clear_lex_stuff;
sub get_curstash_name;
sub get_in_declare;
sub get_lex_stuff;
sub get_linestr;
sub get_linestr_offset;
sub initialize;
sub set_in_declare;
sub set_linestr;
sub setup;
sub toke_move_past_token;
sub toke_scan_ident;
sub toke_scan_str;
sub toke_scan_word;
sub toke_skipspace;
}
package Devel::OverloadInfo {
sub blessed($) ;
}
package Devel::Peek {
sub CvGV;
sub DeadCode;
sub Dump;
sub DumpArray;
sub DumpProg;
sub SvREFCNT(\[$@%&*]) ;
sub fill_mstats;
sub mstat;
sub mstats2hash($\%;$) ;
sub mstats_fillhash(\%;$) ;
sub runops_debug;
}
package Devel::StackTrace {
sub blessed($) ;
}
package Digest::MD2 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub md2;
sub md2_base64;
sub md2_hex;
sub new;
sub reset;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub context;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA {
sub DESTROY($) ;
sub _addfilebin($$) ;
sub _addfileuniv($$) ;
sub _getstate($) ;
sub _putstate($$) ;
sub add($;@) ;
sub algorithm($) ;
sub b64digest($) ;
sub clone($) ;
sub digest($) ;
sub hashsize($) ;
sub hexdigest($) ;
sub hmac_sha1(;@) ;
sub hmac_sha1_base64(;@) ;
sub hmac_sha1_hex(;@) ;
sub hmac_sha224(;@) ;
sub hmac_sha224_base64(;@) ;
sub hmac_sha224_hex(;@) ;
sub hmac_sha256(;@) ;
sub hmac_sha256_base64(;@) ;
sub hmac_sha256_hex(;@) ;
sub hmac_sha384(;@) ;
sub hmac_sha384_base64(;@) ;
sub hmac_sha384_hex(;@) ;
sub hmac_sha512(;@) ;
sub hmac_sha512224(;@) ;
sub hmac_sha512224_base64(;@) ;
sub hmac_sha512224_hex(;@) ;
sub hmac_sha512256(;@) ;
sub hmac_sha512256_base64(;@) ;
sub hmac_sha512256_hex(;@) ;
sub hmac_sha512_base64(;@) ;
sub hmac_sha512_hex(;@) ;
sub newSHA($$) ;
sub sha1(;@) ;
sub sha1_base64(;@) ;
sub sha1_hex(;@) ;
sub sha224(;@) ;
sub sha224_base64(;@) ;
sub sha224_hex(;@) ;
sub sha256(;@) ;
sub sha256_base64(;@) ;
sub sha256_hex(;@) ;
sub sha384(;@) ;
sub sha384_base64(;@) ;
sub sha384_hex(;@) ;
sub sha512(;@) ;
sub sha512224(;@) ;
sub sha512224_base64(;@) ;
sub sha512224_hex(;@) ;
sub sha512256(;@) ;
sub sha512256_base64(;@) ;
sub sha512256_hex(;@) ;
sub sha512_base64(;@) ;
sub sha512_hex(;@) ;
sub shainit($$) ;
sub sharewind($) ;
sub shawrite($$$) ;
}
package Digest::SHA1 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub new;
sub sha1;
sub sha1_base64;
sub sha1_hex;
sub sha1_transform;
}
package Digest::Whirlpool {
sub DESTROY;
sub add;
sub clone;
sub digest;
sub hashsize;
sub new;
sub reset;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub CLONE;
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package Encode {
sub _bytes_to_utf8($;@) ;
sub _utf8_off($) ;
sub _utf8_on($) ;
sub _utf8_to_bytes($;@) ;
sub is_utf8($;$) ;
}
package Encode::Unicode {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Encode::XS {
sub cat_decode($$$$$;$) ;
sub decode($$;$) ;
sub encode($$;$) ;
sub mime_name($) ;
sub name($) ;
sub needs_lines($) ;
sub perlio_ok($) ;
sub renew($) ;
sub renewed($) ;
}
package Encode::utf8 {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Eval::Closure {
sub reftype($) ;
}
package Exception::Class {
sub blessed($) ;
sub reftype($) ;
}
package Exception::Class::Base {
sub blessed($) ;
}
package FCGI {
sub Accept($) ;
sub Attach($) ;
sub CloseSocket($) ;
sub DESTROY;
sub Detach($) ;
sub Finish($) ;
sub Flush($) ;
sub GetEnvironment($) ;
sub GetHandles($) ;
sub IsFastCGI($) ;
sub LastCall($) ;
sub OpenSocket($$) ;
sub RequestX(***$$$) ;
sub StartFilterData($) ;
}
package FCGI::Stream {
sub CLOSE;
sub EOF;
sub FILENO;
sub GETC;
sub PRINT;
sub READ;
sub WRITE;
}
package FFI::Raw {
sub DESTROY;
sub call;
sub new;
sub new_from_ptr;
}
package FFI::Raw::Callback {
sub DESTROY;
sub new;
}
package FFI::Raw::MemPtr {
sub DESTROY;
sub new;
sub new_from_buf;
sub new_from_ptr;
sub tostr($;$) ;
}
package Fcntl {
sub AUTOLOAD;
sub DN_ACCESS() ;
sub DN_ATTRIB() ;
sub DN_CREATE() ;
sub DN_DELETE() ;
sub DN_MODIFY() ;
sub DN_MULTISHOT() ;
sub DN_RENAME() ;
sub FAPPEND() ;
sub FASYNC() ;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FD_CLOEXEC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FNDELAY() ;
sub FNONBLOCK() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLEASE() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_GETPIPE_SZ() ;
sub F_GETSIG() ;
sub F_NODNY() ;
sub F_NOTIFY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLEASE() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SETPIPE_SZ() ;
sub F_SETSIG() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub LOCK_MAND() ;
sub LOCK_READ() ;
sub LOCK_RW() ;
sub LOCK_WRITE() ;
sub O_ALIAS() ;
sub O_ALT_IO() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EVTONLY() ;
sub O_EXLOCK() ;
sub O_IGNORE_CTTY() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOATIME() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NOLINK() ;
sub O_NONBLOCK() ;
sub O_NOSIGPIPE() ;
sub O_NOTRANS() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYMLINK() ;
sub O_SYNC() ;
sub O_TTY_INIT() ;
sub S_ENFMT() ;
sub S_IFLNK() ;
sub S_IFMT;
sub S_IFSOCK() ;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub S_ISTXT() ;
sub S_ISVTX() ;
}
package File::DosGlob {
sub _callsite;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub CLONE;
sub GLOB_ERROR;
sub bsd_glob;
sub bsd_glob_override;
sub csh_glob;
}
package File::Map {
sub _mmap_impl;
sub _protection_value;
sub advise;
sub broadcast;
sub lock_map;
sub notify;
sub pin;
sub protect;
sub sync;
sub unmap;
sub unpin;
sub wait_until(&@) ;
}
package File::Spec::Unix {
sub _fn_canonpath;
sub _fn_catdir;
sub _fn_catfile;
sub canonpath;
sub catdir;
sub catfile;
}
package FileHandle {
sub clearerr;
sub error;
sub flush;
sub getpos;
sub new_tmpfile;
sub setbuf;
sub setpos;
sub setvbuf;
sub ungetc;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package GD {
sub constant;
}
package GD::Font {
sub DESTROY($) ;
sub Giant($) ;
sub Large($) ;
sub MediumBold($) ;
sub Small($) ;
sub Tiny($) ;
sub height($) ;
sub load($$) ;
sub nchars($) ;
sub offset($) ;
sub width($) ;
}
package GD::Image {
sub DESTROY($) ;
sub STORABLE_freeze($$) ;
sub STORABLE_thaw;
sub _new($;$$$) ;
sub _newFromGd($$) ;
sub _newFromGd2($$) ;
sub _newFromGd2Part($$$$$$) ;
sub _newFromGif($$;$) ;
sub _newFromJpeg($$;$) ;
sub _newFromPng($$;$) ;
sub _newFromWBMP($$) ;
sub _newFromXbm($$) ;
sub alphaBlending($$) ;
sub arc($$$$$$$$) ;
sub boundsSafe($$$) ;
sub char($$$$$$) ;
sub charUp($$$$$$) ;
sub clip($;$$$$) ;
sub colorAllocate($$$$) ;
sub colorAllocateAlpha($$$$) ;
sub colorClosest($$$$) ;
sub colorClosestAlpha($$$$) ;
sub colorClosestHWB($$$$) ;
sub colorDeallocate($$) ;
sub colorExact($$$$) ;
sub colorExactAlpha($$$$) ;
sub colorResolve($$$$) ;
sub colorResolveAlpha($$$$) ;
sub colorsTotal($) ;
sub compare($$) ;
sub copy($$$$$$$$) ;
sub copyFlipHorizontal($) ;
sub copyFlipVertical($) ;
sub copyMerge($$$$$$$$$) ;
sub copyMergeGray($$$$$$$$$) ;
sub copyResampled($$$$$$$$$$) ;
sub copyResized($$$$$$$$$$) ;
sub copyReverseTranspose($) ;
sub copyRotate180($) ;
sub copyRotate270($) ;
sub copyRotate90($) ;
sub copyRotated($$$$$$$$$) ;
sub copyTranspose($) ;
sub dashedLine($$$$$$) ;
sub fill($$$$) ;
sub fillToBorder($$$$$) ;
sub filledArc($$$$$$$$$) ;
sub filledEllipse($$$$$$) ;
sub filledPolygon($$$) ;
sub filledRectangle($$$$$$) ;
sub flipHorizontal($) ;
sub flipVertical($) ;
sub gd($) ;
sub gd2($) ;
sub getBounds($) ;
sub getPixel($$$) ;
sub gif($) ;
sub gifanimadd($$$$$$$) ;
sub gifanimbegin($$$) ;
sub gifanimend($) ;
sub interlaced($;$) ;
sub isTrueColor($) ;
sub jpeg($) ;
sub line($$$$$$) ;
sub newFromGd2Data($$) ;
sub newFromGdData($$) ;
sub newFromGifData($$;$) ;
sub newFromJpegData($$;$) ;
sub newFromPngData($$;$) ;
sub newFromWBMPData($$;$) ;
sub newFromXpm($$) ;
sub openPolygon($$$) ;
sub paletteCopy($$) ;
sub png($;$) ;
sub rectangle($$$$$$) ;
sub rgb($$) ;
sub rotate180($) ;
sub saveAlpha($$) ;
sub setAntiAliased($$) ;
sub setAntiAliasedDontBlend($$$) ;
sub setBrush($$) ;
sub setPixel($$$$) ;
sub setStyle($;$) ;
sub setThickness($$) ;
sub setTile($$) ;
sub string($$$$$$) ;
sub stringFT($$$$$$$$;$) ;
sub stringFTCircle($$$$$$$$$$$) ;
sub stringTTF($$$$$$$$;$) ;
sub stringUp($$$$$$) ;
sub transparent($;$) ;
sub trueColor($$) ;
sub trueColorToPalette($;$$) ;
sub unclosedPolygon($$$) ;
sub useFontConfig($$) ;
sub wbmp($) ;
}
package GDBM_File {
sub AUTOLOAD;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub close;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub reorganize;
sub setopt;
sub sync;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::Util {
sub all_keys(\%\@\@) ;
sub bucket_array;
sub bucket_info;
sub hash_seed() ;
sub hash_traversal_mask;
sub hash_value($;$) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub reftype($) ;
}
package Hash::Util::FieldHash {
sub CLONE;
sub _active_fields;
sub _fieldhash($$) ;
sub _test_uvar_get;
sub _test_uvar_same;
sub _test_uvar_set;
sub id($) ;
sub id_2obj($) ;
sub reftype($) ;
sub register($@) ;
}
package IO::File {
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub new_tmpfile;
}
package IO::Handle {
sub _create_getline_subs;
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub UIO_MAXIOV() ;
sub inet_aton;
sub inet_ntoa;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub sockatmark($) ;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package IO::Socket::INET {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub UIO_MAXIOV() ;
sub inet_aton;
sub inet_ntoa;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package IO::Socket::IP {
sub SO_REUSEPORT() ;
sub dup2;
sub getaddrinfo;
sub getnameinfo;
sub sockaddr_family;
}
package IO::Socket::UNIX {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub UIO_MAXIOV() ;
sub inet_aton;
sub inet_ntoa;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Imager {
sub DSO_call($$$) ;
sub DSO_close($) ;
sub DSO_funclist($) ;
sub DSO_open($) ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub _is_color_object($) ;
sub i_addcolors($;@) ;
sub i_arc($$$$$$$) ;
sub i_arc_aa($$$$$$$) ;
sub i_arc_aa_cfill($$$$$$$) ;
sub i_arc_cfill($$$$$$$) ;
sub i_arc_out($$$$$$$) ;
sub i_arc_out_aa($$$$$$$) ;
sub i_autolevels($$$$) ;
sub i_autolevels_mono($$$) ;
sub i_bezier_multi($$$$) ;
sub i_box($$$$$$) ;
sub i_box_cfill($$$$$$) ;
sub i_box_filled($$$$$$) ;
sub i_box_filledf($$$$$$) ;
sub i_bumpmap($$$$$$) ;
sub i_bumpmap_complex($$$$$$$$$$$$$$) ;
sub i_circle_aa($$$$$) ;
sub i_circle_aa_fill($$$$$) ;
sub i_circle_out($$$$$) ;
sub i_circle_out_aa($$$$$) ;
sub i_clear_error() ;
sub i_colorcount($) ;
sub i_combine($;$) ;
sub i_compose($$$$$$$$;$$) ;
sub i_compose_mask($$$$$$$$$$$;$$) ;
sub i_contrast($$) ;
sub i_conv($$) ;
sub i_convert($$) ;
sub i_copy($) ;
sub i_copyto($$$$$$$$) ;
sub i_copyto_trans($$$$$$$$$) ;
sub i_count_colors($$) ;
sub i_diff_image($$;$) ;
sub i_errors() ;
sub i_findcolor($$) ;
sub i_flipxy($$) ;
sub i_flood_cfill($$$$) ;
sub i_flood_cfill_border($$$$$) ;
sub i_flood_fill($$$$) ;
sub i_flood_fill_border($$$$$) ;
sub i_fountain($$$$$$$$$$$) ;
sub i_gaussian($$) ;
sub i_get_anonymous_color_histo($;$) ;
sub i_get_image_file_limits() ;
sub i_get_pixel($$$) ;
sub i_getcolors($$;$) ;
sub i_glin($$$$) ;
sub i_glinf($$$$) ;
sub i_gpal($$$$) ;
sub i_gpixf($$$) ;
sub i_gradgen($$$$$) ;
sub i_gsamp($$$$$) ;
sub i_gsamp_bits($$$$$$$$) ;
sub i_gsampf($$$$$) ;
sub i_haar($) ;
sub i_hardinvert($) ;
sub i_hardinvertall($) ;
sub i_img_16_new($$$) ;
sub i_img_8_new($$$) ;
sub i_img_alpha_channel($) ;
sub i_img_bits($) ;
sub i_img_color_channels($) ;
sub i_img_color_model($) ;
sub i_img_diff($$) ;
sub i_img_diffd($$) ;
sub i_img_double_new($$$) ;
sub i_img_epsilonf() ;
sub i_img_get_height($) ;
sub i_img_get_width($) ;
sub i_img_getchannels($) ;
sub i_img_getdata($) ;
sub i_img_getmask($) ;
sub i_img_info($) ;
sub i_img_is_monochrome($) ;
sub i_img_make_palette($;@) ;
sub i_img_masked_new($$$$$$) ;
sub i_img_pal_new($$$$) ;
sub i_img_samef($$;$$) ;
sub i_img_setmask($$) ;
sub i_img_to_drgb($) ;
sub i_img_to_pal($$) ;
sub i_img_to_rgb($) ;
sub i_img_to_rgb16($) ;
sub i_img_type($) ;
sub i_img_virtual($) ;
sub i_init_log($$) ;
sub i_int_check_image_file_limits;
sub i_line($$$$$$$) ;
sub i_line_aa($$$$$$$) ;
sub i_list_formats() ;
sub i_log_enabled() ;
sub i_log_entry($$) ;
sub i_map($$) ;
sub i_matrix_transform($$$$;@) ;
sub i_maxcolors($) ;
sub i_mosaic($$) ;
sub i_nearest_color($;@) ;
sub i_new_fill_fount($$$$$$$$$$) ;
sub i_new_fill_hatch($$$$$$$) ;
sub i_new_fill_hatchf($$$$$$$) ;
sub i_new_fill_image($$$$$) ;
sub i_new_fill_opacity($$) ;
sub i_new_fill_solid($$) ;
sub i_new_fill_solidf($$) ;
sub i_noise($$$) ;
sub i_plin($$$;@) ;
sub i_plinf($$$;@) ;
sub i_poly_aa_cfill_m($$$$$) ;
sub i_poly_aa_m($$$$$) ;
sub i_poly_poly_aa($$$$) ;
sub i_poly_poly_aa_cfill($$$$) ;
sub i_postlevels($$) ;
sub i_ppal($$$;@) ;
sub i_ppal_p($$$$) ;
sub i_ppix($$$$) ;
sub i_ppixf($$$$) ;
sub i_psamp($$$$$;$$) ;
sub i_psamp_bits($$$$$$;$$) ;
sub i_psampf($$$$$;$$) ;
sub i_push_error($$) ;
sub i_radnoise($$$$$) ;
sub i_readbmp_wiol($;$) ;
sub i_readpnm_multi_wiol($$) ;
sub i_readpnm_wiol($$) ;
sub i_readraw_wiol($$$$$$) ;
sub i_readtga_wiol($$) ;
sub i_rotate90($$) ;
sub i_rotate_exact($$;@) ;
sub i_rubthru($$$$$$$$) ;
sub i_sametype($$$) ;
sub i_sametype_chans($$$$) ;
sub i_scale_mixing($$$) ;
sub i_scale_nn($$$) ;
sub i_scaleaxis($$$) ;
sub i_set_image_file_limits($$$) ;
sub i_setcolors($$;@) ;
sub i_tags_add($$$$$) ;
sub i_tags_addn($$$$) ;
sub i_tags_count($) ;
sub i_tags_delbycode($$) ;
sub i_tags_delbyname($$) ;
sub i_tags_delete($$) ;
sub i_tags_find($$$) ;
sub i_tags_findn($$$) ;
sub i_tags_get($$) ;
sub i_tags_get_string($$) ;
sub i_test_format_probe($$) ;
sub i_transform($$$$) ;
sub i_transform2($$$$$$$) ;
sub i_turbnoise($$$$) ;
sub i_unsharp_mask($$$) ;
sub i_watermark($$$$$) ;
sub i_writebmp_wiol($$) ;
sub i_writeppm_wiol($$) ;
sub i_writeraw_wiol($$) ;
sub i_writetga_wiol($$$$$) ;
sub io_new_bufchain() ;
sub io_new_buffer($) ;
sub io_new_cb($$$$;$) ;
sub io_new_fd($) ;
sub io_slurp($) ;
sub malloc_state() ;
}
package Imager::Color {
sub DESTROY;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub info;
sub new_internal;
sub rgba;
sub set_internal;
}
package Imager::Color::Float {
sub DESTROY;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub new_internal;
sub rgba;
sub set_internal;
}
package Imager::Context {
sub CLONE(;@) ;
sub DESTROY($) ;
}
package Imager::CountColor {
sub count_color($$) ;
}
package Imager::File::GIF {
sub i_giflib_version;
sub i_readgif_multi_wiol;
sub i_readgif_single_wiol;
sub i_readgif_wiol;
sub i_writegif_wiol;
}
package Imager::File::ICO {
sub i_readico_multi;
sub i_readico_single;
sub i_writecur_multi_wiol;
sub i_writecur_wiol;
sub i_writeico_multi_wiol;
sub i_writeico_wiol;
}
package Imager::File::JPEG {
sub i_libjpeg_version;
sub i_readjpeg_wiol;
sub i_writejpeg_wiol;
}
package Imager::File::PNG {
sub IMPNG_READ_IGNORE_BENIGN_ERRORS;
sub features;
sub i_png_lib_version;
sub i_readpng_wiol;
sub i_writepng_wiol;
}
package Imager::File::SGI {
sub i_readsgi_wiol;
sub i_writesgi_wiol;
}
package Imager::File::TIFF {
sub i_readtiff_multi_wiol;
sub i_readtiff_wiol;
sub i_tiff_has_compression;
sub i_tiff_ieeefp;
sub i_tiff_libversion;
sub i_writetiff_multi_wiol;
sub i_writetiff_multi_wiol_faxable;
sub i_writetiff_wiol;
sub i_writetiff_wiol_faxable;
}
package Imager::FillHandle {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
}
package Imager::Filter::DynTest {
sub lin_stretch($$$) ;
}
package Imager::Filter::Flines {
sub flines($) ;
}
package Imager::Filter::Mandelbrot {
sub mandelbrot($;$$$$$) ;
}
package Imager::Font::FT2 {
sub ft2_transform_box;
sub i_ft2_bbox;
sub i_ft2_bbox_r;
sub i_ft2_can_do_glyph_names;
sub i_ft2_can_face_name;
sub i_ft2_cp;
sub i_ft2_face_has_glyph_names;
sub i_ft2_face_name;
sub i_ft2_get_multiple_masters;
sub i_ft2_getdpi;
sub i_ft2_glyph_name;
sub i_ft2_has_chars;
sub i_ft2_is_multiple_master;
sub i_ft2_new;
sub i_ft2_set_mm_coords;
sub i_ft2_setdpi;
sub i_ft2_sethinting;
sub i_ft2_settransform;
sub i_ft2_text;
sub i_ft2_version;
}
package Imager::Font::FT2x {
sub CLONE_SKIP;
sub DESTROY;
}
package Imager::Font::T1 {
sub i_init_t1;
}
package Imager::Font::T1xs {
sub CLONE_SKIP;
sub DESTROY;
sub bbox;
sub cp;
sub face_name;
sub glyph_names;
sub has_chars;
sub new;
sub text;
}
package Imager::Font::W32 {
sub i_wf_addfont;
sub i_wf_bbox;
sub i_wf_cp;
sub i_wf_delfont;
sub i_wf_text;
}
package Imager::IO {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
sub _new_perlio($$) ;
sub close($) ;
sub dump($;$) ;
sub eof($) ;
sub error($) ;
sub flush($) ;
sub getc($) ;
sub gets($;$$) ;
sub is_buffered($) ;
sub new_bufchain($) ;
sub new_buffer($$) ;
sub new_cb($$$$$) ;
sub new_fd($$) ;
sub peekc($) ;
sub peekn($$) ;
sub putc($$) ;
sub raw_close($) ;
sub raw_read($$$) ;
sub raw_read2($$) ;
sub raw_seek($$$) ;
sub raw_write($$) ;
sub read($$$) ;
sub read2($$) ;
sub seek($$$) ;
sub set_buffered($;$) ;
sub slurp($$) ;
sub write($$) ;
}
package Imager::ImgRaw {
sub DESTROY;
sub new;
}
package Imager::Internal::Hlines {
sub CLONE_SKIP($) ;
sub DESTROY($) ;
sub add($$$$) ;
sub dump($) ;
sub new($$$$) ;
sub new_img($) ;
sub testing() ;
}
package Internals {
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub hv_clear_placeholders(\%) ;
}
package JSON::XS {
sub CLONE;
sub DESTROY;
sub allow_blessed;
sub allow_nonref;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_canonical;
sub get_convert_blessed;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub space_after;
sub space_before;
sub utf8;
}
package List::MoreUtils {
sub _XScompiled;
sub _array_iterator(;$) ;
sub _natatime_iterator() ;
sub after(&@) ;
sub after_incl(&@) ;
sub all(&@) ;
sub all_u(&@) ;
sub any(&@) ;
sub any_u(&@) ;
sub apply(&@) ;
sub before(&@) ;
sub before_incl(&@) ;
sub bsearch(&@) ;
sub bsearch_index(&@) ;
sub bsearchidx(&@) ;
sub distinct(@) ;
sub each_array(\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub each_arrayref;
sub false(&@) ;
sub first_index(&@) ;
sub first_result(&@) ;
sub first_value(&@) ;
sub firstidx(&@) ;
sub firstres(&@) ;
sub firstval(&@) ;
sub indexes(&@) ;
sub insert_after(&$\@) ;
sub insert_after_string($$\@) ;
sub last_index(&@) ;
sub last_result(&@) ;
sub last_value(&@) ;
sub lastidx(&@) ;
sub lastres(&@) ;
sub lastval(&@) ;
sub mesh(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub minmax(@) ;
sub natatime($@) ;
sub none(&@) ;
sub none_u(&@) ;
sub notall(&@) ;
sub notall_u(&@) ;
sub one(&@) ;
sub one_u(&@) ;
sub only_index(&@) ;
sub only_result(&@) ;
sub only_value(&@) ;
sub onlyidx(&@) ;
sub onlyres(&@) ;
sub onlyval(&@) ;
sub pairwise(&\@\@) ;
sub part(&@) ;
sub singleton(@) ;
sub true(&@) ;
sub uniq(@) ;
sub zip(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
}
package List::MoreUtils_ea {
sub DESTROY;
}
package List::MoreUtils_na {
sub DESTROY;
}
package List::Util {
sub all(&@) ;
sub any(&@) ;
sub first(&@) ;
sub max(@) ;
sub maxstr(@) ;
sub min(@) ;
sub minstr(@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairfirst(&@) ;
sub pairgrep(&@) ;
sub pairkeys(@) ;
sub pairmap(&@) ;
sub pairs(@) ;
sub pairvalues(@) ;
sub product(@) ;
sub reduce(&@) ;
sub shuffle(@) ;
sub sum(@) ;
sub sum0(@) ;
sub uniq(@) ;
sub uniqnum(@) ;
sub uniqstr(@) ;
sub unpairs(@) ;
}
package Lzma::Filter {
sub DESTROY;
sub id;
}
package Lzma::Filter::BCJ {
sub _mk;
}
package Lzma::Filter::Delta {
sub _mk;
}
package Lzma::Filter::Lzma {
sub _mk;
sub _mkPreset;
}
package MIME::Base64 {
sub decode($) ;
sub decode_base64($) ;
sub decoded_base64_length($) ;
sub encode($;$) ;
sub encode_base64($;$) ;
sub encoded_base64_length($;$) ;
}
package MIME::Charset {
sub is_utf8($;$) ;
}
package MIME::QuotedPrint {
sub decode_qp($) ;
sub encode_qp($;$$) ;
}
package Math::BigInt::FastCalc {
sub __strip_zeros;
sub _acmp;
sub _copy;
sub _dec;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _len;
sub _new;
sub _one;
sub _ten;
sub _two;
sub _zero;
}
package Math::BigInt::GMP {
sub DESTROY($) ;
sub _1ex($$) ;
sub _acmp($$$) ;
sub _add($$$) ;
sub _alen($$) ;
sub _and($$$) ;
sub _as_bin($$) ;
sub _as_hex($$) ;
sub _as_oct($$) ;
sub _copy($$) ;
sub _dec($$) ;
sub _div($$$) ;
sub _fac($$) ;
sub _from_bin($$) ;
sub _from_hex($$) ;
sub _from_oct($$) ;
sub _gcd($$$) ;
sub _inc($$) ;
sub _is_even($$) ;
sub _is_odd($$) ;
sub _is_one($$) ;
sub _is_ten($$) ;
sub _is_two($$) ;
sub _is_zero($$) ;
sub _len($$) ;
sub _lsft($$$$) ;
sub _mod($$$) ;
sub _modinv($$$) ;
sub _modpow($$$$) ;
sub _mul($$$) ;
sub _new($$) ;
sub _new_attach($$$) ;
sub _one($) ;
sub _or($$$) ;
sub _pow($$$) ;
sub _root($$$) ;
sub _rsft($$$$) ;
sub _set($$$) ;
sub _sqrt($$) ;
sub _str($$) ;
sub _sub($$$;@) ;
sub _ten($) ;
sub _two($) ;
sub _xor($$$) ;
sub _zero($) ;
sub _zeros($$) ;
}
package Math::BigInt::LTM {
sub DESTROY;
sub STORABLE_freeze;
sub STORABLE_thaw;
sub _1ex;
sub _acmp;
sub _add;
sub _alen;
sub _and;
sub _as_bin;
sub _as_hex;
sub _as_oct;
sub _copy;
sub _dec;
sub _div;
sub _from_bin;
sub _from_hex;
sub _from_oct;
sub _gcd;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _lcm;
sub _len;
sub _lsft;
sub _mod;
sub _modinv;
sub _modpow;
sub _mul;
sub _new;
sub _one;
sub _or;
sub _pow;
sub _root;
sub _rsft;
sub _set;
sub _sqrt;
sub _str;
sub _sub;
sub _ten;
sub _two;
sub _xor;
sub _zero;
sub _zeros;
}
package Math::GMP {
sub DESTROY($) ;
sub _gmp_build_version() ;
sub _gmp_lib_version() ;
sub add_ui_gmp($$) ;
sub band($$$) ;
sub bdiv($$) ;
sub bfac($) ;
sub bgcd($$) ;
sub bior($$$) ;
sub blcm($$) ;
sub blshift($$$) ;
sub bmodinv($$) ;
sub broot($$) ;
sub brootrem($$) ;
sub brshift($$$) ;
sub bsqrt($) ;
sub bsqrtrem($) ;
sub bxor($$$) ;
sub destroy($) ;
sub div_2exp_gmp($$) ;
sub fibonacci($) ;
sub gcd($$) ;
sub get_str_gmp($$) ;
sub gmp_copy($) ;
sub gmp_tstbit($$) ;
sub intify($) ;
sub is_perfect_power($) ;
sub is_perfect_square($) ;
sub jacobi($$) ;
sub lcm($$) ;
sub legendre($$) ;
sub mmod_gmp($$) ;
sub mod_2exp_gmp($$) ;
sub mul_2exp_gmp($$) ;
sub new_from_scalar($) ;
sub new_from_scalar_with_base($$) ;
sub op_add($$$) ;
sub op_div($$$) ;
sub op_eq($$$) ;
sub op_mod($$$) ;
sub op_mul($$$) ;
sub op_pow($$) ;
sub op_spaceship($$$) ;
sub op_sub($$$) ;
sub powm_gmp($$$) ;
sub probab_prime($$) ;
sub sizeinbase_gmp($$) ;
sub stringify($) ;
sub uintify($) ;
}
package Math::Int64 {
sub BER_length;
sub BER_to_int64;
sub BER_to_uint64;
sub STORABLE_freeze;
sub STORABLE_thaw;
sub _add;
sub _and;
sub _backend;
sub _bnot;
sub _bool;
sub _clone;
sub _dec;
sub _div;
sub _eqn;
sub _gen;
sub _gtn;
sub _inc;
sub _left;
sub _len;
sub _ltn;
sub _mul;
sub _neg;
sub _nen;
sub _not;
sub _number;
sub _or;
sub _pow;
sub _rest;
sub _right;
sub _set_may_die_on_overflow;
sub _set_may_use_native;
sub _spaceship;
sub _string;
sub _sub;
sub _xor;
sub hex_to_int64;
sub hex_to_uint64;
sub int64;
sub int64_rand;
sub int64_srand;
sub int64_to_BER;
sub int64_to_hex;
sub int64_to_native;
sub int64_to_net;
sub int64_to_number;
sub int64_to_string;
sub native_to_int64;
sub native_to_uint64;
sub net_to_int64;
sub net_to_uint64;
sub string_to_int64;
sub string_to_uint64;
sub uint64;
sub uint64_rand;
sub uint64_to_BER;
sub uint64_to_hex;
sub uint64_to_native;
sub uint64_to_net;
sub uint64_to_number;
sub uint64_to_string;
}
package Math::MPC {
sub CLONE;
sub DESTROY;
sub NOK_POK_val;
sub RMPC_IM;
sub RMPC_INEX_IM;
sub RMPC_INEX_RE;
sub RMPC_RE;
sub Rmpc_abs;
sub Rmpc_acos;
sub Rmpc_acosh;
sub Rmpc_add;
sub Rmpc_add_fr;
sub Rmpc_add_ui;
sub Rmpc_arg;
sub Rmpc_asin;
sub Rmpc_asinh;
sub Rmpc_atan;
sub Rmpc_atanh;
sub Rmpc_clear;
sub Rmpc_clear_mpc;
sub Rmpc_clear_ptr;
sub Rmpc_cmp;
sub Rmpc_cmp_si;
sub Rmpc_cmp_si_si;
sub Rmpc_conj;
sub Rmpc_cos;
sub Rmpc_cosh;
sub Rmpc_d_div;
sub Rmpc_div;
sub Rmpc_div_2exp;
sub Rmpc_div_2si;
sub Rmpc_div_2ui;
sub Rmpc_div_d;
sub Rmpc_div_fr;
sub Rmpc_div_ld;
sub Rmpc_div_sj;
sub Rmpc_div_ui;
sub Rmpc_exp;
sub Rmpc_get_DC;
sub Rmpc_get_LDC;
sub Rmpc_get_dc;
sub Rmpc_get_default_prec2;
sub Rmpc_get_default_prec;
sub Rmpc_get_default_rounding_mode;
sub Rmpc_get_im_prec;
sub Rmpc_get_ldc;
sub Rmpc_get_prec2;
sub Rmpc_get_prec;
sub Rmpc_get_re_prec;
sub Rmpc_get_str;
sub Rmpc_get_version;
sub Rmpc_imag;
sub Rmpc_init2;
sub Rmpc_init2_nobless;
sub Rmpc_init3;
sub Rmpc_init3_nobless;
sub Rmpc_inp_str;
sub Rmpc_ld_div;
sub Rmpc_log10;
sub Rmpc_log;
sub Rmpc_mul;
sub Rmpc_mul_2exp;
sub Rmpc_mul_2si;
sub Rmpc_mul_2ui;
sub Rmpc_mul_d;
sub Rmpc_mul_fr;
sub Rmpc_mul_i;
sub Rmpc_mul_ld;
sub Rmpc_mul_si;
sub Rmpc_mul_sj;
sub Rmpc_mul_ui;
sub Rmpc_neg;
sub Rmpc_norm;
sub Rmpc_pow;
sub Rmpc_pow_d;
sub Rmpc_pow_fr;
sub Rmpc_pow_ld;
sub Rmpc_pow_si;
sub Rmpc_pow_ui;
sub Rmpc_pow_z;
sub Rmpc_proj;
sub Rmpc_real;
sub Rmpc_set;
sub Rmpc_set_DC;
sub Rmpc_set_LDC;
sub Rmpc_set_NV;
sub Rmpc_set_NV_NV;
sub Rmpc_set_d;
sub Rmpc_set_d_d;
sub Rmpc_set_d_f;
sub Rmpc_set_d_fr;
sub Rmpc_set_d_ld;
sub Rmpc_set_d_q;
sub Rmpc_set_d_si;
sub Rmpc_set_d_sj;
sub Rmpc_set_d_ui;
sub Rmpc_set_d_uj;
sub Rmpc_set_d_z;
sub Rmpc_set_dc;
sub Rmpc_set_default_prec2;
sub Rmpc_set_default_prec;
sub Rmpc_set_default_rounding_mode;
sub Rmpc_set_f;
sub Rmpc_set_f_d;
sub Rmpc_set_f_f;
sub Rmpc_set_f_fr;
sub Rmpc_set_f_ld;
sub Rmpc_set_f_q;
sub Rmpc_set_f_si;
sub Rmpc_set_f_sj;
sub Rmpc_set_f_ui;
sub Rmpc_set_f_uj;
sub Rmpc_set_f_z;
sub Rmpc_set_fr;
sub Rmpc_set_fr_d;
sub Rmpc_set_fr_f;
sub Rmpc_set_fr_fr;
sub Rmpc_set_fr_ld;
sub Rmpc_set_fr_q;
sub Rmpc_set_fr_si;
sub Rmpc_set_fr_sj;
sub Rmpc_set_fr_ui;
sub Rmpc_set_fr_uj;
sub Rmpc_set_fr_z;
sub Rmpc_set_im_prec;
sub Rmpc_set_ld;
sub Rmpc_set_ld_d;
sub Rmpc_set_ld_f;
sub Rmpc_set_ld_fr;
sub Rmpc_set_ld_ld;
sub Rmpc_set_ld_q;
sub Rmpc_set_ld_si;
sub Rmpc_set_ld_sj;
sub Rmpc_set_ld_ui;
sub Rmpc_set_ld_uj;
sub Rmpc_set_ld_z;
sub Rmpc_set_ldc;
sub Rmpc_set_nan;
sub Rmpc_set_prec;
sub Rmpc_set_q;
sub Rmpc_set_q_d;
sub Rmpc_set_q_f;
sub Rmpc_set_q_fr;
sub Rmpc_set_q_ld;
sub Rmpc_set_q_q;
sub Rmpc_set_q_si;
sub Rmpc_set_q_sj;
sub Rmpc_set_q_ui;
sub Rmpc_set_q_uj;
sub Rmpc_set_q_z;
sub Rmpc_set_re_prec;
sub Rmpc_set_si;
sub Rmpc_set_si_d;
sub Rmpc_set_si_f;
sub Rmpc_set_si_fr;
sub Rmpc_set_si_ld;
sub Rmpc_set_si_q;
sub Rmpc_set_si_si;
sub Rmpc_set_si_sj;
sub Rmpc_set_si_ui;
sub Rmpc_set_si_uj;
sub Rmpc_set_si_z;
sub Rmpc_set_sj;
sub Rmpc_set_sj_d;
sub Rmpc_set_sj_f;
sub Rmpc_set_sj_fr;
sub Rmpc_set_sj_ld;
sub Rmpc_set_sj_q;
sub Rmpc_set_sj_si;
sub Rmpc_set_sj_sj;
sub Rmpc_set_sj_ui;
sub Rmpc_set_sj_uj;
sub Rmpc_set_sj_z;
sub Rmpc_set_str;
sub Rmpc_set_ui;
sub Rmpc_set_ui_d;
sub Rmpc_set_ui_f;
sub Rmpc_set_ui_fr;
sub Rmpc_set_ui_ld;
sub Rmpc_set_ui_q;
sub Rmpc_set_ui_si;
sub Rmpc_set_ui_sj;
sub Rmpc_set_ui_ui;
sub Rmpc_set_ui_uj;
sub Rmpc_set_ui_z;
sub Rmpc_set_uj;
sub Rmpc_set_uj_d;
sub Rmpc_set_uj_f;
sub Rmpc_set_uj_fr;
sub Rmpc_set_uj_ld;
sub Rmpc_set_uj_q;
sub Rmpc_set_uj_si;
sub Rmpc_set_uj_sj;
sub Rmpc_set_uj_ui;
sub Rmpc_set_uj_uj;
sub Rmpc_set_uj_z;
sub Rmpc_set_z;
sub Rmpc_set_z_d;
sub Rmpc_set_z_f;
sub Rmpc_set_z_fr;
sub Rmpc_set_z_ld;
sub Rmpc_set_z_q;
sub Rmpc_set_z_si;
sub Rmpc_set_z_sj;
sub Rmpc_set_z_ui;
sub Rmpc_set_z_uj;
sub Rmpc_set_z_z;
sub Rmpc_sin;
sub Rmpc_sin_cos;
sub Rmpc_sinh;
sub Rmpc_sj_div;
sub Rmpc_sqr;
sub Rmpc_sqrt;
sub Rmpc_strtoc;
sub Rmpc_sub;
sub Rmpc_sub_ui;
sub Rmpc_swap;
sub Rmpc_tan;
sub Rmpc_tanh;
sub Rmpc_ui_div;
sub Rmpc_ui_sub;
sub Rmpc_ui_ui_sub;
sub TRmpc_inp_str;
sub _MPC_VERSION;
sub _MPC_VERSION_MAJOR;
sub _MPC_VERSION_MINOR;
sub _MPC_VERSION_NUM;
sub _MPC_VERSION_PATCHLEVEL;
sub _MPC_VERSION_STRING;
sub _Rmpc_out_str;
sub _Rmpc_out_strP;
sub _Rmpc_out_strPS;
sub _Rmpc_out_strS;
sub _SvNOK;
sub _SvPOK;
sub _can_pass_float128;
sub _get_i_string;
sub _get_nv_precision;
sub _get_r_string;
sub _get_xs_version;
sub _has_inttypes;
sub _has_longdouble;
sub _has_longlong;
sub _have_Complex_h;
sub _itsa;
sub _mpfr_buildopt_tls_p;
sub _mpfr_set_NV;
sub _new_real_im;
sub _win32_infnanstring;
sub _wrap_count;
sub clear_nok_pok;
sub gmp_v;
sub mpfr_v;
sub nok_pokflag;
sub overload_abs;
sub overload_add;
sub overload_add_eq;
sub overload_atan2;
sub overload_copy;
sub overload_cos;
sub overload_div;
sub overload_div_eq;
sub overload_equiv;
sub overload_exp;
sub overload_log;
sub overload_mul;
sub overload_mul_eq;
sub overload_not;
sub overload_pow;
sub overload_pow_eq;
sub overload_sin;
sub overload_sqrt;
sub overload_sub;
sub overload_sub_eq;
sub overload_true;
sub set_nok_pok;
}
package Math::MPFR {
sub ARG_MAX() ;
sub B0() ;
sub B110() ;
sub B1200() ;
sub B134() ;
sub B150() ;
sub B1800() ;
sub B19200() ;
sub B200() ;
sub B2400() ;
sub B300() ;
sub B38400() ;
sub B4800() ;
sub B50() ;
sub B600() ;
sub B75() ;
sub B9600() ;
sub BRKINT() ;
sub CHILD_MAX() ;
sub CLOCAL() ;
sub CREAD() ;
sub CS5() ;
sub CS6() ;
sub CS7() ;
sub CS8() ;
sub CSIZE() ;
sub CSTOPB() ;
sub DESTROY;
sub EBADMSG() ;
sub ECHO() ;
sub ECHOE() ;
sub ECHOK() ;
sub ECHONL() ;
sub EHOSTDOWN() ;
sub EIDRM() ;
sub ENODATA() ;
sub ENOLINK() ;
sub ENOMSG() ;
sub ENOSR() ;
sub ENOSTR() ;
sub ENOTBLK() ;
sub ENOTRECOVERABLE() ;
sub EOTHER() ;
sub ERESTART() ;
sub ETIME() ;
sub ETXTBSY() ;
sub FD_CLOEXEC() ;
sub F_DUPFD() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_RDLCK() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLKW() ;
sub F_UNLCK() ;
sub F_WRLCK() ;
sub HUPCL() ;
sub ICANON() ;
sub ICRNL() ;
sub IEXTEN() ;
sub IGNBRK() ;
sub IGNCR() ;
sub IGNPAR() ;
sub INLCR() ;
sub INPCK() ;
sub ISIG() ;
sub ISTRIP() ;
sub IXOFF() ;
sub IXON() ;
sub LC_MESSAGES() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_ctermid() ;
sub L_cuserid() ;
sub L_tmpname() ;
sub MAX_CANON() ;
sub MAX_INPUT() ;
sub NAME_MAX() ;
sub NCCS() ;
sub NDEBUG;
sub NGROUPS_MAX() ;
sub NNW_val;
sub NOFLSH() ;
sub NOK_POK_val;
sub OPEN_MAX() ;
sub OPOST() ;
sub O_NOCTTY() ;
sub O_NONBLOCK() ;
sub PARENB() ;
sub PARMRK() ;
sub PARODD() ;
sub PIPE_BUF() ;
sub RMPFR_PREC_MAX;
sub RMPFR_PREC_MIN;
sub RMPFR_VERSION_NUM;
sub Rmpfr_abs;
sub Rmpfr_acos;
sub Rmpfr_acosh;
sub Rmpfr_add;
sub Rmpfr_add_d;
sub Rmpfr_add_q;
sub Rmpfr_add_si;
sub Rmpfr_add_ui;
sub Rmpfr_add_z;
sub Rmpfr_agm;
sub Rmpfr_ai;
sub Rmpfr_asin;
sub Rmpfr_asinh;
sub Rmpfr_atan2;
sub Rmpfr_atan;
sub Rmpfr_atanh;
sub Rmpfr_buildopt_decimal_p;
sub Rmpfr_buildopt_float128_p;
sub Rmpfr_buildopt_gmpinternals_p;
sub Rmpfr_buildopt_sharedcache_p;
sub Rmpfr_buildopt_tls_p;
sub Rmpfr_buildopt_tune_case;
sub Rmpfr_can_round;
sub Rmpfr_cbrt;
sub Rmpfr_ceil;
sub Rmpfr_check_range;
sub Rmpfr_clear;
sub Rmpfr_clear_divby0;
sub Rmpfr_clear_erangeflag;
sub Rmpfr_clear_flags;
sub Rmpfr_clear_inexflag;
sub Rmpfr_clear_mpfr;
sub Rmpfr_clear_nanflag;
sub Rmpfr_clear_overflow;
sub Rmpfr_clear_ptr;
sub Rmpfr_clear_underflow;
sub Rmpfr_clears;
sub Rmpfr_cmp;
sub Rmpfr_cmp_NV;
sub Rmpfr_cmp_d;
sub Rmpfr_cmp_f;
sub Rmpfr_cmp_ld;
sub Rmpfr_cmp_q;
sub Rmpfr_cmp_si;
sub Rmpfr_cmp_si_2exp;
sub Rmpfr_cmp_ui;
sub Rmpfr_cmp_ui_2exp;
sub Rmpfr_cmp_z;
sub Rmpfr_cmpabs;
sub Rmpfr_const_catalan;
sub Rmpfr_const_euler;
sub Rmpfr_const_log2;
sub Rmpfr_const_pi;
sub Rmpfr_copysign;
sub Rmpfr_cos;
sub Rmpfr_cosh;
sub Rmpfr_cot;
sub Rmpfr_coth;
sub Rmpfr_csc;
sub Rmpfr_csch;
sub Rmpfr_d_div;
sub Rmpfr_d_sub;
sub Rmpfr_deref2;
sub Rmpfr_digamma;
sub Rmpfr_dim;
sub Rmpfr_div;
sub Rmpfr_div_2exp;
sub Rmpfr_div_2si;
sub Rmpfr_div_2ui;
sub Rmpfr_div_d;
sub Rmpfr_div_q;
sub Rmpfr_div_si;
sub Rmpfr_div_ui;
sub Rmpfr_div_z;
sub Rmpfr_divby0_p;
sub Rmpfr_dump;
sub Rmpfr_eint;
sub Rmpfr_eq;
sub Rmpfr_equal_p;
sub Rmpfr_erandom;
sub Rmpfr_erangeflag_p;
sub Rmpfr_erf;
sub Rmpfr_erfc;
sub Rmpfr_exp10;
sub Rmpfr_exp2;
sub Rmpfr_exp;
sub Rmpfr_expm1;
sub Rmpfr_fac_ui;
sub Rmpfr_fits_IV_p;
sub Rmpfr_fits_UV_p;
sub Rmpfr_fits_intmax_p;
sub Rmpfr_fits_sint_p;
sub Rmpfr_fits_slong_p;
sub Rmpfr_fits_sshort_p;
sub Rmpfr_fits_uint_p;
sub Rmpfr_fits_uintmax_p;
sub Rmpfr_fits_ulong_p;
sub Rmpfr_fits_ushort_p;
sub Rmpfr_flags_clear;
sub Rmpfr_flags_restore;
sub Rmpfr_flags_save;
sub Rmpfr_flags_set;
sub Rmpfr_flags_test;
sub Rmpfr_floor;
sub Rmpfr_fma;
sub Rmpfr_fmma;
sub Rmpfr_fmms;
sub Rmpfr_fmod;
sub Rmpfr_fmodquo;
sub Rmpfr_fms;
sub Rmpfr_fpif_export;
sub Rmpfr_fpif_import;
sub Rmpfr_frac;
sub Rmpfr_free_cache;
sub Rmpfr_frexp;
sub Rmpfr_gamma;
sub Rmpfr_gamma_inc;
sub Rmpfr_get_DECIMAL64;
sub Rmpfr_get_FLOAT128;
sub Rmpfr_get_IV;
sub Rmpfr_get_LD;
sub Rmpfr_get_NV;
sub Rmpfr_get_UV;
sub Rmpfr_get_d1;
sub Rmpfr_get_d;
sub Rmpfr_get_d_2exp;
sub Rmpfr_get_default_prec;
sub Rmpfr_get_default_rounding_mode;
sub Rmpfr_get_emax;
sub Rmpfr_get_emax_max;
sub Rmpfr_get_emax_min;
sub Rmpfr_get_emin;
sub Rmpfr_get_emin_max;
sub Rmpfr_get_emin_min;
sub Rmpfr_get_exp;
sub Rmpfr_get_f;
sub Rmpfr_get_float128;
sub Rmpfr_get_flt;
sub Rmpfr_get_ld;
sub Rmpfr_get_ld_2exp;
sub Rmpfr_get_patches;
sub Rmpfr_get_prec;
sub Rmpfr_get_q;
sub Rmpfr_get_si;
sub Rmpfr_get_sj;
sub Rmpfr_get_ui;
sub Rmpfr_get_uj;
sub Rmpfr_get_version;
sub Rmpfr_get_z;
sub Rmpfr_get_z_2exp;
sub Rmpfr_get_z_exp;
sub Rmpfr_grandom;
sub Rmpfr_greater_p;
sub Rmpfr_greaterequal_p;
sub Rmpfr_hypot;
sub Rmpfr_inexflag_p;
sub Rmpfr_inf_p;
sub Rmpfr_init2;
sub Rmpfr_init2_nobless;
sub Rmpfr_init;
sub Rmpfr_init_nobless;
sub Rmpfr_init_set;
sub Rmpfr_init_set_d;
sub Rmpfr_init_set_d_nobless;
sub Rmpfr_init_set_f;
sub Rmpfr_init_set_f_nobless;
sub Rmpfr_init_set_ld;
sub Rmpfr_init_set_ld_nobless;
sub Rmpfr_init_set_nobless;
sub Rmpfr_init_set_q;
sub Rmpfr_init_set_q_nobless;
sub Rmpfr_init_set_si;
sub Rmpfr_init_set_si_nobless;
sub Rmpfr_init_set_str;
sub Rmpfr_init_set_str_nobless;
sub Rmpfr_init_set_ui;
sub Rmpfr_init_set_ui_nobless;
sub Rmpfr_init_set_z;
sub Rmpfr_init_set_z_nobless;
sub Rmpfr_inp_str;
sub Rmpfr_integer_p;
sub Rmpfr_j0;
sub Rmpfr_j1;
sub Rmpfr_jn;
sub Rmpfr_less_p;
sub Rmpfr_lessequal_p;
sub Rmpfr_lessgreater_p;
sub Rmpfr_lgamma;
sub Rmpfr_li2;
sub Rmpfr_lngamma;
sub Rmpfr_log10;
sub Rmpfr_log1p;
sub Rmpfr_log2;
sub Rmpfr_log;
sub Rmpfr_log_ui;
sub Rmpfr_max;
sub Rmpfr_min;
sub Rmpfr_min_prec;
sub Rmpfr_modf;
sub Rmpfr_mul;
sub Rmpfr_mul_2exp;
sub Rmpfr_mul_2si;
sub Rmpfr_mul_2ui;
sub Rmpfr_mul_d;
sub Rmpfr_mul_q;
sub Rmpfr_mul_si;
sub Rmpfr_mul_ui;
sub Rmpfr_mul_z;
sub Rmpfr_nan_p;
sub Rmpfr_nanflag_p;
sub Rmpfr_neg;
sub Rmpfr_nextabove;
sub Rmpfr_nextbelow;
sub Rmpfr_nexttoward;
sub Rmpfr_nrandom;
sub Rmpfr_number_p;
sub Rmpfr_overflow_p;
sub Rmpfr_pow;
sub Rmpfr_pow_si;
sub Rmpfr_pow_ui;
sub Rmpfr_pow_z;
sub Rmpfr_prec_round;
sub Rmpfr_print_rnd_mode;
sub Rmpfr_randclear;
sub Rmpfr_randinit_default;
sub Rmpfr_randinit_default_nobless;
sub Rmpfr_randinit_lc_2exp;
sub Rmpfr_randinit_lc_2exp_nobless;
sub Rmpfr_randinit_lc_2exp_size;
sub Rmpfr_randinit_lc_2exp_size_nobless;
sub Rmpfr_randinit_mt;
sub Rmpfr_randinit_mt_nobless;
sub Rmpfr_random2;
sub Rmpfr_randseed;
sub Rmpfr_randseed_ui;
sub Rmpfr_rec_sqrt;
sub Rmpfr_regular_p;
sub Rmpfr_reldiff;
sub Rmpfr_remainder;
sub Rmpfr_remquo;
sub Rmpfr_rint;
sub Rmpfr_rint_ceil;
sub Rmpfr_rint_floor;
sub Rmpfr_rint_round;
sub Rmpfr_rint_roundeven;
sub Rmpfr_rint_trunc;
sub Rmpfr_root;
sub Rmpfr_round;
sub Rmpfr_roundeven;
sub Rmpfr_sec;
sub Rmpfr_sech;
sub Rmpfr_set;
sub Rmpfr_set_DECIMAL64;
sub Rmpfr_set_FLOAT128;
sub Rmpfr_set_LD;
sub Rmpfr_set_NV;
sub Rmpfr_set_d;
sub Rmpfr_set_default_prec;
sub Rmpfr_set_default_rounding_mode;
sub Rmpfr_set_divby0;
sub Rmpfr_set_emax;
sub Rmpfr_set_emin;
sub Rmpfr_set_erangeflag;
sub Rmpfr_set_exp;
sub Rmpfr_set_f;
sub Rmpfr_set_float128;
sub Rmpfr_set_flt;
sub Rmpfr_set_inexflag;
sub Rmpfr_set_inf;
sub Rmpfr_set_ld;
sub Rmpfr_set_nan;
sub Rmpfr_set_nanflag;
sub Rmpfr_set_overflow;
sub Rmpfr_set_prec;
sub Rmpfr_set_prec_raw;
sub Rmpfr_set_q;
sub Rmpfr_set_si;
sub Rmpfr_set_si_2exp;
sub Rmpfr_set_sj;
sub Rmpfr_set_sj_2exp;
sub Rmpfr_set_str;
sub Rmpfr_set_ui;
sub Rmpfr_set_ui_2exp;
sub Rmpfr_set_uj;
sub Rmpfr_set_uj_2exp;
sub Rmpfr_set_underflow;
sub Rmpfr_set_z;
sub Rmpfr_set_z_2exp;
sub Rmpfr_set_zero;
sub Rmpfr_setsign;
sub Rmpfr_sgn;
sub Rmpfr_si_div;
sub Rmpfr_si_sub;
sub Rmpfr_signbit;
sub Rmpfr_sin;
sub Rmpfr_sin_cos;
sub Rmpfr_sinh;
sub Rmpfr_sinh_cosh;
sub Rmpfr_sqr;
sub Rmpfr_sqrt;
sub Rmpfr_sqrt_ui;
sub Rmpfr_strtofr;
sub Rmpfr_sub;
sub Rmpfr_sub_d;
sub Rmpfr_sub_q;
sub Rmpfr_sub_si;
sub Rmpfr_sub_ui;
sub Rmpfr_sub_z;
sub Rmpfr_subnormalize;
sub Rmpfr_sum;
sub Rmpfr_swap;
sub Rmpfr_tan;
sub Rmpfr_tanh;
sub Rmpfr_trunc;
sub Rmpfr_ui_div;
sub Rmpfr_ui_pow;
sub Rmpfr_ui_pow_ui;
sub Rmpfr_ui_sub;
sub Rmpfr_underflow_p;
sub Rmpfr_unordered_p;
sub Rmpfr_urandom;
sub Rmpfr_urandomb;
sub Rmpfr_y0;
sub Rmpfr_y1;
sub Rmpfr_yn;
sub Rmpfr_z_sub;
sub Rmpfr_zero_p;
sub Rmpfr_zeta;
sub Rmpfr_zeta_ui;
sub SA_NOCLDSTOP() ;
sub SA_NOCLDWAIT() ;
sub SA_NODEFER() ;
sub SA_ONSTACK() ;
sub SA_RESETHAND() ;
sub SA_RESTART() ;
sub SA_SIGINFO() ;
sub SIGALRM() ;
sub SIGBUS() ;
sub SIGCHLD() ;
sub SIGCONT() ;
sub SIGHUP() ;
sub SIGKILL() ;
sub SIGPIPE() ;
sub SIGPOLL() ;
sub SIGPROF() ;
sub SIGQUIT() ;
sub SIGRTMAX() ;
sub SIGRTMIN() ;
sub SIGSTOP() ;
sub SIGSYS() ;
sub SIGTRAP() ;
sub SIGTSTP() ;
sub SIGTTIN() ;
sub SIGTTOU() ;
sub SIGURG() ;
sub SIGUSR1() ;
sub SIGUSR2() ;
sub SIGVTALRM() ;
sub SIGXCPU() ;
sub SIGXFSZ() ;
sub SIG_BLOCK() ;
sub SIG_SETMASK() ;
sub SIG_UNBLOCK() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TCIFLUSH() ;
sub TCIOFF() ;
sub TCIOFLUSH() ;
sub TCION() ;
sub TCOFLUSH() ;
sub TCOOFF() ;
sub TCOON() ;
sub TCSADRAIN() ;
sub TCSAFLUSH() ;
sub TCSANOW() ;
sub TOSTOP() ;
sub TRmpfr_inp_str;
sub TZNAME_MAX() ;
sub VEOF() ;
sub VEOL() ;
sub VERASE() ;
sub VINTR() ;
sub VKILL() ;
sub VMIN() ;
sub VQUIT() ;
sub VSTART() ;
sub VSTOP() ;
sub VSUSP() ;
sub VTIME() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub WUNTRACED() ;
sub _DBL_DIG;
sub _DBL_MANT_DIG;
sub _FLT128_DIG;
sub _FLT128_MANT_DIG;
sub _GMP_LIMB_BITS;
sub _GMP_NAIL_BITS;
sub _LDBL_DIG;
sub _LDBL_MANT_DIG;
sub _MPFR_VERSION;
sub _MPFR_VERSION_MAJOR;
sub _MPFR_VERSION_MINOR;
sub _MPFR_VERSION_PATCHLEVEL;
sub _MPFR_VERSION_STRING;
sub _MPFR_WANT_DECIMAL_FLOATS;
sub _MPFR_WANT_FLOAT128;
sub _PC_CHOWN_RESTRICTED() ;
sub _PC_LINK_MAX() ;
sub _PC_MAX_CANON() ;
sub _PC_MAX_INPUT() ;
sub _PC_NAME_MAX() ;
sub _PC_NO_TRUNC() ;
sub _PC_PATH_MAX() ;
sub _PC_PIPE_BUF() ;
sub _PC_VDISABLE() ;
sub _Rmpfr_out_str;
sub _Rmpfr_out_strP;
sub _Rmpfr_out_strPS;
sub _Rmpfr_out_strS;
sub _SC_ARG_MAX() ;
sub _SC_CHILD_MAX() ;
sub _SC_CLK_TCK() ;
sub _SC_JOB_CONTROL() ;
sub _SC_NGROUPS_MAX() ;
sub _SC_OPEN_MAX() ;
sub _SC_PAGESIZE() ;
sub _SC_SAVED_IDS() ;
sub _SC_STREAM_MAX() ;
sub _SC_TZNAME_MAX() ;
sub _SC_VERSION() ;
sub _SvNOK;
sub _SvPOK;
sub _TRmpfr_out_str;
sub _TRmpfr_out_strP;
sub _TRmpfr_out_strPS;
sub _TRmpfr_out_strS;
sub _can_pass_float128;
sub _d_bytes;
sub _d_bytes_fr;
sub _dd_bytes;
sub _dd_bytes_fr;
sub _exit;
sub _f128_bytes;
sub _f128_bytes_fr;
sub _get_xs_version;
sub _has_inttypes;
sub _has_longdouble;
sub _has_longlong;
sub _have_IEEE_754_long_double;
sub _have_extended_precision_long_double;
sub _is_readonly;
sub _isobject;
sub _itsa;
sub _ivsize;
sub _ivsize_bits;
sub _ld_bytes;
sub _ld_bytes_fr;
sub _max_base;
sub _mp_sizes;
sub _mpfr_want_float128;
sub _nv_is_float128;
sub _nvsize;
sub _readonly_off;
sub _readonly_on;
sub _required_ldbl_mant_dig;
sub _win32_infnanstring;
sub _wrap_count;
sub abort;
sub access;
sub acos;
sub asctime;
sub asin;
sub assert;
sub atan;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub ceil;
sub cfgetispeed;
sub cfgetospeed;
sub cfsetispeed;
sub cfsetospeed;
sub clear_nnum;
sub clear_nok_pok;
sub clearerr;
sub clock;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub fabs;
sub fclose;
sub fdopen;
sub feof;
sub ferror;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub floor;
sub fmod;
sub fopen;
sub fpathconf;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub get_package_name;
sub get_refcnt;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgroups;
sub getpid;
sub gets;
sub getuid;
sub gmp_v;
sub isalnum;
sub isalpha;
sub isatty;
sub iscntrl;
sub isdigit;
sub isgraph;
sub islower;
sub isprint;
sub ispunct;
sub isspace;
sub isupper;
sub isxdigit;
sub labs;
sub ldexp;
sub ldiv;
sub localeconv;
sub log10;
sub longjmp;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkfifo;
sub mktime;
sub modf;
sub nanflag_bug;
sub nnumflag;
sub nok_pokflag;
sub offsetof;
sub overload_abs;
sub overload_add;
sub overload_add_eq;
sub overload_atan2;
sub overload_copy;
sub overload_cos;
sub overload_dec;
sub overload_div;
sub overload_div_eq;
sub overload_equiv;
sub overload_exp;
sub overload_gt;
sub overload_gte;
sub overload_inc;
sub overload_int;
sub overload_log;
sub overload_lt;
sub overload_lte;
sub overload_mul;
sub overload_mul_eq;
sub overload_not;
sub overload_not_equiv;
sub overload_pow;
sub overload_pow_eq;
sub overload_sin;
sub overload_spaceship;
sub overload_sqrt;
sub overload_sub;
sub overload_sub_eq;
sub overload_true;
sub pathconf;
sub pause;
sub pow;
sub prec_cast;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub realloc;
sub remove;
sub rewind;
sub scanf;
sub set_nnum;
sub set_nok_pok;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signal;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sinh;
sub sscanf;
sub stderr;
sub stdin;
sub stdout;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetattr;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetattr;
sub tcsetpgrp;
sub tmpfile;
sub tmpnam;
sub tolower;
sub toupper;
sub ttyname;
sub tzname;
sub tzset;
sub uname;
sub ungetc;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wcstombs;
sub wctomb;
sub wrap_mpfr_fprintf;
sub wrap_mpfr_fprintf_rnd;
sub wrap_mpfr_printf;
sub wrap_mpfr_printf_rnd;
sub wrap_mpfr_snprintf;
sub wrap_mpfr_snprintf_rnd;
sub wrap_mpfr_sprintf;
sub wrap_mpfr_sprintf_rnd;
}
package Math::MPFR::Prec {
sub DESTROY;
sub prec_cast;
}
package Math::MPFR::Random {
sub Rmpfr_randinit_default;
sub Rmpfr_randinit_lc_2exp;
sub Rmpfr_randinit_lc_2exp_size;
sub Rmpfr_randinit_mt;
}
package Math::MPFR::V {
sub _MPFR_VERSION;
sub _MPFR_VERSION_MAJOR;
sub _MPFR_VERSION_MINOR;
sub _MPFR_VERSION_PATCHLEVEL;
sub _MPFR_VERSION_STRING;
sub ___GMP_CC;
sub ___GMP_CFLAGS;
sub ___GNU_MP_VERSION;
sub ___GNU_MP_VERSION_MINOR;
sub ___GNU_MP_VERSION_PATCHLEVEL;
}
package Math::Prime::Util {
sub CLONE(;@) ;
sub Pi(;$) ;
sub _XS_ExponentialIntegral($) ;
sub _XS_LMOS_pi($) ;
sub _XS_LMO_pi($) ;
sub _XS_LambertW($) ;
sub _XS_LogarithmicIntegral($) ;
sub _XS_RiemannR($) ;
sub _XS_RiemannZeta($) ;
sub _XS_get_callgmp() ;
sub _XS_get_verbose() ;
sub _XS_legendre_pi($) ;
sub _XS_lehmer_pi($) ;
sub _XS_meissel_pi($) ;
sub _XS_segment_pi($;@) ;
sub _XS_set_callgmp($) ;
sub _XS_set_verbose($) ;
sub _get_prime_cache_size() ;
sub _n_ramanujan_primes($$) ;
sub _pidigits($) ;
sub _ramanujan_primes($$) ;
sub _validate_num($;@) ;
sub addmod($$$) ;
sub binomial($$) ;
sub carmichael_lambda($) ;
sub chebyshev_psi($) ;
sub chebyshev_theta($) ;
sub chinese(@) ;
sub divisor_sum($;@) ;
sub divisors($) ;
sub divmod($$$) ;
sub ecm_factor($;@) ;
sub erat_primes($$) ;
sub euler_phi($;@) ;
sub exp_mangoldt($) ;
sub factor($) ;
sub factor_exp($) ;
sub factorial($) ;
sub fermat_factor($;@) ;
sub forcomb(&$;$) ;
sub forcomp(&$;$) ;
sub forcomposites(&$;$) ;
sub fordivisors(&$) ;
sub foroddcomposites(&$;$) ;
sub forpart(&$;$) ;
sub forperm(&$;$) ;
sub forprimes(&$;$) ;
sub fromdigits($;$$) ;
sub gcd(@) ;
sub gcdext($$) ;
sub hammingweight($) ;
sub hclassno($) ;
sub holf_factor($;@) ;
sub invmod($$) ;
sub is_aks_prime($;@) ;
sub is_almost_extra_strong_lucas_pseudoprime($;@) ;
sub is_bpsw_prime($;@) ;
sub is_carmichael($;@) ;
sub is_catalan_pseudoprime($;@) ;
sub is_euler_plumb_pseudoprime($;@) ;
sub is_euler_pseudoprime($;@) ;
sub is_extra_strong_lucas_pseudoprime($;@) ;
sub is_frobenius_khashin_pseudoprime($;@) ;
sub is_frobenius_pseudoprime($;@) ;
sub is_frobenius_underwood_pseudoprime($;@) ;
sub is_lucas_pseudoprime($;@) ;
sub is_mersenne_prime($;@) ;
sub is_perrin_pseudoprime($;@) ;
sub is_power($;@) ;
sub is_prime($;@) ;
sub is_prime_power($;@) ;
sub is_primitive_root($;@) ;
sub is_prob_prime($;@) ;
sub is_provable_prime($;@) ;
sub is_pseudoprime($;@) ;
sub is_quasi_carmichael($;@) ;
sub is_ramanujan_prime($;@) ;
sub is_square_free($;@) ;
sub is_strong_lucas_pseudoprime($;@) ;
sub is_strong_pseudoprime($;@) ;
sub jordan_totient($$) ;
sub kronecker($$) ;
sub lcm(@) ;
sub legendre_phi($$) ;
sub liouville($) ;
sub logint($;@) ;
sub lucas_sequence(;@) ;
sub lucasu(;@) ;
sub lucasv(;@) ;
sub mertens($) ;
sub moebius($;@) ;
sub mulmod($$$) ;
sub next_prime($) ;
sub nth_prime($) ;
sub nth_prime_approx($) ;
sub nth_prime_lower($) ;
sub nth_prime_upper($) ;
sub nth_ramanujan_prime($) ;
sub nth_twin_prime($) ;
sub nth_twin_prime_approx($) ;
sub pbrent_factor($;@) ;
sub pminus1_factor($;@) ;
sub powmod($$$) ;
sub pplus1_factor($;@) ;
sub prev_prime($) ;
sub prho_factor($;@) ;
sub prime_count($;@) ;
sub prime_count_approx($) ;
sub prime_count_lower($) ;
sub prime_count_upper($) ;
sub prime_memfree() ;
sub prime_precalc($) ;
sub print_primes($;@) ;
sub ramanujan_prime_count($;@) ;
sub ramanujan_sum($$) ;
sub ramanujan_tau($) ;
sub rootint($;@) ;
sub segment_primes($$) ;
sub segment_twin_primes($$) ;
sub sieve_prime_cluster($$;@) ;
sub sieve_primes($$) ;
sub sieve_range($$$) ;
sub sqrtint($) ;
sub sqrtmod($$) ;
sub squfof_factor($;@) ;
sub stirling($$;$) ;
sub sum_primes($;@) ;
sub sumdigits($;$) ;
sub todigits($;$$) ;
sub todigitstring($;$$) ;
sub trial_factor($;@) ;
sub trial_primes($$) ;
sub twin_prime_count($;@) ;
sub twin_prime_count_approx($) ;
sub valuation($$) ;
sub vecall(&@) ;
sub vecany(&@) ;
sub vecextract($$) ;
sub vecfirst(&@) ;
sub vecfirstidx(&@) ;
sub vecmax(@) ;
sub vecmin(@) ;
sub vecnone(&@) ;
sub vecnotall(&@) ;
sub vecprod(@) ;
sub vecreduce(&@) ;
sub vecsum(@) ;
sub znlog($$$) ;
sub znorder($$) ;
sub znprimroot($) ;
}
package Math::Prime::Util::GMP {
sub Pi($) ;
sub _GMP_destroy() ;
sub _GMP_init() ;
sub _GMP_set_verbose($) ;
sub _is_provable_prime($;$) ;
sub _validate_ecpp_curve($$$$$$$) ;
sub addmod($$$) ;
sub bernfrac($) ;
sub bernreal($;$) ;
sub binomial($$) ;
sub carmichael_lambda($) ;
sub chinese(@) ;
sub consecutive_integer_lcm($) ;
sub divisors($) ;
sub divmod($$$) ;
sub ecm_factor($;@) ;
sub exp_mangoldt($) ;
sub factor($) ;
sub factorial($) ;
sub gcd(@) ;
sub gcdext($$) ;
sub harmfrac($) ;
sub harmreal($;$) ;
sub holf_factor($;@) ;
sub invmod($$) ;
sub is_aks_prime($) ;
sub is_almost_extra_strong_lucas_pseudoprime($;$) ;
sub is_bls75_prime($) ;
sub is_bpsw_prime($) ;
sub is_ecpp_prime($) ;
sub is_euler_plumb_pseudoprime($) ;
sub is_euler_pseudoprime($;@) ;
sub is_extra_strong_lucas_pseudoprime($) ;
sub is_frobenius_khashin_pseudoprime($) ;
sub is_frobenius_pseudoprime($;$$) ;
sub is_frobenius_underwood_pseudoprime($) ;
sub is_llr_prime($) ;
sub is_lucas_pseudoprime($) ;
sub is_mersenne_prime($) ;
sub is_miller_prime($;$) ;
sub is_nminus1_prime($) ;
sub is_nplus1_prime($) ;
sub is_perrin_pseudoprime($;$) ;
sub is_power($;$) ;
sub is_prime($) ;
sub is_prime_power($) ;
sub is_primitive_root($$) ;
sub is_prob_prime($) ;
sub is_proth_prime($) ;
sub is_pseudoprime($;@) ;
sub is_strong_lucas_pseudoprime($) ;
sub is_strong_pseudoprime($;@) ;
sub jordan_totient($$) ;
sub kronecker($$) ;
sub lcm(@) ;
sub liouville($) ;
sub lucas_sequence($$$$) ;
sub lucasu($$$) ;
sub lucasv($$$) ;
sub miller_rabin_random($$;$) ;
sub moebius($;$) ;
sub mulmod($$$) ;
sub next_prime($) ;
sub partitions($) ;
sub pbrent_factor($;@) ;
sub pminus1_factor($;@) ;
sub pn_primorial($) ;
sub powmod($$$) ;
sub pplus1_factor($;@) ;
sub prev_prime($) ;
sub prho_factor($;@) ;
sub prime_count($$) ;
sub primorial($) ;
sub qs_factor($;@) ;
sub ramanujan_tau($) ;
sub riemannr($;$) ;
sub rootint($$) ;
sub sieve_prime_cluster($$;@) ;
sub sieve_primes($$;@) ;
sub sieve_range($$$) ;
sub sieve_twin_primes($$;@) ;
sub sigma($;$) ;
sub sqrtint($) ;
sub sqrtmod($$) ;
sub squfof_factor($;@) ;
sub stirling($$;$) ;
sub surround_primes($;$) ;
sub todigits($;$$) ;
sub totient($) ;
sub trial_factor($;@) ;
sub valuation($$) ;
sub vecprod(@) ;
sub vecsum(@) ;
sub zeta($;$) ;
sub znorder($$) ;
sub znprimroot($) ;
}
package Math::UInt64 {
sub STORABLE_freeze;
sub STORABLE_thaw;
sub _add;
sub _and;
sub _bnot;
sub _bool;
sub _clone;
sub _dec;
sub _div;
sub _eqn;
sub _gen;
sub _gtn;
sub _inc;
sub _left;
sub _len;
sub _ltn;
sub _mul;
sub _neg;
sub _nen;
sub _not;
sub _number;
sub _or;
sub _pow;
sub _rest;
sub _right;
sub _spaceship;
sub _string;
sub _sub;
sub _xor;
}
package Moose {
sub is_class_loaded;
}
package Moose::Exporter {
sub _export_is_flagged;
sub _flag_as_reexport;
sub is_class_loaded;
sub reftype($) ;
sub subname;
sub uniq(@) ;
}
package Moose::Meta::Attribute {
sub any(&@) ;
sub blessed($) ;
}
package Moose::Meta::Class {
sub any(&@) ;
sub blessed($) ;
}
package Moose::Meta::Class::Immutable::Trait {
sub blessed($) ;
}
package Moose::Meta::Method::Constructor {
sub weaken($) ;
}
package Moose::Meta::Method::Delegation {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Method::Destructor {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Object::Trait {
sub blessed($) ;
}
package Moose::Meta::Role {
sub blessed($) ;
}
package Moose::Meta::Role::Application {
sub all(&@) ;
}
package Moose::Meta::Role::Application::RoleSummation {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Application::ToClass {
sub first(&@) ;
sub weaken($) ;
}
package Moose::Meta::Role::Application::ToInstance {
sub _reset_amagic;
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Attribute {
sub all(&@) ;
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Role::Composite {
sub blessed($) ;
}
package Moose::Meta::TypeCoercion::Union {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint {
sub refaddr($) ;
sub subname;
}
package Moose::Meta::TypeConstraint::DuckType {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Parameterized {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Registry {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Union {
sub all(&@) ;
sub first(&@) ;
}
package Moose::Role {
sub is_class_loaded;
}
package Moose::Util {
sub _STRING($) ;
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::MetaRole {
sub all(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::TypeConstraints {
sub blessed($) ;
}
package Moose::Util::TypeConstraints::Builtins {
sub _RegexpRef;
sub blessed($) ;
sub is_class_loaded;
}
package NDBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub clearerr;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Net::SSH2 {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub CLONE;
sub DESTROY;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub UIO_MAXIOV() ;
sub _auth_list;
sub _method;
sub _new;
sub _parse_constant;
sub _poll;
sub _scp_get;
sub _scp_put;
sub _set_error;
sub _startup;
sub auth_agent;
sub auth_hostbased;
sub auth_keyboard;
sub auth_ok;
sub auth_password;
sub auth_publickey;
sub auth_publickey_frommemory;
sub banner;
sub block_directions;
sub blocking;
sub callback;
sub channel;
sub constant;
sub debug;
sub disconnect;
sub error;
sub flag;
sub hostkey_hash;
sub hostname;
sub inet_aton;
sub inet_ntoa;
sub keepalive_config;
sub keepalive_send;
sub known_hosts;
sub listen;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub port;
sub public_key;
sub remote_hostkey;
sub sftp;
sub sock;
sub sockaddr_family;
sub tcpip;
sub timeout;
sub trace;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub version;
}
package Net::SSH2::Channel {
sub DESTROY;
sub GETC;
sub _exit_signal;
sub _exit_status;
sub _setenv;
sub _wait_closed;
sub close;
sub eof;
sub ext_data;
sub flush;
sub getc;
sub process;
sub pty;
sub pty_size;
sub read;
sub receive_window_adjust;
sub send_eof;
sub session;
sub wait_eof;
sub window_read;
sub window_write;
sub write;
}
package Net::SSH2::Dir {
sub DESTROY;
sub read;
}
package Net::SSH2::File {
sub DESTROY;
sub GETC;
sub getc;
sub read;
sub seek;
sub setstat;
sub stat;
sub tell;
sub write;
}
package Net::SSH2::KnownHosts {
sub DESTROY;
sub add;
sub check;
sub readfile;
sub readline;
sub writefile;
sub writeline;
}
package Net::SSH2::Listener {
sub DESTROY;
sub accept;
}
package Net::SSH2::PublicKey {
sub DESTROY;
sub add;
sub fetch;
sub remove;
}
package Net::SSH2::SFTP {
sub DESTROY;
sub error;
sub mkdir;
sub open;
sub opendir;
sub readlink;
sub realpath;
sub rename;
sub rmdir;
sub session;
sub setstat;
sub stat;
sub symlink;
sub unlink;
}
package Net::SSLeay {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub ASN1_INTEGER_free($) ;
sub ASN1_INTEGER_get($) ;
sub ASN1_INTEGER_new() ;
sub ASN1_INTEGER_set($$) ;
sub ASN1_TIME_free($) ;
sub ASN1_TIME_new() ;
sub ASN1_TIME_set($$) ;
sub ASN1_TIME_timet($) ;
sub BIO_eof($) ;
sub BIO_f_ssl() ;
sub BIO_free($) ;
sub BIO_new($) ;
sub BIO_new_buffer_ssl_connect($) ;
sub BIO_new_file($$) ;
sub BIO_new_ssl($$) ;
sub BIO_new_ssl_connect($) ;
sub BIO_pending($) ;
sub BIO_read($;$) ;
sub BIO_s_mem() ;
sub BIO_ssl_copy_session_id($$) ;
sub BIO_ssl_shutdown($) ;
sub BIO_wpending($) ;
sub BIO_write($$) ;
sub CIPHER_description($$$) ;
sub CIPHER_get_bits($;$) ;
sub CIPHER_get_name($) ;
sub CLONE(;@) ;
sub COMP_add_compression_method($$) ;
sub CTX_add_client_CA($$) ;
sub CTX_add_extra_chain_cert($$) ;
sub CTX_add_session($$) ;
sub CTX_callback_ctrl($$$) ;
sub CTX_check_private_key($) ;
sub CTX_ctrl($$$$) ;
sub CTX_flush_sessions($$) ;
sub CTX_free($) ;
sub CTX_get_app_data($) ;
sub CTX_get_cert_store($) ;
sub CTX_get_client_CA_list($) ;
sub CTX_get_ex_data($$) ;
sub CTX_get_ex_new_index($$$$$) ;
sub CTX_get_mode($) ;
sub CTX_get_options($) ;
sub CTX_get_quiet_shutdown($) ;
sub CTX_get_read_ahead($) ;
sub CTX_get_session_cache_mode($) ;
sub CTX_get_timeout($) ;
sub CTX_get_verify_depth($) ;
sub CTX_get_verify_mode($) ;
sub CTX_load_verify_locations($$$) ;
sub CTX_need_tmp_RSA($) ;
sub CTX_new() ;
sub CTX_new_with_method($) ;
sub CTX_remove_session($$) ;
sub CTX_sess_accept($) ;
sub CTX_sess_accept_good($) ;
sub CTX_sess_accept_renegotiate($) ;
sub CTX_sess_cache_full($) ;
sub CTX_sess_cb_hits($) ;
sub CTX_sess_connect($) ;
sub CTX_sess_connect_good($) ;
sub CTX_sess_connect_renegotiate($) ;
sub CTX_sess_get_cache_size($) ;
sub CTX_sess_hits($) ;
sub CTX_sess_misses($) ;
sub CTX_sess_number($) ;
sub CTX_sess_set_cache_size($$) ;
sub CTX_sess_timeouts($) ;
sub CTX_sessions($) ;
sub CTX_set1_param($$) ;
sub CTX_set_alpn_protos($;$) ;
sub CTX_set_alpn_select_cb($$;$) ;
sub CTX_set_app_data($$) ;
sub CTX_set_cert_store($$) ;
sub CTX_set_cert_verify_callback($$;$) ;
sub CTX_set_cipher_list($$) ;
sub CTX_set_client_CA_list($$) ;
sub CTX_set_default_passwd_cb($;$) ;
sub CTX_set_default_passwd_cb_userdata($;$) ;
sub CTX_set_default_verify_paths($) ;
sub CTX_set_ex_data($$$) ;
sub CTX_set_info_callback($$;$) ;
sub CTX_set_mode($$) ;
sub CTX_set_next_proto_select_cb($$;$) ;
sub CTX_set_next_protos_advertised_cb($$;$) ;
sub CTX_set_options($$) ;
sub CTX_set_purpose($$) ;
sub CTX_set_quiet_shutdown($$) ;
sub CTX_set_read_ahead($$) ;
sub CTX_set_session_cache_mode($$) ;
sub CTX_set_session_id_context($$$) ;
sub CTX_set_ssl_version($$) ;
sub CTX_set_timeout($$) ;
sub CTX_set_tlsext_servername_callback($;$$) ;
sub CTX_set_tlsext_status_cb($$;$) ;
sub CTX_set_tlsext_ticket_getkey_cb($;$$) ;
sub CTX_set_tmp_dh($$) ;
sub CTX_set_tmp_dh_callback($$) ;
sub CTX_set_tmp_ecdh($$) ;
sub CTX_set_tmp_rsa($$) ;
sub CTX_set_tmp_rsa_callback($$) ;
sub CTX_set_trust($$) ;
sub CTX_set_verify($$;$) ;
sub CTX_set_verify_depth($$) ;
sub CTX_tlsv1_1_new() ;
sub CTX_tlsv1_2_new() ;
sub CTX_tlsv1_new() ;
sub CTX_use_PKCS12_file($$;$) ;
sub CTX_use_PrivateKey($$) ;
sub CTX_use_PrivateKey_file($$$) ;
sub CTX_use_RSAPrivateKey($$) ;
sub CTX_use_RSAPrivateKey_file($$$) ;
sub CTX_use_certificate($$) ;
sub CTX_use_certificate_chain_file($$) ;
sub CTX_use_certificate_file($$$) ;
sub CTX_v23_new() ;
sub CTX_v3_new() ;
sub DH_free($) ;
sub EC_KEY_free($) ;
sub EC_KEY_generate_key($) ;
sub EC_KEY_new_by_curve_name($) ;
sub ENGINE_by_id($) ;
sub ENGINE_load_builtin_engines() ;
sub ENGINE_register_all_complete() ;
sub ENGINE_set_default($$) ;
sub ERR_clear_error() ;
sub ERR_error_string($;$) ;
sub ERR_get_error() ;
sub ERR_load_RAND_strings() ;
sub ERR_load_SSL_strings() ;
sub ERR_load_crypto_strings() ;
sub ERR_peek_error() ;
sub ERR_put_error($$$$$) ;
sub EVP_Digest(;@) ;
sub EVP_DigestFinal($) ;
sub EVP_DigestFinal_ex($) ;
sub EVP_DigestInit($$) ;
sub EVP_DigestInit_ex($$$) ;
sub EVP_DigestUpdate($$) ;
sub EVP_MD_CTX_create() ;
sub EVP_MD_CTX_destroy($) ;
sub EVP_MD_CTX_md($) ;
sub EVP_MD_size($) ;
sub EVP_MD_type($) ;
sub EVP_PKEY_assign_EC_KEY($$) ;
sub EVP_PKEY_assign_RSA($$) ;
sub EVP_PKEY_bits($) ;
sub EVP_PKEY_copy_parameters($$) ;
sub EVP_PKEY_free($) ;
sub EVP_PKEY_id($) ;
sub EVP_PKEY_new() ;
sub EVP_PKEY_size($) ;
sub EVP_add_digest($) ;
sub EVP_get_cipherbyname($) ;
sub EVP_get_digestbyname($) ;
sub EVP_sha1() ;
sub EVP_sha256() ;
sub EVP_sha512() ;
sub FIPS_mode_set($) ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MD4($) ;
sub MD5($) ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub OBJ_cmp($$) ;
sub OBJ_dup($) ;
sub OBJ_ln2nid($) ;
sub OBJ_nid2ln($) ;
sub OBJ_nid2obj($) ;
sub OBJ_nid2sn($) ;
sub OBJ_obj2nid($) ;
sub OBJ_obj2txt($;$) ;
sub OBJ_sn2nid($) ;
sub OBJ_txt2nid($) ;
sub OBJ_txt2obj($;$) ;
sub OCSP_REQUEST_free($) ;
sub OCSP_RESPONSE_free($) ;
sub OCSP_cert2ids($;@) ;
sub OCSP_ids2req(;@) ;
sub OCSP_response_results($;@) ;
sub OCSP_response_status($) ;
sub OCSP_response_status_str($) ;
sub OCSP_response_verify($$;$$) ;
sub OPENSSL_add_all_algorithms_conf() ;
sub OPENSSL_add_all_algorithms_noconf() ;
sub OpenSSL_add_all_algorithms() ;
sub OpenSSL_add_all_digests() ;
sub OpenSSL_add_ssl_algorithms() ;
sub PEM_get_string_PrivateKey($;$$) ;
sub PEM_get_string_X509($) ;
sub PEM_get_string_X509_CRL($) ;
sub PEM_get_string_X509_REQ($) ;
sub PEM_read_bio_DHparams($;$$$) ;
sub PEM_read_bio_PrivateKey($;$$) ;
sub PEM_read_bio_X509($;$$$) ;
sub PEM_read_bio_X509_CRL($;$$$) ;
sub PEM_read_bio_X509_REQ($;$$$) ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub P_ASN1_INTEGER_get_dec($) ;
sub P_ASN1_INTEGER_get_hex($) ;
sub P_ASN1_INTEGER_set_dec($$) ;
sub P_ASN1_INTEGER_set_hex($$) ;
sub P_ASN1_STRING_get($;$) ;
sub P_ASN1_TIME_get_isotime($) ;
sub P_ASN1_TIME_put2string($) ;
sub P_ASN1_TIME_set_isotime($$) ;
sub P_ASN1_UTCTIME_put2string($) ;
sub P_EVP_MD_list_all() ;
sub P_PKCS12_load_file($;$$) ;
sub P_X509_CRL_add_revoked_serial_hex($$$;$$) ;
sub P_X509_CRL_get_serial($) ;
sub P_X509_CRL_set_serial($$) ;
sub P_X509_REQ_add_extensions($;@) ;
sub P_X509_REQ_get_attr($$) ;
sub P_X509_add_extensions($$;@) ;
sub P_X509_copy_extensions($$;$) ;
sub P_X509_get_crl_distribution_points($) ;
sub P_X509_get_ext_key_usage($;$) ;
sub P_X509_get_key_usage($) ;
sub P_X509_get_netscape_cert_type($) ;
sub P_X509_get_ocsp_uri($) ;
sub P_X509_get_pubkey_alg($) ;
sub P_X509_get_signature_alg($) ;
sub P_alpn_selected($) ;
sub P_next_proto_last_status($) ;
sub P_next_proto_negotiated($) ;
sub RAND_add($$$) ;
sub RAND_bytes($$) ;
sub RAND_cleanup() ;
sub RAND_file_name($) ;
sub RAND_load_file($$) ;
sub RAND_poll() ;
sub RAND_pseudo_bytes($$) ;
sub RAND_seed($) ;
sub RAND_status() ;
sub RAND_write_file($) ;
sub RIPEMD160($) ;
sub RSA_free($) ;
sub RSA_generate_key($$;$$) ;
sub RSA_get_key_parameters($) ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SESSION_free($) ;
sub SESSION_get_app_data($) ;
sub SESSION_get_ex_data($$) ;
sub SESSION_get_ex_new_index($$$$$) ;
sub SESSION_get_master_key($) ;
sub SESSION_get_time($) ;
sub SESSION_get_timeout($) ;
sub SESSION_new() ;
sub SESSION_print($$) ;
sub SESSION_print_fp($$) ;
sub SESSION_set_app_data($$) ;
sub SESSION_set_ex_data($$$) ;
sub SESSION_set_master_key($$) ;
sub SESSION_set_time($$) ;
sub SESSION_set_timeout($$) ;
sub SHA1($) ;
sub SHA256($) ;
sub SHA512($) ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub SSL_get0_session($) ;
sub SSLeay() ;
sub SSLeay_add_ssl_algorithms() ;
sub SSLeay_version(;$) ;
sub TLSv1_1_method() ;
sub TLSv1_2_method() ;
sub TLSv1_method() ;
sub UIO_MAXIOV() ;
sub X509V3_EXT_d2i($) ;
sub X509V3_EXT_print($;$$) ;
sub X509_CRL_digest($$) ;
sub X509_CRL_free($) ;
sub X509_CRL_get_ext($$) ;
sub X509_CRL_get_ext_by_NID($$;$) ;
sub X509_CRL_get_ext_count($) ;
sub X509_CRL_get_issuer($) ;
sub X509_CRL_get_lastUpdate($) ;
sub X509_CRL_get_nextUpdate($) ;
sub X509_CRL_get_version($) ;
sub X509_CRL_new() ;
sub X509_CRL_set_issuer_name($$) ;
sub X509_CRL_set_lastUpdate($$) ;
sub X509_CRL_set_nextUpdate($$) ;
sub X509_CRL_set_version($$) ;
sub X509_CRL_sign($$$) ;
sub X509_CRL_sort($) ;
sub X509_CRL_verify($$) ;
sub X509_EXTENSION_get_critical($) ;
sub X509_EXTENSION_get_data($) ;
sub X509_EXTENSION_get_object($) ;
sub X509_NAME_ENTRY_get_data($) ;
sub X509_NAME_ENTRY_get_object($) ;
sub X509_NAME_add_entry_by_NID($$$$;$$) ;
sub X509_NAME_add_entry_by_OBJ($$$$;$$) ;
sub X509_NAME_add_entry_by_txt($$$$;$$) ;
sub X509_NAME_cmp($$) ;
sub X509_NAME_digest($$) ;
sub X509_NAME_entry_count($) ;
sub X509_NAME_get_entry($$) ;
sub X509_NAME_get_text_by_NID($$) ;
sub X509_NAME_hash($) ;
sub X509_NAME_new() ;
sub X509_NAME_oneline($) ;
sub X509_NAME_print_ex($;$$) ;
sub X509_REQ_add1_attr_by_NID($$$$) ;
sub X509_REQ_digest($$) ;
sub X509_REQ_free($) ;
sub X509_REQ_get_attr_by_NID($$;$) ;
sub X509_REQ_get_attr_by_OBJ($$;$) ;
sub X509_REQ_get_attr_count($) ;
sub X509_REQ_get_pubkey($) ;
sub X509_REQ_get_subject_name($) ;
sub X509_REQ_get_version($) ;
sub X509_REQ_new() ;
sub X509_REQ_set_pubkey($$) ;
sub X509_REQ_set_subject_name($$) ;
sub X509_REQ_set_version($$) ;
sub X509_REQ_sign($$$) ;
sub X509_REQ_verify($$) ;
sub X509_STORE_CTX_get_current_cert($) ;
sub X509_STORE_CTX_get_error($) ;
sub X509_STORE_CTX_get_error_depth($) ;
sub X509_STORE_CTX_get_ex_data($$) ;
sub X509_STORE_CTX_set_cert($$) ;
sub X509_STORE_CTX_set_error($$) ;
sub X509_STORE_CTX_set_ex_data($$$) ;
sub X509_STORE_add_cert($$) ;
sub X509_STORE_add_crl($$) ;
sub X509_STORE_set1_param($$) ;
sub X509_STORE_set_flags($$) ;
sub X509_STORE_set_purpose($$) ;
sub X509_STORE_set_trust($$) ;
sub X509_VERIFY_PARAM_add0_policy($$) ;
sub X509_VERIFY_PARAM_add0_table($) ;
sub X509_VERIFY_PARAM_clear_flags($$) ;
sub X509_VERIFY_PARAM_free($) ;
sub X509_VERIFY_PARAM_get_depth($) ;
sub X509_VERIFY_PARAM_get_flags($) ;
sub X509_VERIFY_PARAM_inherit($$) ;
sub X509_VERIFY_PARAM_lookup($) ;
sub X509_VERIFY_PARAM_new() ;
sub X509_VERIFY_PARAM_set1($$) ;
sub X509_VERIFY_PARAM_set1_name($$) ;
sub X509_VERIFY_PARAM_set1_policies($$) ;
sub X509_VERIFY_PARAM_set_depth($$) ;
sub X509_VERIFY_PARAM_set_flags($$) ;
sub X509_VERIFY_PARAM_set_purpose($$) ;
sub X509_VERIFY_PARAM_set_time($$) ;
sub X509_VERIFY_PARAM_set_trust($$) ;
sub X509_VERIFY_PARAM_table_cleanup() ;
sub X509_certificate_type($;$) ;
sub X509_check_email($$;$) ;
sub X509_check_host($$;$$) ;
sub X509_check_ip($$;$) ;
sub X509_check_ip_asc($$;$) ;
sub X509_digest($$) ;
sub X509_free($) ;
sub X509_get_X509_PUBKEY($) ;
sub X509_get_ext($$) ;
sub X509_get_ext_by_NID($$;$) ;
sub X509_get_ext_count($) ;
sub X509_get_fingerprint($$) ;
sub X509_get_issuer_name($) ;
sub X509_get_notAfter($) ;
sub X509_get_notBefore($) ;
sub X509_get_pubkey($) ;
sub X509_get_serialNumber($) ;
sub X509_get_subjectAltNames($) ;
sub X509_get_subject_name($) ;
sub X509_get_version($) ;
sub X509_gmtime_adj($$) ;
sub X509_issuer_and_serial_hash($) ;
sub X509_issuer_name_hash($) ;
sub X509_load_cert_crl_file($$$) ;
sub X509_load_cert_file($$$) ;
sub X509_load_crl_file($$$) ;
sub X509_new() ;
sub X509_policy_level_get0_node($$) ;
sub X509_policy_level_node_count($) ;
sub X509_policy_node_get0_parent($) ;
sub X509_policy_node_get0_policy($) ;
sub X509_policy_node_get0_qualifiers($) ;
sub X509_policy_tree_free($) ;
sub X509_policy_tree_get0_level($$) ;
sub X509_policy_tree_get0_policies($) ;
sub X509_policy_tree_get0_user_policies($) ;
sub X509_policy_tree_level_count($) ;
sub X509_pubkey_digest($$) ;
sub X509_set_issuer_name($$) ;
sub X509_set_pubkey($$) ;
sub X509_set_serialNumber($$) ;
sub X509_set_subject_name($$) ;
sub X509_set_version($$) ;
sub X509_sign($$$) ;
sub X509_subject_name_hash($) ;
sub X509_verify($$) ;
sub X509_verify_cert_error_string($) ;
sub accept($) ;
sub add_client_CA($$) ;
sub add_file_cert_subjects_to_stack($$) ;
sub add_ssl_algorithms() ;
sub alert_desc_string($) ;
sub alert_desc_string_long($) ;
sub alert_type_string($) ;
sub alert_type_string_long($) ;
sub callback_ctrl($$$) ;
sub check_private_key($) ;
sub clear($) ;
sub clear_num_renegotiations($) ;
sub connect($) ;
sub constant($) ;
sub copy_session_id($$) ;
sub ctrl($$$$) ;
sub d2i_OCSP_REQUEST($) ;
sub d2i_OCSP_RESPONSE($) ;
sub d2i_SSL_SESSION($$$) ;
sub d2i_X509_CRL_bio($;$) ;
sub d2i_X509_REQ_bio($;$) ;
sub d2i_X509_bio($;$) ;
sub debug_read;
sub do_handshake($) ;
sub do_https2;
sub do_https3;
sub do_https4;
sub do_https;
sub do_httpx2;
sub do_httpx3;
sub do_httpx4;
sub dump_peer_certificate($) ;
sub dup($) ;
sub export_keying_material($$$$) ;
sub free($) ;
sub get1_session($) ;
sub get_SSL_CTX($) ;
sub get_app_data($) ;
sub get_certificate($) ;
sub get_cipher($) ;
sub get_cipher_bits($;$) ;
sub get_cipher_list($$) ;
sub get_client_CA_list($) ;
sub get_client_random($) ;
sub get_current_cipher($) ;
sub get_default_timeout($) ;
sub get_error($$) ;
sub get_ex_data($$) ;
sub get_ex_new_index($$$$$) ;
sub get_fd($) ;
sub get_finished($$$) ;
sub get_http3;
sub get_http4;
sub get_http;
sub get_https3;
sub get_https4;
sub get_https;
sub get_httpx3;
sub get_httpx4;
sub get_httpx;
sub get_keyblock_size($) ;
sub get_mode($) ;
sub get_options($) ;
sub get_peer_cert_chain($) ;
sub get_peer_certificate($) ;
sub get_peer_finished($$$) ;
sub get_quiet_shutdown($) ;
sub get_rbio($) ;
sub get_read_ahead($) ;
sub get_server_random($) ;
sub get_servername($;$) ;
sub get_servername_type($) ;
sub get_session($) ;
sub get_shared_ciphers($;$$) ;
sub get_shutdown($) ;
sub get_ssl_method($) ;
sub get_state($) ;
sub get_time($) ;
sub get_timeout($) ;
sub get_verify_depth($) ;
sub get_verify_mode($) ;
sub get_verify_result($) ;
sub get_wbio($) ;
sub head_http3;
sub head_http4;
sub head_http;
sub head_https3;
sub head_https4;
sub head_https;
sub head_httpx3;
sub head_httpx4;
sub head_httpx;
sub hello() ;
sub http_cat;
sub https_cat;
sub httpx_cat;
sub i2d_OCSP_REQUEST($) ;
sub i2d_OCSP_RESPONSE($) ;
sub i2d_SSL_SESSION($$) ;
sub inet_aton;
sub inet_ntoa;
sub initialize;
sub library_init() ;
sub load_client_CA_file($) ;
sub load_error_strings() ;
sub make_form;
sub make_headers;
sub need_tmp_RSA($) ;
sub new($) ;
sub new_x_ctx;
sub num_renegotiations($) ;
sub open_proxy_tcp_connection;
sub open_tcp_connection;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub peek($;$) ;
sub pending($) ;
sub post_http3;
sub post_http4;
sub post_http;
sub post_https3;
sub post_https4;
sub post_https;
sub post_httpx3;
sub post_httpx4;
sub post_httpx;
sub put_http3;
sub put_http4;
sub put_http;
sub put_https3;
sub put_https4;
sub put_https;
sub put_httpx3;
sub put_httpx4;
sub put_httpx;
sub randomize(;$$$) ;
sub read($;$) ;
sub renegotiate($) ;
sub rstate_string($) ;
sub rstate_string_long($) ;
sub session_reused($) ;
sub set1_param($$) ;
sub set_SSL_CTX($$) ;
sub set_accept_state($) ;
sub set_alpn_protos($;$) ;
sub set_app_data($$) ;
sub set_bio($$$) ;
sub set_cert_and_key($$$) ;
sub set_cipher_list($$) ;
sub set_client_CA_list($$) ;
sub set_connect_state($) ;
sub set_ex_data($$$) ;
sub set_fd($$) ;
sub set_info_callback($$;$) ;
sub set_mode($$) ;
sub set_options($$) ;
sub set_pref_cipher($$) ;
sub set_proxy($$;**) ;
sub set_purpose($$) ;
sub set_quiet_shutdown($$) ;
sub set_read_ahead($;$) ;
sub set_rfd($$) ;
sub set_server_cert_and_key($$$) ;
sub set_session($$) ;
sub set_session_id_context($$$) ;
sub set_session_secret_cb($;$$) ;
sub set_shutdown($$) ;
sub set_ssl_method($$) ;
sub set_state($$) ;
sub set_time($$) ;
sub set_timeout($$) ;
sub set_tlsext_host_name($$) ;
sub set_tlsext_status_type($$) ;
sub set_tmp_dh($$) ;
sub set_tmp_dh_callback($$) ;
sub set_tmp_rsa($$) ;
sub set_tmp_rsa_callback($$) ;
sub set_trust($$) ;
sub set_verify($$$) ;
sub set_verify_depth($$) ;
sub set_verify_result($$) ;
sub set_wfd($$) ;
sub shutdown($) ;
sub sk_X509_NAME_free($) ;
sub sk_X509_NAME_num($) ;
sub sk_X509_NAME_value($$) ;
sub sockaddr_family;
sub ssl_read_CRLF($;$) ;
sub ssl_read_all;
sub ssl_read_until($;$$) ;
sub ssl_write_CRLF($$) ;
sub ssl_write_all;
sub sslcat;
sub state($) ;
sub state_string($) ;
sub state_string_long($) ;
sub tcp_read_CRLF;
sub tcp_read_all;
sub tcp_read_until;
sub tcp_write_CRLF;
sub tcp_write_all;
sub tcpcat;
sub tcpxcat;
sub total_renegotiations($) ;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub use_PrivateKey($$) ;
sub use_PrivateKey_ASN1($$$$) ;
sub use_PrivateKey_file($$$) ;
sub use_RSAPrivateKey($$) ;
sub use_RSAPrivateKey_ASN1($$$) ;
sub use_RSAPrivateKey_file($$$) ;
sub use_certificate($$) ;
sub use_certificate_ASN1($$$) ;
sub use_certificate_file($$$) ;
sub version($) ;
sub want($) ;
sub want_X509_lookup;
sub want_nothing;
sub want_read;
sub want_write;
sub write($$) ;
sub write_partial($$$$) ;
}
package ODBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Opcode {
sub _safe_call_sv($$$) ;
sub _safe_pkg_prep($) ;
sub define_optag($$) ;
sub deny($;@) ;
sub deny_only($;@) ;
sub empty_opset() ;
sub full_opset() ;
sub invert_opset($) ;
sub opcodes() ;
sub opdesc(;@) ;
sub opmask() ;
sub opmask_add($) ;
sub opset(;@) ;
sub opset_to_ops($;$) ;
sub permit($;@) ;
sub permit_only($;@) ;
sub verify_opset($;$) ;
}
package OpenGL {
sub __had_dbuffer_hack;
sub _have_freeglut;
sub _have_gl;
sub _have_glp;
sub _have_glu;
sub _have_glut;
sub _have_glx;
sub constant;
sub done_glutInit;
sub glAccum;
sub glAlphaFunc;
sub glAreTexturesResident_c;
sub glAreTexturesResident_p;
sub glAreTexturesResident_s;
sub glArrayElement;
sub glBegin;
sub glBindTexture;
sub glBitmap_c;
sub glBitmap_p;
sub glBitmap_s;
sub glBlendFunc;
sub glCallList;
sub glCallLists_c;
sub glCallLists_p;
sub glCallLists_s;
sub glClear;
sub glClearAccum;
sub glClearColor;
sub glClearDepth;
sub glClearIndex;
sub glClearStencil;
sub glClipPlane_c;
sub glClipPlane_p;
sub glClipPlane_s;
sub glColor3b;
sub glColor3bv_c;
sub glColor3bv_p;
sub glColor3bv_s;
sub glColor3d;
sub glColor3dv_c;
sub glColor3dv_p;
sub glColor3dv_s;
sub glColor3f;
sub glColor3fv_c;
sub glColor3fv_p;
sub glColor3fv_s;
sub glColor3i;
sub glColor3iv_c;
sub glColor3iv_p;
sub glColor3iv_s;
sub glColor3s;
sub glColor3sv_c;
sub glColor3sv_p;
sub glColor3sv_s;
sub glColor3ub;
sub glColor3ubv_c;
sub glColor3ubv_p;
sub glColor3ubv_s;
sub glColor3ui;
sub glColor3uiv_c;
sub glColor3uiv_p;
sub glColor3uiv_s;
sub glColor3us;
sub glColor3usv_c;
sub glColor3usv_p;
sub glColor3usv_s;
sub glColor4b;
sub glColor4bv_c;
sub glColor4bv_p;
sub glColor4bv_s;
sub glColor4d;
sub glColor4dv_c;
sub glColor4dv_p;
sub glColor4dv_s;
sub glColor4f;
sub glColor4fv_c;
sub glColor4fv_p;
sub glColor4fv_s;
sub glColor4i;
sub glColor4iv_c;
sub glColor4iv_p;
sub glColor4iv_s;
sub glColor4s;
sub glColor4sv_c;
sub glColor4sv_p;
sub glColor4sv_s;
sub glColor4ub;
sub glColor4ubv_c;
sub glColor4ubv_p;
sub glColor4ubv_s;
sub glColor4ui;
sub glColor4uiv_c;
sub glColor4uiv_p;
sub glColor4uiv_s;
sub glColor4us;
sub glColor4usv_c;
sub glColor4usv_p;
sub glColor4usv_s;
sub glColorMask;
sub glColorMaterial;
sub glColorPointerEXT_c;
sub glColorPointerEXT_p;
sub glColorPointerEXT_s;
sub glColorPointer_c;
sub glColorPointer_p;
sub glColorPointer_s;
sub glCopyPixels;
sub glCopyTexImage1D;
sub glCopyTexImage2D;
sub glCopyTexSubImage1D;
sub glCopyTexSubImage2D;
sub glCullFace;
sub glDeleteLists;
sub glDeleteTextures_c;
sub glDeleteTextures_p;
sub glDeleteTextures_s;
sub glDepthFunc;
sub glDepthMask;
sub glDepthRange;
sub glDisable;
sub glDisableClientState;
sub glDrawArrays;
sub glDrawBuffer;
sub glDrawElements_c;
sub glDrawElements_p;
sub glDrawElements_s;
sub glDrawPixels_c;
sub glDrawPixels_p;
sub glDrawPixels_s;
sub glEdgeFlag;
sub glEdgeFlagPointerEXT_c;
sub glEdgeFlagPointerEXT_p;
sub glEdgeFlagPointerEXT_s;
sub glEdgeFlagPointer_c;
sub glEdgeFlagPointer_p;
sub glEdgeFlagPointer_s;
sub glEnable;
sub glEnableClientState;
sub glEnd;
sub glEndList;
sub glEvalCoord1d;
sub glEvalCoord1f;
sub glEvalCoord2d;
sub glEvalCoord2f;
sub glEvalMesh1;
sub glEvalMesh2;
sub glEvalPoint1;
sub glEvalPoint2;
sub glFeedbackBuffer_c;
sub glFinish;
sub glFlush;
sub glFogf;
sub glFogfv_c;
sub glFogfv_p;
sub glFogfv_s;
sub glFogi;
sub glFogiv_c;
sub glFogiv_p;
sub glFogiv_s;
sub glFrontFace;
sub glFrustum;
sub glGenLists;
sub glGenTextures_c;
sub glGenTextures_p;
sub glGenTextures_s;
sub glGetBooleanv_c;
sub glGetBooleanv_p;
sub glGetBooleanv_s;
sub glGetClipPlane_c;
sub glGetClipPlane_p;
sub glGetClipPlane_s;
sub glGetDoublev_c;
sub glGetDoublev_p;
sub glGetDoublev_s;
sub glGetError;
sub glGetFloatv_c;
sub glGetFloatv_p;
sub glGetFloatv_s;
sub glGetIntegerv_c;
sub glGetIntegerv_p;
sub glGetIntegerv_s;
sub glGetLightfv_c;
sub glGetLightfv_p;
sub glGetLightfv_s;
sub glGetLightiv_c;
sub glGetLightiv_p;
sub glGetLightiv_s;
sub glGetMapdv_c;
sub glGetMapdv_p;
sub glGetMapdv_s;
sub glGetMapfv_c;
sub glGetMapfv_p;
sub glGetMapfv_s;
sub glGetMapiv_c;
sub glGetMapiv_p;
sub glGetMapiv_s;
sub glGetMaterialfv_c;
sub glGetMaterialfv_p;
sub glGetMaterialfv_s;
sub glGetMaterialiv_c;
sub glGetMaterialiv_p;
sub glGetMaterialiv_s;
sub glGetPixelMapfv_c;
sub glGetPixelMapfv_p;
sub glGetPixelMapfv_s;
sub glGetPixelMapuiv_c;
sub glGetPixelMapuiv_p;
sub glGetPixelMapuiv_s;
sub glGetPixelMapusv_c;
sub glGetPixelMapusv_p;
sub glGetPixelMapusv_s;
sub glGetPointerv_c;
sub glGetPointerv_p;
sub glGetPointerv_s;
sub glGetPolygonStipple_c;
sub glGetPolygonStipple_p;
sub glGetPolygonStipple_s;
sub glGetString;
sub glGetTexEnvfv_c;
sub glGetTexEnvfv_p;
sub glGetTexEnvfv_s;
sub glGetTexEnviv_c;
sub glGetTexEnviv_p;
sub glGetTexEnviv_s;
sub glGetTexGendv_c;
sub glGetTexGendv_p;
sub glGetTexGendv_s;
sub glGetTexGenfv_c;
sub glGetTexGenfv_p;
sub glGetTexGenfv_s;
sub glGetTexGeniv_c;
sub glGetTexGeniv_p;
sub glGetTexGeniv_s;
sub glGetTexImage_c;
sub glGetTexImage_p;
sub glGetTexImage_s;
sub glGetTexLevelParameterfv_c;
sub glGetTexLevelParameterfv_p;
sub glGetTexLevelParameterfv_s;
sub glGetTexLevelParameteriv_c;
sub glGetTexLevelParameteriv_p;
sub glGetTexLevelParameteriv_s;
sub glGetTexParameterfv_c;
sub glGetTexParameterfv_p;
sub glGetTexParameterfv_s;
sub glGetTexParameteriv_c;
sub glGetTexParameteriv_p;
sub glGetTexParameteriv_s;
sub glHint;
sub glIndexMask;
sub glIndexPointerEXT_c;
sub glIndexPointerEXT_p;
sub glIndexPointerEXT_s;
sub glIndexPointer_c;
sub glIndexPointer_p;
sub glIndexPointer_s;
sub glIndexd;
sub glIndexi;
sub glInitNames;
sub glInterleavedArrays_c;
sub glIsEnabled;
sub glIsList;
sub glIsTexture;
sub glLightModelf;
sub glLightModelfv_c;
sub glLightModelfv_p;
sub glLightModelfv_s;
sub glLightModeli;
sub glLightModeliv_c;
sub glLightModeliv_p;
sub glLightModeliv_s;
sub glLightf;
sub glLightfv_c;
sub glLightfv_p;
sub glLightfv_s;
sub glLighti;
sub glLightiv_c;
sub glLightiv_p;
sub glLightiv_s;
sub glLineStipple;
sub glLineWidth;
sub glListBase;
sub glLoadIdentity;
sub glLoadMatrixd_c;
sub glLoadMatrixd_p;
sub glLoadMatrixd_s;
sub glLoadMatrixf_c;
sub glLoadMatrixf_p;
sub glLoadMatrixf_s;
sub glLoadName;
sub glLogicOp;
sub glMap1d_c;
sub glMap1d_p;
sub glMap1d_s;
sub glMap1f_c;
sub glMap1f_p;
sub glMap1f_s;
sub glMap2d_c;
sub glMap2d_p;
sub glMap2d_s;
sub glMap2f_c;
sub glMap2f_p;
sub glMap2f_s;
sub glMapGrid1d;
sub glMapGrid1f;
sub glMapGrid2d;
sub glMapGrid2f;
sub glMaterialf;
sub glMaterialfv_c;
sub glMaterialfv_p;
sub glMaterialfv_s;
sub glMateriali;
sub glMaterialiv_c;
sub glMaterialiv_p;
sub glMaterialiv_s;
sub glMatrixMode;
sub glMultMatrixd_p;
sub glMultMatrixf_p;
sub glNewList;
sub glNormal3b;
sub glNormal3bv_c;
sub glNormal3bv_p;
sub glNormal3bv_s;
sub glNormal3d;
sub glNormal3dv_c;
sub glNormal3dv_p;
sub glNormal3dv_s;
sub glNormal3f;
sub glNormal3fv_c;
sub glNormal3fv_p;
sub glNormal3fv_s;
sub glNormal3i;
sub glNormal3iv_c;
sub glNormal3iv_p;
sub glNormal3iv_s;
sub glNormal3s;
sub glNormal3sv_c;
sub glNormal3sv_p;
sub glNormal3sv_s;
sub glNormalPointerEXT_c;
sub glNormalPointerEXT_p;
sub glNormalPointerEXT_s;
sub glNormalPointer_c;
sub glNormalPointer_p;
sub glNormalPointer_s;
sub glOrtho;
sub glPassThrough;
sub glPixelMapfv_c;
sub glPixelMapfv_p;
sub glPixelMapfv_s;
sub glPixelMapuiv_c;
sub glPixelMapuiv_p;
sub glPixelMapuiv_s;
sub glPixelMapusv_c;
sub glPixelMapusv_p;
sub glPixelMapusv_s;
sub glPixelStoref;
sub glPixelStorei;
sub glPixelTransferf;
sub glPixelTransferi;
sub glPixelZoom;
sub glPointSize;
sub glPolygonMode;
sub glPolygonOffset;
sub glPolygonStipple_c;
sub glPolygonStipple_p;
sub glPolygonStipple_s;
sub glPopAttrib;
sub glPopClientAttrib;
sub glPopMatrix;
sub glPopName;
sub glPrioritizeTextures_c;
sub glPrioritizeTextures_p;
sub glPrioritizeTextures_s;
sub glPushAttrib;
sub glPushClientAttrib;
sub glPushMatrix;
sub glPushName;
sub glRasterPos2d;
sub glRasterPos2dv_c;
sub glRasterPos2dv_p;
sub glRasterPos2dv_s;
sub glRasterPos2f;
sub glRasterPos2fv_c;
sub glRasterPos2fv_p;
sub glRasterPos2fv_s;
sub glRasterPos2i;
sub glRasterPos2iv_c;
sub glRasterPos2iv_p;
sub glRasterPos2iv_s;
sub glRasterPos2s;
sub glRasterPos2sv_c;
sub glRasterPos2sv_p;
sub glRasterPos2sv_s;
sub glRasterPos3d;
sub glRasterPos3dv_c;
sub glRasterPos3dv_p;
sub glRasterPos3dv_s;
sub glRasterPos3f;
sub glRasterPos3fv_c;
sub glRasterPos3fv_p;
sub glRasterPos3fv_s;
sub glRasterPos3i;
sub glRasterPos3iv_c;
sub glRasterPos3iv_p;
sub glRasterPos3iv_s;
sub glRasterPos3s;
sub glRasterPos3sv_c;
sub glRasterPos3sv_p;
sub glRasterPos3sv_s;
sub glRasterPos4d;
sub glRasterPos4dv_c;
sub glRasterPos4dv_p;
sub glRasterPos4dv_s;
sub glRasterPos4f;
sub glRasterPos4fv_c;
sub glRasterPos4fv_p;
sub glRasterPos4fv_s;
sub glRasterPos4i;
sub glRasterPos4iv_c;
sub glRasterPos4iv_p;
sub glRasterPos4iv_s;
sub glRasterPos4s;
sub glRasterPos4sv_c;
sub glRasterPos4sv_p;
sub glRasterPos4sv_s;
sub glReadBuffer;
sub glReadPixels_c;
sub glReadPixels_p;
sub glReadPixels_s;
sub glRectd;
sub glRectdv_c;
sub glRectdv_p;
sub glRectdv_s;
sub glRectf;
sub glRectfv_c;
sub glRectfv_p;
sub glRectfv_s;
sub glRecti;
sub glRectiv_c;
sub glRectiv_p;
sub glRectiv_s;
sub glRects;
sub glRectsv_c;
sub glRectsv_p;
sub glRectsv_s;
sub glRenderMode;
sub glRotated;
sub glRotatef;
sub glScaled;
sub glScalef;
sub glScissor;
sub glSelectBuffer_c;
sub glShadeModel;
sub glStencilFunc;
sub glStencilMask;
sub glStencilOp;
sub glTexCoord1d;
sub glTexCoord1dv_c;
sub glTexCoord1dv_p;
sub glTexCoord1dv_s;
sub glTexCoord1f;
sub glTexCoord1fv_c;
sub glTexCoord1fv_p;
sub glTexCoord1fv_s;
sub glTexCoord1i;
sub glTexCoord1iv_c;
sub glTexCoord1iv_p;
sub glTexCoord1iv_s;
sub glTexCoord1s;
sub glTexCoord1sv_c;
sub glTexCoord1sv_p;
sub glTexCoord1sv_s;
sub glTexCoord2d;
sub glTexCoord2dv_c;
sub glTexCoord2dv_p;
sub glTexCoord2dv_s;
sub glTexCoord2f;
sub glTexCoord2fv_c;
sub glTexCoord2fv_p;
sub glTexCoord2fv_s;
sub glTexCoord2i;
sub glTexCoord2iv_c;
sub glTexCoord2iv_p;
sub glTexCoord2iv_s;
sub glTexCoord2s;
sub glTexCoord2sv_c;
sub glTexCoord2sv_p;
sub glTexCoord2sv_s;
sub glTexCoord3d;
sub glTexCoord3dv_c;
sub glTexCoord3dv_p;
sub glTexCoord3dv_s;
sub glTexCoord3f;
sub glTexCoord3fv_c;
sub glTexCoord3fv_p;
sub glTexCoord3fv_s;
sub glTexCoord3i;
sub glTexCoord3iv_c;
sub glTexCoord3iv_p;
sub glTexCoord3iv_s;
sub glTexCoord3s;
sub glTexCoord3sv_c;
sub glTexCoord3sv_p;
sub glTexCoord3sv_s;
sub glTexCoord4d;
sub glTexCoord4dv_c;
sub glTexCoord4dv_p;
sub glTexCoord4dv_s;
sub glTexCoord4f;
sub glTexCoord4fv_c;
sub glTexCoord4fv_p;
sub glTexCoord4fv_s;
sub glTexCoord4i;
sub glTexCoord4iv_c;
sub glTexCoord4iv_p;
sub glTexCoord4iv_s;
sub glTexCoord4s;
sub glTexCoord4sv_c;
sub glTexCoord4sv_p;
sub glTexCoord4sv_s;
sub glTexCoordPointerEXT_c;
sub glTexCoordPointerEXT_p;
sub glTexCoordPointerEXT_s;
sub glTexCoordPointer_c;
sub glTexCoordPointer_p;
sub glTexCoordPointer_s;
sub glTexEnvf;
sub glTexEnvfv_p;
sub glTexEnvfv_s;
sub glTexEnvi;
sub glTexEnviv_p;
sub glTexEnviv_s;
sub glTexGend;
sub glTexGendv_c;
sub glTexGendv_p;
sub glTexGendv_s;
sub glTexGenf;
sub glTexGenfv_c;
sub glTexGenfv_p;
sub glTexGenfv_s;
sub glTexGeni;
sub glTexGeniv_c;
sub glTexGeniv_p;
sub glTexGeniv_s;
sub glTexImage1D_c;
sub glTexImage1D_p;
sub glTexImage1D_s;
sub glTexImage2D_c;
sub glTexImage2D_p;
sub glTexImage2D_s;
sub glTexParameterf;
sub glTexParameterfv_c;
sub glTexParameterfv_p;
sub glTexParameterfv_s;
sub glTexParameteri;
sub glTexParameteriv_c;
sub glTexParameteriv_p;
sub glTexParameteriv_s;
sub glTexSubImage1D_c;
sub glTexSubImage1D_p;
sub glTexSubImage1D_s;
sub glTexSubImage2D_c;
sub glTexSubImage2D_p;
sub glTexSubImage2D_s;
sub glTranslated;
sub glTranslatef;
sub glVertex2d;
sub glVertex2dv_c;
sub glVertex2dv_p;
sub glVertex2dv_s;
sub glVertex2f;
sub glVertex2fv_c;
sub glVertex2fv_p;
sub glVertex2fv_s;
sub glVertex2i;
sub glVertex2iv_c;
sub glVertex2iv_p;
sub glVertex2iv_s;
sub glVertex2s;
sub glVertex2sv_c;
sub glVertex2sv_p;
sub glVertex2sv_s;
sub glVertex3d;
sub glVertex3dv_c;
sub glVertex3dv_p;
sub glVertex3dv_s;
sub glVertex3f;
sub glVertex3fv_c;
sub glVertex3fv_p;
sub glVertex3fv_s;
sub glVertex3i;
sub glVertex3iv_c;
sub glVertex3iv_p;
sub glVertex3iv_s;
sub glVertex3s;
sub glVertex3sv_c;
sub glVertex3sv_p;
sub glVertex3sv_s;
sub glVertex4d;
sub glVertex4dv_c;
sub glVertex4dv_p;
sub glVertex4dv_s;
sub glVertex4f;
sub glVertex4fv_c;
sub glVertex4fv_p;
sub glVertex4fv_s;
sub glVertex4i;
sub glVertex4iv_c;
sub glVertex4iv_p;
sub glVertex4iv_s;
sub glVertex4s;
sub glVertex4sv_c;
sub glVertex4sv_p;
sub glVertex4sv_s;
sub glVertexPointerEXT_c;
sub glVertexPointerEXT_p;
sub glVertexPointerEXT_s;
sub glVertexPointer_c;
sub glVertexPointer_p;
sub glVertexPointer_s;
sub glViewport;
sub glpHasGLUT;
sub glpHasGPGPU;
sub glpReadTex;
sub glpSetDebug;
sub gluBeginCurve;
sub gluBeginPolygon;
sub gluBeginSurface;
sub gluBeginTrim;
sub gluBuild1DMipmaps_c;
sub gluBuild1DMipmaps_s;
sub gluBuild2DMipmaps_c;
sub gluBuild2DMipmaps_s;
sub gluCylinder;
sub gluDeleteNurbsRenderer;
sub gluDeleteQuadric;
sub gluDeleteTess;
sub gluDisk;
sub gluEndCurve;
sub gluEndPolygon;
sub gluEndSurface;
sub gluEndTrim;
sub gluErrorString;
sub gluGetNurbsProperty_p;
sub gluGetString;
sub gluGetTessProperty_p;
sub gluLoadSamplingMatrices_p;
sub gluLookAt;
sub gluNewNurbsRenderer;
sub gluNewQuadric;
sub gluNewTess;
sub gluNextContour;
sub gluNurbsCurve_c;
sub gluNurbsProperty;
sub gluNurbsSurface_c;
sub gluOrtho2D;
sub gluPartialDisk;
sub gluPerspective;
sub gluPickMatrix_p;
sub gluProject_p;
sub gluPwlCurve_c;
sub gluQuadricDrawStyle;
sub gluQuadricNormals;
sub gluQuadricOrientation;
sub gluQuadricTexture;
sub gluScaleImage_s;
sub gluSphere;
sub gluTessBeginContour;
sub gluTessBeginPolygon;
sub gluTessCallback;
sub gluTessEndContour;
sub gluTessEndPolygon;
sub gluTessNormal;
sub gluTessProperty;
sub gluTessVertex_p;
sub gluUnProject_p;
sub glutAddMenuEntry;
sub glutAddSubMenu;
sub glutAttachMenu;
sub glutBitmapCharacter;
sub glutBitmapHeight;
sub glutBitmapLength;
sub glutBitmapString;
sub glutBitmapWidth;
sub glutButtonBoxFunc;
sub glutChangeToMenuEntry;
sub glutChangeToSubMenu;
sub glutCloseFunc;
sub glutCopyColormap;
sub glutCreateMenu;
sub glutCreateSubWindow;
sub glutCreateWindow;
sub glutDestroyMenu;
sub glutDestroyWindow;
sub glutDetachMenu;
sub glutDeviceGet;
sub glutDialsFunc;
sub glutDisplayFunc;
sub glutEnterGameMode;
sub glutEntryFunc;
sub glutEstablishOverlay;
sub glutExtensionSupported;
sub glutForceJoystickFunc;
sub glutFullScreen;
sub glutGameModeGet;
sub glutGameModeString;
sub glutGet;
sub glutGetColor;
sub glutGetMenu;
sub glutGetModifiers;
sub glutGetWindow;
sub glutHideOverlay;
sub glutHideWindow;
sub glutIconifyWindow;
sub glutIdleFunc;
sub glutIgnoreKeyRepeat;
sub glutInit;
sub glutInitDisplayMode;
sub glutInitDisplayString;
sub glutInitWindowPosition;
sub glutInitWindowSize;
sub glutKeyboardFunc;
sub glutKeyboardUpFunc;
sub glutLayerGet;
sub glutLeaveGameMode;
sub glutLeaveMainLoop;
sub glutMainLoop;
sub glutMainLoopEvent;
sub glutMenuDestroyFunc;
sub glutMenuStateFunc;
sub glutMenuStatusFunc;
sub glutMotionFunc;
sub glutMouseFunc;
sub glutMouseWheelFunc;
sub glutOverlayDisplayFunc;
sub glutPassiveMotionFunc;
sub glutPopWindow;
sub glutPositionWindow;
sub glutPostOverlayRedisplay;
sub glutPostRedisplay;
sub glutPostWindowOverlayRedisplay;
sub glutPostWindowRedisplay;
sub glutPushWindow;
sub glutRemoveMenuItem;
sub glutRemoveOverlay;
sub glutReportErrors;
sub glutReshapeFunc;
sub glutReshapeWindow;
sub glutSetColor;
sub glutSetCursor;
sub glutSetIconTitle;
sub glutSetKeyRepeat;
sub glutSetMenu;
sub glutSetOption;
sub glutSetWindow;
sub glutSetWindowTitle;
sub glutShowOverlay;
sub glutShowWindow;
sub glutSolidCone;
sub glutSolidCube;
sub glutSolidCylinder;
sub glutSolidDodecahedron;
sub glutSolidIcosahedron;
sub glutSolidOctahedron;
sub glutSolidRhombicDodecahedron;
sub glutSolidSphere;
sub glutSolidTeapot;
sub glutSolidTetrahedron;
sub glutSolidTorus;
sub glutSpaceballButtonFunc;
sub glutSpaceballMotionFunc;
sub glutSpaceballRotateFunc;
sub glutSpecialFunc;
sub glutSpecialUpFunc;
sub glutStrokeCharacter;
sub glutStrokeHeight;
sub glutStrokeLength;
sub glutStrokeString;
sub glutStrokeWidth;
sub glutSwapBuffers;
sub glutTabletButtonFunc;
sub glutTabletMotionFunc;
sub glutTimerFunc;
sub glutUseLayer;
sub glutVisibilityFunc;
sub glutWarpPointer;
sub glutWindowStatusFunc;
sub glutWireCone;
sub glutWireCube;
sub glutWireCylinder;
sub glutWireDodecahedron;
sub glutWireIcosahedron;
sub glutWireOctahedron;
sub glutWireRhombicDodecahedron;
sub glutWireSphere;
sub glutWireTeapot;
sub glutWireTetrahedron;
sub glutWireTorus;
}
package OpenGL::Array {
sub DESTROY;
sub affine;
sub assign;
sub assign_data;
sub bind;
sub bound;
sub calc;
sub elements;
sub get_dimensions;
sub length;
sub new;
sub new_from_pointer;
sub new_list;
sub new_pointer;
sub new_scalar;
sub offset;
sub ptr;
sub retrieve;
sub retrieve_data;
sub update_pointer;
}
package OpenGL::Matrix {
sub column;
sub dot_product;
sub element;
sub invert;
sub new;
sub new_identity;
sub new_product;
sub rotate_x;
sub rotate_y;
sub rotate_z;
sub row;
sub scale;
sub set_frustrum;
sub set_lookat;
sub set_ortho;
sub set_perspective;
sub set_quaternion;
sub translate;
sub transpose;
}
package POSIX {
sub ARG_MAX() ;
sub B0() ;
sub B110() ;
sub B1200() ;
sub B134() ;
sub B150() ;
sub B1800() ;
sub B19200() ;
sub B200() ;
sub B2400() ;
sub B300() ;
sub B38400() ;
sub B4800() ;
sub B50() ;
sub B600() ;
sub B75() ;
sub B9600() ;
sub BRKINT() ;
sub BUS_ADRALN() ;
sub BUS_ADRERR() ;
sub BUS_OBJERR() ;
sub CHILD_MAX() ;
sub CLD_CONTINUED() ;
sub CLD_DUMPED() ;
sub CLD_EXITED() ;
sub CLD_KILLED() ;
sub CLD_STOPPED() ;
sub CLD_TRAPPED() ;
sub CLOCAL() ;
sub CREAD() ;
sub CS5() ;
sub CS6() ;
sub CS7() ;
sub CS8() ;
sub CSIZE() ;
sub CSTOPB() ;
sub EAI_OVERFLOW() ;
sub EAI_SYSTEM() ;
sub EBADMSG() ;
sub ECHO() ;
sub ECHOE() ;
sub ECHOK() ;
sub ECHONL() ;
sub EHOSTDOWN() ;
sub EIDRM() ;
sub ENODATA() ;
sub ENOLINK() ;
sub ENOMSG() ;
sub ENOSR() ;
sub ENOSTR() ;
sub ENOTBLK() ;
sub ENOTRECOVERABLE() ;
sub EOTHER() ;
sub ERESTART() ;
sub ETIME() ;
sub ETXTBSY() ;
sub FD_CLOEXEC() ;
sub FPE_FLTDIV() ;
sub FPE_FLTINV() ;
sub FPE_FLTOVF() ;
sub FPE_FLTRES() ;
sub FPE_FLTSUB() ;
sub FPE_FLTUND() ;
sub FPE_INTDIV() ;
sub FPE_INTOVF() ;
sub F_DUPFD() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_RDLCK() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLKW() ;
sub F_UNLCK() ;
sub F_WRLCK() ;
sub HUPCL() ;
sub ICANON() ;
sub ICRNL() ;
sub IEXTEN() ;
sub IGNBRK() ;
sub IGNCR() ;
sub IGNPAR() ;
sub ILL_BADSTK() ;
sub ILL_COPROC() ;
sub ILL_ILLADR() ;
sub ILL_ILLOPC() ;
sub ILL_ILLOPN() ;
sub ILL_ILLTRP() ;
sub ILL_PRVOPC() ;
sub ILL_PRVREG() ;
sub INLCR() ;
sub INPCK() ;
sub ISIG() ;
sub ISTRIP() ;
sub IXOFF() ;
sub IXON() ;
sub LC_MESSAGES() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_ctermid() ;
sub L_cuserid() ;
sub L_tmpname() ;
sub MAX_CANON() ;
sub MAX_INPUT() ;
sub MSG_CTRUNC() ;
sub MSG_EOR() ;
sub MSG_TRUNC() ;
sub NAME_MAX() ;
sub NCCS() ;
sub NDEBUG;
sub NGROUPS_MAX() ;
sub NOFLSH() ;
sub OPEN_MAX() ;
sub OPOST() ;
sub O_NOCTTY() ;
sub O_NONBLOCK() ;
sub PARENB() ;
sub PARMRK() ;
sub PARODD() ;
sub PIPE_BUF() ;
sub POLL_ERR() ;
sub POLL_HUP() ;
sub POLL_IN() ;
sub POLL_MSG() ;
sub POLL_OUT() ;
sub POLL_PRI() ;
sub SA_NOCLDSTOP() ;
sub SA_NOCLDWAIT() ;
sub SA_NODEFER() ;
sub SA_ONSTACK() ;
sub SA_RESETHAND() ;
sub SA_RESTART() ;
sub SA_SIGINFO() ;
sub SEGV_ACCERR() ;
sub SEGV_MAPERR() ;
sub SIGALRM() ;
sub SIGBUS() ;
sub SIGCHLD() ;
sub SIGCONT() ;
sub SIGHUP() ;
sub SIGKILL() ;
sub SIGPIPE() ;
sub SIGPOLL() ;
sub SIGPROF() ;
sub SIGQUIT() ;
sub SIGRTMAX() ;
sub SIGRTMIN() ;
sub SIGSTOP() ;
sub SIGSYS() ;
sub SIGTRAP() ;
sub SIGTSTP() ;
sub SIGTTIN() ;
sub SIGTTOU() ;
sub SIGURG() ;
sub SIGUSR1() ;
sub SIGUSR2() ;
sub SIGVTALRM() ;
sub SIGXCPU() ;
sub SIGXFSZ() ;
sub SIG_BLOCK() ;
sub SIG_SETMASK() ;
sub SIG_UNBLOCK() ;
sub SI_ASYNCIO() ;
sub SI_MESGQ() ;
sub SI_QUEUE() ;
sub SI_TIMER() ;
sub SI_USER() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TCIFLUSH() ;
sub TCIOFF() ;
sub TCIOFLUSH() ;
sub TCION() ;
sub TCOFLUSH() ;
sub TCOOFF() ;
sub TCOON() ;
sub TCSADRAIN() ;
sub TCSAFLUSH() ;
sub TCSANOW() ;
sub TOSTOP() ;
sub TRAP_BRKPT() ;
sub TRAP_TRACE() ;
sub TZNAME_MAX() ;
sub VEOF() ;
sub VEOL() ;
sub VERASE() ;
sub VINTR() ;
sub VKILL() ;
sub VMIN() ;
sub VQUIT() ;
sub VSTART() ;
sub VSTOP() ;
sub VSUSP() ;
sub VTIME() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub WUNTRACED() ;
sub _PC_CHOWN_RESTRICTED() ;
sub _PC_LINK_MAX() ;
sub _PC_MAX_CANON() ;
sub _PC_MAX_INPUT() ;
sub _PC_NAME_MAX() ;
sub _PC_NO_TRUNC() ;
sub _PC_PATH_MAX() ;
sub _PC_PIPE_BUF() ;
sub _PC_VDISABLE() ;
sub _SC_ARG_MAX() ;
sub _SC_CHILD_MAX() ;
sub _SC_CLK_TCK() ;
sub _SC_JOB_CONTROL() ;
sub _SC_NGROUPS_MAX() ;
sub _SC_OPEN_MAX() ;
sub _SC_PAGESIZE() ;
sub _SC_SAVED_IDS() ;
sub _SC_STREAM_MAX() ;
sub _SC_TZNAME_MAX() ;
sub _SC_VERSION() ;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub acosh;
sub alarm;
sub asctime;
sub asin;
sub asinh;
sub assert;
sub atan2;
sub atan;
sub atanh;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub cbrt;
sub ceil;
sub cfgetispeed;
sub cfgetospeed;
sub cfsetispeed;
sub cfsetospeed;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub copysign;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub erf;
sub erfc;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp2;
sub exp;
sub expm1;
sub fabs;
sub fclose;
sub fcntl;
sub fdim;
sub fdopen;
sub fegetround;
sub feof;
sub ferror;
sub fesetround;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fma;
sub fmax;
sub fmin;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fpclassify;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpayload;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub hypot;
sub ilogb;
sub isalnum;
sub isalpha;
sub isatty;
sub iscntrl;
sub isdigit;
sub isfinite;
sub isgraph;
sub isgreater;
sub isgreaterequal;
sub isinf;
sub isless;
sub islessequal;
sub islessgreater;
sub islower;
sub isnan;
sub isnormal;
sub isprint;
sub ispunct;
sub issignaling;
sub isspace;
sub isunordered;
sub isupper;
sub isxdigit;
sub j0;
sub j1;
sub jn;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub lgamma;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log1p;
sub log2;
sub log;
sub logb;
sub longjmp;
sub lrint;
sub lround;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nan;
sub nearbyint;
sub nextafter;
sub nexttoward;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub pipe;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub remainder;
sub remove;
sub remquo;
sub rename;
sub rewind;
sub rewinddir;
sub rint;
sub rmdir;
sub round;
sub scalbn;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpayload;
sub setpayloadsig;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signal;
sub signbit;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub stderr;
sub stdin;
sub stdout;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetattr;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetattr;
sub tcsetpgrp;
sub tgamma;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub tolower;
sub toupper;
sub trunc;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unlink;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wcstombs;
sub wctomb;
sub write;
sub y0;
sub y1;
sub yn;
}
package POSIX::SigSet {
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package Package::DeprecationManager {
sub _HASH0($) ;
sub any(&@) ;
sub subname;
}
package Package::Stash {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Package::Stash::XS {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Params::Util {
sub _ARRAY($) ;
sub _ARRAY0($) ;
sub _ARRAYLIKE($) ;
sub _CODE($) ;
sub _CODELIKE($) ;
sub _HASH($) ;
sub _HASH0($) ;
sub _HASHLIKE($) ;
sub _INSTANCE($$) ;
sub _NUMBER($) ;
sub _REGEX($) ;
sub _SCALAR($) ;
sub _SCALAR0($) ;
sub _STRING($) ;
sub looks_like_number($) ;
}
package Params::ValidationCompiler::Compiler {
sub blessed($) ;
sub looks_like_number($) ;
sub pairkeys(@) ;
sub pairvalues(@) ;
sub perlstring;
sub reftype($) ;
sub set_subname;
}
package Parse::Binary {
sub FORMAT() ;
sub PROPERTIES() ;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package PerlIO::Layers {
sub _get_kinds;
sub get_buffer_sizes;
sub max(@) ;
sub reduce(&@) ;
}
package Regexp {
sub DESTROY() ;
}
package SDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub sdbm_clearerr;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isdual($) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub openhandle($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub tainted($) ;
sub unweaken($) ;
sub weaken($) ;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub AI_ADDRCONFIG() ;
sub AI_ALL() ;
sub AI_CANONIDN() ;
sub AI_IDN() ;
sub AI_IDN_ALLOW_UNASSIGNED() ;
sub AI_IDN_USE_STD3_ASCII_RULES() ;
sub AI_NUMERICSERV() ;
sub AI_V4MAPPED() ;
sub AUTOLOAD;
sub EAI_ADDRFAMILY() ;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub EAI_SYSTEM() ;
sub IOV_MAX() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub IPV6_MTU() ;
sub IPV6_MTU_DISCOVER() ;
sub IPV6_RECVERR() ;
sub IPV6_ROUTER_ALERT() ;
sub IP_BIND_ADDRESS_NO_PORT() ;
sub IP_FREEBIND() ;
sub IP_MTU() ;
sub IP_MTU_DISCOVER() ;
sub IP_MULTICAST_ALL() ;
sub IP_NODEFRAG() ;
sub IP_PMTUDISC_DO() ;
sub IP_PMTUDISC_DONT() ;
sub IP_PMTUDISC_PROBE() ;
sub IP_PMTUDISC_WANT() ;
sub IP_RECVERR() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub IP_TRANSPARENT() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub NI_IDN() ;
sub NI_IDN_ALLOW_UNASSIGNED() ;
sub NI_IDN_USE_STD3_ASCII_RULES() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SOCK_CLOEXEC() ;
sub SOCK_NONBLOCK() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_BINDTODEVICE() ;
sub SO_BSDCOMPAT() ;
sub SO_BUSY_POLL() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_LOCK_FILTER() ;
sub SO_MARK() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEEK_OFF() ;
sub SO_PEERCRED() ;
sub SO_PRIORITY() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_RCVBUFFORCE() ;
sub SO_REUSEPORT() ;
sub SO_RXQ_OVFL() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_SNDBUFFORCE() ;
sub SO_STATE() ;
sub SO_TIMESTAMP() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONGESTION() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_FASTOPEN() ;
sub TCP_INFO() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_KEEPCNT() ;
sub TCP_KEEPIDLE() ;
sub TCP_KEEPINTVL() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MAXSEG() ;
sub TCP_MD5SIG() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_QUICKACK() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Socket6 {
sub constant;
sub gai_strerror;
sub getaddrinfo;
sub gethostbyname2;
sub getipnodebyaddr;
sub getipnodebyname;
sub getnameinfo;
sub in6addr_any;
sub in6addr_loopback;
sub inet_ntop;
sub inet_pton;
sub pack_sockaddr_in6;
sub pack_sockaddr_in6_all;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in6_all;
}
package Specio::Constraint::Enum {
sub dclone($) ;
sub refaddr($) ;
}
package Specio::Constraint::Parameterized {
sub dclone($) ;
}
package Specio::Constraint::Role::CanType {
sub blessed($) ;
sub dclone($) ;
}
package Specio::Constraint::Role::Interface {
sub all(&@) ;
sub any(&@) ;
sub first(&@) ;
}
package Specio::Constraint::Role::IsaType {
sub dclone($) ;
}
package Specio::Constraint::Union {
sub all(&@) ;
sub any(&@) ;
sub dclone($) ;
}
package Specio::Exception {
sub blessed($) ;
}
package Specio::Helpers {
sub blessed($) ;
}
package Specio::OO {
sub all(&@) ;
sub blessed($) ;
sub dclone($) ;
sub perlstring;
sub weaken($) ;
}
package Specio::PartialDump {
sub blessed($) ;
sub looks_like_number($) ;
sub reftype($) ;
}
package Specio::TypeChecks {
sub blessed($) ;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($) ;
sub pstore($$) ;
}
package Sub::Identify {
sub get_code_info($) ;
sub get_code_location($) ;
sub is_sub_constant($) ;
}
package Sub::Name {
sub subname;
}
package Sub::Util {
sub set_prototype;
sub set_subname;
sub subname;
}
package Sys::Hostname {
sub ghname;
}
package Sys::Syslog {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub AI_ADDRCONFIG() ;
sub AI_ALL() ;
sub AI_CANONIDN() ;
sub AI_IDN() ;
sub AI_IDN_ALLOW_UNASSIGNED() ;
sub AI_IDN_USE_STD3_ASCII_RULES() ;
sub AI_NUMERICSERV() ;
sub AI_V4MAPPED() ;
sub EAI_ADDRFAMILY() ;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub EAI_SYSTEM() ;
sub IOV_MAX() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub IPV6_MTU() ;
sub IPV6_MTU_DISCOVER() ;
sub IPV6_RECVERR() ;
sub IPV6_ROUTER_ALERT() ;
sub IP_BIND_ADDRESS_NO_PORT() ;
sub IP_FREEBIND() ;
sub IP_MTU() ;
sub IP_MTU_DISCOVER() ;
sub IP_MULTICAST_ALL() ;
sub IP_NODEFRAG() ;
sub IP_PMTUDISC_DO() ;
sub IP_PMTUDISC_DONT() ;
sub IP_PMTUDISC_PROBE() ;
sub IP_PMTUDISC_WANT() ;
sub IP_RECVERR() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub IP_TRANSPARENT() ;
sub LOG_FAC;
sub LOG_MAKEPRI;
sub LOG_MASK;
sub LOG_PRI;
sub LOG_UPTO;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub NI_IDN() ;
sub NI_IDN_ALLOW_UNASSIGNED() ;
sub NI_IDN_USE_STD3_ASCII_RULES() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SOCK_CLOEXEC() ;
sub SOCK_NONBLOCK() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_LOCK_FILTER() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_RCVBUFFORCE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_SNDBUFFORCE() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONGESTION() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_FASTOPEN() ;
sub TCP_INFO() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_KEEPCNT() ;
sub TCP_KEEPIDLE() ;
sub TCP_KEEPINTVL() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MAXSEG() ;
sub TCP_MD5SIG() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_QUICKACK() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub closelog_xs;
sub constant;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub openlog_xs;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub setlocale;
sub setlogmask_xs;
sub sockaddr_family;
sub strftime;
sub syslog_xs;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Sys::Syslog::Win32 {
sub EVENTLOG_AUDIT_FAILURE;
sub EVENTLOG_AUDIT_SUCCESS;
sub EVENTLOG_BACKWARDS_READ;
sub EVENTLOG_END_ALL_PAIRED_EVENTS;
sub EVENTLOG_END_PAIRED_EVENT;
sub EVENTLOG_FORWARDS_READ;
sub EVENTLOG_PAIRED_EVENT_ACTIVE;
sub EVENTLOG_PAIRED_EVENT_INACTIVE;
sub EVENTLOG_SEEK_READ;
sub EVENTLOG_SEQUENTIAL_READ;
sub EVENTLOG_START_PAIRED_EVENT;
sub EVENTLOG_SUCCESS;
}
package Template {
sub blessed($) ;
}
package Template::Document {
sub is_utf8;
}
package Template::Filters {
sub blessed($) ;
}
package Template::Service {
sub blessed($) ;
}
package Template::Stash {
sub blessed($) ;
sub reftype($) ;
}
package Template::Stash::XS {
sub get;
sub set;
}
package Template::VMethods {
sub blessed($) ;
sub looks_like_number($) ;
}
package Term::ReadKey {
sub GetControlChars;
sub GetSpeed;
sub GetTermSizeGSIZE;
sub GetTermSizeGWINSZ;
sub GetTermSizeVIO;
sub GetTermSizeWin32;
sub SetControlChars;
sub SetReadMode;
sub SetTerminalSize;
sub Win32PeekChar;
sub blockoptions;
sub pollfile;
sub selectfile;
sub setnodelay;
sub termoptions;
sub termsizeoptions;
}
package Test2::API {
sub blessed($) ;
sub weaken($) ;
}
package Test2::API::Context {
sub blessed($) ;
sub weaken($) ;
}
package Test2::API::Instance {
sub reftype($) ;
}
package Test2::Event::Info {
sub blessed($) ;
}
package Test2::Hub {
sub weaken($) ;
}
package Test2::Util::HashBase {
sub _isa($;$) ;
}
package Test::Builder {
sub blessed($) ;
sub reftype($) ;
sub weaken($) ;
}
package Test::LeakTrace {
sub CLONE;
sub _finish;
sub _runops_installed;
sub _start;
sub count_sv;
}
package Text::CSV_XS {
sub Combine;
sub Parse;
sub SetDiag;
sub _cache_diag;
sub _cache_set;
sub error_input;
sub getline;
sub getline_all;
sub print;
}
package Text::Soundex {
sub soundex;
sub soundex_xs;
}
package Tie::Hash::NamedCapture {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub SCALAR;
sub STORE;
sub TIEHASH;
sub flags;
}
package Time::HiRes {
sub CLONE(;@) ;
sub alarm($;$) ;
sub clock() ;
sub clock_getres(;$) ;
sub clock_gettime(;$) ;
sub clock_nanosleep($$;$) ;
sub constant($) ;
sub gettimeofday() ;
sub lstat(;$) ;
sub nanosleep($) ;
sub sleep(;@) ;
sub stat(;$) ;
sub time() ;
sub ualarm($;$) ;
sub usleep($) ;
sub utime($$;@) ;
}
package Time::Moment {
sub CLONE;
sub at_last_day_of_month;
sub at_last_day_of_quarter;
sub at_last_day_of_year;
sub at_midnight;
sub at_noon;
sub at_utc;
sub compare;
sub day_of_month;
sub day_of_quarter;
sub day_of_week;
sub day_of_year;
sub delta_days;
sub delta_hours;
sub delta_microseconds;
sub delta_milliseconds;
sub delta_minutes;
sub delta_months;
sub delta_nanoseconds;
sub delta_seconds;
sub delta_weeks;
sub delta_years;
sub epoch;
sub from_epoch;
sub from_jd;
sub from_mjd;
sub from_object;
sub from_rd;
sub from_string;
sub hour;
sub is_after;
sub is_before;
sub is_equal;
sub is_leap_year;
sub jd;
sub length_of_month;
sub length_of_quarter;
sub length_of_week_year;
sub length_of_year;
sub local_rd_as_seconds;
sub local_rd_values;
sub microsecond;
sub microsecond_of_day;
sub millisecond;
sub millisecond_of_day;
sub minus_days;
sub minus_hours;
sub minus_microseconds;
sub minus_milliseconds;
sub minus_minutes;
sub minus_months;
sub minus_nanoseconds;
sub minus_seconds;
sub minus_weeks;
sub minus_years;
sub minute;
sub minute_of_day;
sub mjd;
sub month;
sub nanosecond;
sub nanosecond_of_day;
sub new;
sub now;
sub now_utc;
sub offset;
sub plus_days;
sub plus_hours;
sub plus_microseconds;
sub plus_milliseconds;
sub plus_minutes;
sub plus_months;
sub plus_nanoseconds;
sub plus_seconds;
sub plus_weeks;
sub plus_years;
sub precision;
sub quarter;
sub rd;
sub rdn;
sub second;
sub second_of_day;
sub strftime;
sub to_string;
sub utc_rd_as_seconds;
sub utc_rd_values;
sub week;
sub with;
sub with_day_of_month;
sub with_day_of_quarter;
sub with_day_of_week;
sub with_day_of_year;
sub with_hour;
sub with_microsecond;
sub with_microsecond_of_day;
sub with_millisecond;
sub with_millisecond_of_day;
sub with_minute;
sub with_minute_of_day;
sub with_month;
sub with_nanosecond;
sub with_nanosecond_of_day;
sub with_offset;
sub with_offset_same_instant;
sub with_offset_same_local;
sub with_precision;
sub with_quarter;
sub with_rdn;
sub with_second;
sub with_second_of_day;
sub with_week;
sub with_year;
sub year;
}
package Time::Moment::Internal {
sub orthodox_easter_sunday;
sub western_easter_sunday;
}
package Time::Piece {
sub _crt_gmtime($) ;
sub _crt_localtime($) ;
sub _mini_mktime($$$$$$) ;
sub _strftime($$;$) ;
sub _strptime($$) ;
sub _tzset() ;
}
package Try::Tiny {
sub _subname;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub isa;
}
package Unicode::Collate {
sub _decompHangul;
sub _derivCE_14;
sub _derivCE_18;
sub _derivCE_20;
sub _derivCE_22;
sub _derivCE_24;
sub _derivCE_32;
sub _derivCE_8;
sub _derivCE_9;
sub _exists_simple;
sub _fetch_rest;
sub _fetch_simple;
sub _getHexArray;
sub _ignorable_simple;
sub _isIllegal;
sub _isUIdeo;
sub _uideoCE_8;
sub getHST;
sub mk_SortKey;
sub varCE;
sub visualizeSortKey;
}
package Unicode::GCString {
sub DESTROY($) ;
sub _new($$;$) ;
sub as_array($) ;
sub as_scalarref;
sub as_string($;$;$) ;
sub chars($) ;
sub cmp($$;$) ;
sub columns;
sub concat($$;$) ;
sub copy($) ;
sub eos;
sub flag($;$;$) ;
sub item($;$) ;
sub join;
sub lbc($) ;
sub lbcext($) ;
sub lbclass($;$) ;
sub lbclass_ext($;$) ;
sub length($) ;
sub next($;$;$) ;
sub pos($;$) ;
sub substr($$;$;$) ;
}
package Unicode::LineBreak {
sub DESTROY($) ;
sub EAWidths;
sub LBClasses;
sub SOMBOK_VERSION;
sub UNICODE_VERSION;
sub _config;
sub _new($) ;
sub as_hashref;
sub as_scalarref;
sub as_string;
sub break($$) ;
sub break_partial($$) ;
sub breakingRule($$$) ;
sub copy($) ;
sub is_utf8($;$) ;
sub lbrule($$$) ;
sub reset($) ;
sub strsize($$$$$;$) ;
}
package Unicode::LineBreak::SouthEastAsian {
sub supported() ;
}
package Unicode::Normalize {
sub FCC($) ;
sub NFC($) ;
sub NFD($) ;
sub NFKC($) ;
sub NFKD($) ;
sub checkFCC($) ;
sub checkFCD($) ;
sub checkNFC($) ;
sub checkNFD($) ;
sub checkNFKC($) ;
sub checkNFKD($) ;
sub compose($) ;
sub composeContiguous($) ;
sub decompose($;$) ;
sub getCanon($) ;
sub getCombinClass($) ;
sub getCompat($) ;
sub getComposite($$) ;
sub isComp2nd($) ;
sub isComp_Ex($) ;
sub isExclusion($) ;
sub isNFC_MAYBE($) ;
sub isNFC_NO($) ;
sub isNFD_NO($) ;
sub isNFKC_MAYBE($) ;
sub isNFKC_NO($) ;
sub isNFKD_NO($) ;
sub isNonStDecomp($) ;
sub isSingleton($) ;
sub reorder($) ;
sub splitOnLastStarter;
}
package Unicode::UTF8 {
sub decode_utf8;
sub encode_utf8;
sub valid_utf8;
}
package Variable::Magic {
sub CLONE;
sub _wizard;
sub cast(\[$@%&*]$@) ;
sub dispell(\[$@%&*]$) ;
sub getdata(\[$@%&*]$) ;
}
package Win32 {
sub AbortSystemShutdown;
sub CopyFile;
sub CreateDirectory;
sub CreateFile;
sub DomainName;
sub ExpandEnvironmentStrings;
sub FormatMessage;
sub FreeLibrary;
sub FsType;
sub GetACP;
sub GetANSIPathName;
sub GetArchName;
sub GetChipName;
sub GetConsoleCP;
sub GetConsoleOutputCP;
sub GetCurrentProcessId;
sub GetCurrentThreadId;
sub GetCwd;
sub GetFileVersion;
sub GetFolderPath;
sub GetFullPathName;
sub GetLastError;
sub GetLongPathName;
sub GetNextAvailDrive;
sub GetOEMCP;
sub GetOSVersion;
sub GetProcAddress;
sub GetProductInfo;
sub GetShortPathName;
sub GetSystemMetrics;
sub GetTickCount;
sub GuidGen;
sub InitiateSystemShutdown;
sub IsAdminUser;
sub IsWin95;
sub IsWinNT;
sub LoadLibrary;
sub LoginName;
sub LookupAccountName;
sub LookupAccountSID;
sub MsgBox;
sub NodeName;
sub OutputDebugString;
sub RegisterServer;
sub SetChildShowWindow;
sub SetConsoleCP;
sub SetConsoleOutputCP;
sub SetCwd;
sub SetLastError;
sub Sleep;
sub Spawn;
sub UnregisterServer;
}
package Win32::API {
sub Call;
sub FreeLibrary;
sub FromUnicode;
sub GetMagicSV;
sub GetModuleFileName;
sub GetProcAddress;
sub IsBadReadPtr;
sub IsBadStringPtr;
sub LoadLibrary;
sub MoveMemory;
sub PointerAt;
sub PointerTo;
sub ReadMemory;
sub SafeReadWideCString;
sub SetMagicSV;
sub ToUnicode;
sub WriteMemory;
sub _Align;
sub _ImportXS;
sub _TruncateToWideNull;
sub _my_cxt_clone;
sub looks_like_number($) ;
sub weaken($) ;
}
package Win32::API::Callback {
sub IsBadStringPtr;
sub MakeParamArr;
sub PackedRVTarget;
sub WriteMemory;
}
package Win32::API::Callback::HeapBlock {
sub DESTROY;
sub new;
}
package Win32::API::Callback::IATPatch {
sub CLONE_SKIP;
sub DESTROY;
sub GetOriginalFunctionPtr;
sub Unpatch;
sub new;
}
package Win32::Console {
sub Alloc;
sub Free;
sub MouseButtons;
sub _CloseHandle;
sub _CreateConsoleScreenBuffer;
sub _FillConsoleOutputAttribute;
sub _FillConsoleOutputCharacter;
sub _FlushConsoleInputBuffer;
sub _GenerateConsoleCtrlEvent;
sub _GetConsoleCP;
sub _GetConsoleCursorInfo;
sub _GetConsoleMode;
sub _GetConsoleOutputCP;
sub _GetConsoleScreenBufferInfo;
sub _GetConsoleTitle;
sub _GetLargestConsoleWindowSize;
sub _GetNumberOfConsoleInputEvents;
sub _GetStdHandle;
sub _PeekConsoleInput;
sub _ReadConsole;
sub _ReadConsoleInput;
sub _ReadConsoleOutput;
sub _ReadConsoleOutputAttribute;
sub _ReadConsoleOutputCharacter;
sub _ScrollConsoleScreenBuffer;
sub _SetConsoleActiveScreenBuffer;
sub _SetConsoleCP;
sub _SetConsoleCursorInfo;
sub _SetConsoleCursorPosition;
sub _SetConsoleIcon;
sub _SetConsoleMode;
sub _SetConsoleOutputCP;
sub _SetConsoleScreenBufferSize;
sub _SetConsoleTextAttribute;
sub _SetConsoleTitle;
sub _SetConsoleWindowInfo;
sub _SetStdHandle;
sub _WriteConsole;
sub _WriteConsoleInput;
sub _WriteConsoleOutput;
sub _WriteConsoleOutputAttribute;
sub _WriteConsoleOutputCharacter;
sub constant;
}
package Win32::Console::ANSI {
sub Cls() ;
sub Cursor(;@) ;
sub CursorSize(;@) ;
sub MinimizeAll() ;
sub ScriptCP(;@) ;
sub SetCloseButton($) ;
sub SetConsoleFullScreen($) ;
sub SetConsoleSize($$) ;
sub SetMonitorState($) ;
sub ShowConsoleWindow($) ;
sub Title(;@) ;
sub XYMax() ;
sub _GetConsoleColors() ;
sub _GetCursorInfo() ;
sub _ScreenDump() ;
sub _SetConsoleStandard() ;
sub _chcp($$) ;
}
package Win32::Daemon {
sub AcceptedControls;
sub CallbackTimer;
sub ConfigureService;
sub Constant;
sub CreateService;
sub DebugOutputPath;
sub DeleteService;
sub GetLastError;
sub GetSecurity;
sub GetServiceHandle;
sub GetVersion;
sub HideService;
sub IsDebugBuild;
sub QueryLastMessage;
sub QueryServiceConfig;
sub RegisterCallbacks;
sub RestoreService;
sub SetSecurity;
sub SetServiceBits;
sub ShowService;
sub StartService;
sub State;
sub StopService;
sub Timeout;
}
package Win32::EventLog {
sub BackupEventLog;
sub ClearEventLog;
sub CloseEventLog;
sub DeregisterEventSource;
sub EVENTLOG_AUDIT_FAILURE;
sub EVENTLOG_AUDIT_SUCCESS;
sub EVENTLOG_BACKWARDS_READ;
sub EVENTLOG_END_ALL_PAIRED_EVENTS;
sub EVENTLOG_END_PAIRED_EVENT;
sub EVENTLOG_FORWARDS_READ;
sub EVENTLOG_PAIRED_EVENT_ACTIVE;
sub EVENTLOG_PAIRED_EVENT_INACTIVE;
sub EVENTLOG_SEEK_READ;
sub EVENTLOG_SEQUENTIAL_READ;
sub EVENTLOG_START_PAIRED_EVENT;
sub EVENTLOG_SUCCESS;
sub GetEventLogText;
sub GetNumberOfEventLogRecords;
sub GetOldestEventLogRecord;
sub OpenBackupEventLog;
sub OpenEventLog;
sub ReadEventLog;
sub RegisterEventSource;
sub WriteEventLog;
sub constant;
}
package Win32::Exe {
sub DELEGATE_SUBS() ;
sub DISPATCH_TABLE() ;
sub FORMAT() ;
}
package Win32::Exe::Base {
sub FORMAT() ;
}
package Win32::Exe::DebugTable {
sub FORMAT() ;
}
package Win32::Exe::IconFile {
sub DEFAULT_ARGS() ;
sub DISPATCH_TABLE() ;
sub FORMAT() ;
}
package Win32::Exe::InsertResourceSection {
sub _insert_resource_section;
}
package Win32::File {
sub GetAttributes($$) ;
sub SetAttributes($$) ;
sub constant($) ;
}
package Win32::GuiTest {
sub AllocateVirtualBufferImp;
sub CheckButton;
sub ClientToScreen;
sub EnableWindow;
sub FreeVirtualBufferImp;
sub GetActiveWindow;
sub GetAsyncKeyState;
sub GetCaretPos;
sub GetChildDepth;
sub GetChildWindows;
sub GetClassName;
sub GetComboContents;
sub GetComboText;
sub GetCursorPos;
sub GetDesktopWindow;
sub GetFocus;
sub GetForegroundWindow;
sub GetHeaderColumnCount;
sub GetListContents;
sub GetListText;
sub GetListViewHeader;
sub GetListViewItem;
sub GetListViewItemCount;
sub GetMenu;
sub GetMenuItemCount;
sub GetMenuItemID;
sub GetMenuItemIndex;
sub GetMenuItemInfo;
sub GetParent;
sub GetPopupHandle;
sub GetScreenRes;
sub GetSubMenu;
sub GetSystemMenu;
sub GetTabItems;
sub GetTreeViewSelPath;
sub GetWindow;
sub GetWindowLong;
sub GetWindowRect;
sub GetWindowText;
sub GrayOutButton;
sub IsCheckedButton;
sub IsChild;
sub IsGrayedButton;
sub IsListViewItemSel;
sub IsTabItemSel;
sub IsWindow;
sub IsWindowEnabled;
sub IsWindowVisible;
sub MouseMoveAbsPix;
sub MouseMoveWheel;
sub NormToScreen;
sub PostMessage;
sub ReadFromVirtualBufferImp;
sub ScreenToClient;
sub ScreenToNorm;
sub SelComboItem;
sub SelComboItemText;
sub SelComboString;
sub SelListViewItem;
sub SelListViewItemText;
sub SelTabItem;
sub SelTabItemText;
sub SendLButtonDown;
sub SendLButtonUp;
sub SendMButtonDown;
sub SendMButtonUp;
sub SendMessage;
sub SendMouseMoveAbs;
sub SendMouseMoveRel;
sub SendRButtonDown;
sub SendRButtonUp;
sub SendRawKey;
sub SetActiveWindow;
sub SetFocus;
sub SetForegroundWindow;
sub SetWindowPos;
sub ShowWindow;
sub TabCtrl_GetCurFocus;
sub TabCtrl_GetItemCount;
sub TabCtrl_SetCurFocus;
sub TabCtrl_SetCurSel;
sub UnCheckButton;
sub UnicodeSemantics;
sub VkKeyScan;
sub WMGetText;
sub WMSetText;
sub WaitForReady;
sub WindowFromPoint;
sub WriteToVirtualBufferImp;
}
package Win32::GuiTest::DibSect {
sub CopyClient;
sub CopyWindow;
sub DESTROY;
sub Destroy;
sub Invert;
sub SaveAs;
sub ToClipboard;
sub ToGrayScale;
sub new;
}
package Win32::Job {
sub DESTROY;
sub kill;
sub new;
sub run;
sub spawn;
sub status;
sub watch;
}
package Win32::Job::_handle {
sub DESTROY;
}
package Win32::OLE {
sub DESTROY;
sub Dispatch;
sub EnumAllObjects;
sub Forward;
sub FreeUnusedLibraries;
sub GetActiveObject;
sub GetIDsOfNames;
sub GetObject;
sub GetTypeInfo;
sub Initialize;
sub MessageLoop;
sub QueryInterface;
sub QueryObjectType;
sub QuitMessageLoop;
sub SpinMessageLoop;
sub Uninitialize;
sub WithEvents;
sub _Unique;
sub new;
}
package Win32::OLE::Const {
sub _Constants;
sub _LoadRegTypeLib;
sub _ShowHelpContext;
sub _Typelibs;
}
package Win32::OLE::Enum {
sub All;
sub Clone;
sub DESTROY;
sub Next;
sub Reset;
sub Skip;
sub new;
}
package Win32::OLE::NLS {
sub CompareString;
sub GetLocaleInfo;
sub GetStringType;
sub GetSystemDefaultLCID;
sub GetSystemDefaultLangID;
sub GetUserDefaultLCID;
sub GetUserDefaultLangID;
sub LCMapString;
sub SendSettingChange;
sub SetLocaleInfo;
}
package Win32::OLE::Tie {
sub DESTROY;
sub FIRSTENUM;
sub FIRSTKEY;
sub Fetch;
sub NEXTENUM;
sub NEXTKEY;
sub Store;
}
package Win32::OLE::TypeInfo {
sub DESTROY;
sub GetContainingTypeLib;
sub _GetDocumentation;
sub _GetFuncDesc;
sub _GetImplTypeFlags;
sub _GetImplTypeInfo;
sub _GetNames;
sub _GetTypeAttr;
sub _GetVarDesc;
sub _new;
}
package Win32::OLE::TypeLib {
sub DESTROY;
sub GetTypeInfo;
sub _GetDocumentation;
sub _GetLibAttr;
sub _GetTypeInfo;
sub _GetTypeInfoCount;
sub new;
}
package Win32::OLE::Variant {
sub As;
sub ChangeType;
sub Copy;
sub Currency;
sub DESTROY;
sub Date;
sub Dim;
sub Get;
sub IsNothing;
sub IsNullString;
sub LastError;
sub Number;
sub Put;
sub Time;
sub Type;
sub Unicode;
sub Value;
sub _Clone;
sub _RefType;
sub _Value;
sub new;
}
package Win32::Pipe {
sub Info;
sub PipeBufferSize;
sub PipeClose;
sub PipeConnect;
sub PipeCreate;
sub PipeDisconnect;
sub PipeError;
sub PipeRead;
sub PipeResizeBuffer;
sub PipeWrite;
sub constant;
}
package Win32::Process {
sub Create;
sub DESTROY;
sub GetCurrentProcessID;
sub GetExitCode;
sub GetPriorityClass;
sub GetProcessAffinityMask;
sub GetProcessID;
sub Kill;
sub KillProcess;
sub Open;
sub Resume;
sub SetPriorityClass;
sub SetProcessAffinityMask;
sub Suspend;
sub Wait;
sub constant;
sub get_Win32_IPC_HANDLE;
sub get_process_handle;
}
package Win32::Service {
sub GetServices;
sub GetStatus;
sub PauseService;
sub ResumeService;
sub StartService;
sub StopService;
sub constant;
}
package Win32::UTCFileTime {
sub CLONE(;@) ;
sub _alt_stat($) ;
sub _get_utc_file_times($) ;
sub _set_error_mode($) ;
sub _set_utc_file_times($$$) ;
sub constant($) ;
}
package Win32::WinError {
sub constant;
}
package Win32API::File {
sub CloseHandle;
sub CopyFileA;
sub CopyFileW;
sub CreateFileA;
sub CreateFileW;
sub DefineDosDeviceA;
sub DefineDosDeviceW;
sub DeleteFileA;
sub DeleteFileW;
sub DeviceIoControl;
sub FdGetOsFHandle;
sub GetDriveTypeA;
sub GetDriveTypeW;
sub GetFileAttributesA;
sub GetFileAttributesW;
sub GetFileSize;
sub GetFileType;
sub GetHandleInformation;
sub GetLogicalDriveStringsA;
sub GetLogicalDriveStringsW;
sub GetLogicalDrives;
sub GetOverlappedResult;
sub GetStdHandle;
sub GetVolumeInformationA;
sub GetVolumeInformationW;
sub IsContainerPartition;
sub IsRecognizedPartition;
sub MoveFileA;
sub MoveFileExA;
sub MoveFileExW;
sub MoveFileW;
sub OsFHandleOpenFd;
sub QueryDosDeviceA;
sub QueryDosDeviceW;
sub ReadFile;
sub SetErrorMode;
sub SetFilePointer;
sub SetHandleInformation;
sub SetStdHandle;
sub WriteFile;
sub _fileLastError;
}
package Win32API::Registry {
sub AbortSystemShutdownA;
sub AbortSystemShutdownW;
sub AllowPriv;
sub InitiateSystemShutdownA;
sub InitiateSystemShutdownW;
sub RegCloseKey;
sub RegConnectRegistryA;
sub RegConnectRegistryW;
sub RegCreateKeyA;
sub RegCreateKeyExA;
sub RegCreateKeyExW;
sub RegCreateKeyW;
sub RegDeleteKeyA;
sub RegDeleteKeyW;
sub RegDeleteValueA;
sub RegDeleteValueW;
sub RegFlushKey;
sub RegLoadKeyA;
sub RegLoadKeyW;
sub RegNotifyChangeKeyValue;
sub RegOpenKeyA;
sub RegOpenKeyExA;
sub RegOpenKeyExW;
sub RegOpenKeyW;
sub RegReplaceKeyA;
sub RegReplaceKeyW;
sub RegRestoreKeyA;
sub RegRestoreKeyW;
sub RegSaveKeyA;
sub RegSaveKeyW;
sub RegSetKeySecurity;
sub RegUnLoadKeyA;
sub RegUnLoadKeyW;
sub _RegEnumKeyA;
sub _RegEnumKeyExA;
sub _RegEnumKeyExW;
sub _RegEnumKeyW;
sub _RegEnumValueA;
sub _RegEnumValueW;
sub _RegGetKeySecurity;
sub _RegQueryInfoKeyA;
sub _RegQueryInfoKeyW;
sub _RegQueryMultipleValuesA;
sub _RegQueryMultipleValuesW;
sub _RegQueryValueA;
sub _RegQueryValueExA;
sub _RegQueryValueExW;
sub _RegQueryValueW;
sub _RegSetValueA;
sub _RegSetValueExA;
sub _RegSetValueExW;
sub _RegSetValueW;
sub _regLastError;
}
package Wx {
sub AboutBox;
sub AutoBufferedPaintDCFactory;
sub Bell;
sub CLONE;
sub ColourDisplay;
sub ContextId;
sub CreateFileTipProvider;
sub DirSelector;
sub DisableAssertHandler;
sub DisplayDepth;
sub EnableDefaultAssertHandler;
sub ExecuteArgs;
sub ExecuteCommand;
sub ExecuteStdout;
sub ExecuteStdoutStderr;
sub Exit;
sub FileSelector;
sub FindWindowAtPointer;
sub GetActiveWindow;
sub GetBatteryState;
sub GetClientDisplayRect;
sub GetColourFromUser;
sub GetDisplaySize;
sub GetDisplaySizeMM;
sub GetFontFromUser;
sub GetKeyState;
sub GetMousePosition;
sub GetMousePositionXY;
sub GetNumberFromUser;
sub GetOsDescription;
sub GetPasswordFromUser;
sub GetPowerType;
sub GetSingleChoice;
sub GetSingleChoiceData;
sub GetSingleChoiceIndex;
sub GetStockAccelerator;
sub GetStockHelpString;
sub GetStockLabel;
sub GetTextFromUser;
sub GetTopLevelParent;
sub GetTranslation;
sub GetTranslationNormal;
sub GetTranslationPlural;
sub GetWxPerlIcon;
sub InitAllImageHandlers;
sub IsStockID;
sub IsStockLabel;
sub LaunchDefaultBrowser;
sub Load;
sub MessageBox;
sub MicroSleep;
sub MilliSleep;
sub NewEventType;
sub NewId;
sub PostEvent;
sub RegisterId;
sub SafeYield;
sub SetAlwaysUTF8;
sub SetConstants;
sub SetConstantsOnce;
sub SetCursor;
sub SetEvents;
sub SetInheritance;
sub SetOvlConstants;
sub Shell;
sub ShowTip;
sub Sleep;
sub SysErrorCode;
sub SysErrorMsg;
sub Trap;
sub UnLoad;
sub UnsetConstants;
sub Usleep;
sub WakeUpIdle;
sub XmlInitResourceModule;
sub XmlInitXmlModule;
sub Yield;
sub YieldIfNeeded;
sub _boot_Constant($$) ;
sub _boot_Controls($$) ;
sub _boot_Events($$) ;
sub _boot_Frames($$) ;
sub _boot_GDI($$) ;
sub _boot_Window($$) ;
sub _get_packages;
sub _load_plugin;
sub _unload_plugin;
sub _utf8_off;
sub _utf8_on;
sub _wx_optmod_ipc;
sub _wx_optmod_media;
sub _wx_optmod_propgrid;
sub _wx_optmod_ribbon;
sub _wx_optmod_webview;
sub _xsmatch(\@$;$$) ;
sub constant;
sub gettext;
sub looks_like_number;
sub wxDF_BITMAP;
sub wxDF_FILENAME;
sub wxDF_METAFILE;
sub wxDF_TEXT;
sub wxDF_UNICODETEXT;
sub wxLogDebug;
sub wxLogError;
sub wxLogFatalError;
sub wxLogMessage;
sub wxLogStatus;
sub wxLogStatusFrame;
sub wxLogSysError;
sub wxLogTraceMask;
sub wxLogVerbose;
sub wxLogWarning;
sub wxSOCKET_CONNECTION;
sub wxSOCKET_CONNECTION_FLAG;
sub wxSOCKET_INPUT;
sub wxSOCKET_INPUT_FLAG;
sub wxSOCKET_LOST;
sub wxSOCKET_LOST_FLAG;
sub wxSOCKET_OUTPUT;
sub wxSOCKET_OUTPUT_FLAG;
}
package Wx::ANIHandler {
sub new;
}
package Wx::AUI {
sub SetEvents;
}
package Wx::AboutDialogInfo {
sub AddArtist;
sub AddDeveloper;
sub AddDocWriter;
sub AddTranslator;
sub GetArtists;
sub GetCopyright;
sub GetDescription;
sub GetDevelopers;
sub GetDocWriters;
sub GetIcon;
sub GetLicence;
sub GetName;
sub GetTranslators;
sub GetVersion;
sub GetWebSiteDescription;
sub GetWebSiteURL;
sub HasArtists;
sub HasCopyright;
sub HasDescription;
sub HasDevelopers;
sub HasDocWriters;
sub HasIcon;
sub HasLicence;
sub HasTranslators;
sub HasVersion;
sub HasWebSite;
sub SetArtists;
sub SetCopyright;
sub SetDescription;
sub SetDevelopers;
sub SetDocWriters;
sub SetIcon;
sub SetLicence;
sub SetLicense;
sub SetName;
sub SetTranslators;
sub SetVersion;
sub SetWebSite;
sub new;
}
package Wx::AcceleratorEntry {
sub CLONE;
sub Create;
sub DESTROY;
sub GetCommand;
sub GetFlags;
sub GetKeyCode;
sub Set;
sub new;
}
package Wx::AcceleratorTable {
sub CLONE;
sub DESTROY;
sub IsOk;
sub Ok;
sub new;
}
package Wx::ActivateEvent {
sub GetActive;
sub new;
}
package Wx::Animation {
sub CLONE;
sub DESTROY;
sub GetDelay;
sub GetFrame;
sub GetFrameCount;
sub GetSize;
sub IsOk;
sub Load;
sub LoadFile;
sub new;
}
package Wx::AnimationCtrl {
sub Create;
sub GetAnimation;
sub GetInactiveBitmap;
sub IsPlaying;
sub LoadFile;
sub Play;
sub SetAnimation;
sub SetInactiveBitmap;
sub Stop;
sub new;
sub newDefault;
}
package Wx::App {
sub Dispatch;
sub Exit;
sub ExitMainLoop;
sub GetAppDisplayName;
sub GetAppName;
sub GetClassName;
sub GetComCtl32Version;
sub GetExitOnFrameDelete;
sub GetInstance;
sub GetLayoutDirection;
sub GetStdIcon;
sub GetTopWindow;
sub GetUseBestVisual;
sub GetVendorDisplayName;
sub GetVendorName;
sub HasPendingEvents;
sub IsActive;
sub IsMainLoopRunning;
sub IsScheduledForDestruction;
sub MainLoop;
sub OnAssertFailure;
sub Pending;
sub ProcessIdle;
sub ProcessPendingEvents;
sub ResumeProcessingOfPendingEvents;
sub SafeYield;
sub SafeYieldFor;
sub ScheduleForDestruction;
sub SetAppDisplayName;
sub SetAppName;
sub SetClassName;
sub SetExitOnFrameDelete;
sub SetInstance;
sub SetNativeTheme;
sub SetTopWindow;
sub SetUseBestVisual;
sub SetVendorDisplayName;
sub SetVendorName;
sub SuspendProcessingOfPendingEvents;
sub Yield;
}
package Wx::ArchiveFSHandler {
sub new;
}
package Wx::ArrayStringProperty {
sub CreateEditorDialog;
sub DoSetAttribute;
sub OnButtonClick;
sub OnCustomStringEdit;
sub OnEvent;
sub OnSetValue;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
}
package Wx::ArtProvider {
sub DeleteProvider;
sub GetBitmap;
sub GetIcon;
sub GetIconBundle;
sub InsertProvider;
sub PopProvider;
sub PushProvider;
sub RemoveProvider;
}
package Wx::AuiManager {
sub AddPane;
sub AddPaneDefault;
sub AddPaneDirection;
sub AddPanePoint;
sub CLONE;
sub ClosePane;
sub DESTROY;
sub DetachPane;
sub GetAllPanes;
sub GetFlags;
sub GetManagedWindow;
sub GetPane;
sub GetPaneString;
sub GetPaneWindow;
sub HideHint;
sub InsertPane;
sub LoadPaneInfo;
sub LoadPerspective;
sub MaximizePane;
sub RestoreMaximizedPane;
sub RestorePane;
sub SavePaneInfo;
sub SavePerspective;
sub SetDockSizeConstraint;
sub SetFlags;
sub SetManagedWindow;
sub ShowHint;
sub UnInit;
sub Update;
sub new;
}
package Wx::AuiManagerEvent {
sub CanVeto;
sub GetButton;
sub GetPane;
sub GetVeto;
sub SetButton;
sub SetCanVeto;
sub Veto;
sub new;
}
package Wx::AuiNotebook {
sub AddPage;
sub AdvanceSelection;
sub Create;
sub DeletePage;
sub GetAuiManager;
sub GetHeightForPageHeight;
sub GetPage;
sub GetPageBitmap;
sub GetPageCount;
sub GetPageIndex;
sub GetPageText;
sub GetSelection;
sub GetTabCtrlHeight;
sub InsertPage;
sub RemovePage;
sub SetMeasuringFont;
sub SetNormalFont;
sub SetPageBitmap;
sub SetPageText;
sub SetSelectedFont;
sub SetSelection;
sub SetTabCtrlHeight;
sub SetUniformBitmapSize;
sub SetWindowStyleFlag;
sub ShowWindowMenu;
sub Split;
sub new;
sub newDefault;
sub newFull;
}
package Wx::AuiNotebookEvent {
sub GetDragSource;
sub GetOldSelection;
sub GetSelection;
sub SetDragSource;
sub SetOldSelection;
sub SetSelection;
sub new;
}
package Wx::AuiPaneInfo {
sub BestSize;
sub BestSizeSize;
sub BestSizeWH;
sub Bottom;
sub BottomDockable;
sub CLONE;
sub Caption;
sub CaptionVisible;
sub Center;
sub CenterPane;
sub Centre;
sub CentrePane;
sub CloseButton;
sub DESTROY;
sub DefaultPane;
sub DestroyOnClose;
sub Direction;
sub Dock;
sub DockFixed;
sub Dockable;
sub Fixed;
sub Float;
sub Floatable;
sub FloatingPosition;
sub FloatingPositionPoint;
sub FloatingPositionXY;
sub FloatingSize;
sub FloatingSizeSize;
sub FloatingSizeWH;
sub Gripper;
sub GripperTop;
sub HasBorder;
sub HasCaption;
sub HasCloseButton;
sub HasFlag;
sub HasGripper;
sub HasGripperTop;
sub HasMaximizeButton;
sub HasMinimizeButton;
sub HasPinButton;
sub Hide;
sub IsBottomDockable;
sub IsDestroyOnClose;
sub IsDocked;
sub IsFixed;
sub IsFloatable;
sub IsFloating;
sub IsLeftDockable;
sub IsMaximized;
sub IsMovable;
sub IsOk;
sub IsResizable;
sub IsRightDockable;
sub IsShown;
sub IsToolbar;
sub IsTopDockable;
sub Layer;
sub Left;
sub LeftDockable;
sub MaxSize;
sub MaxSizeSize;
sub MaxSizeWH;
sub Maximize;
sub MaximizeButton;
sub MinSize;
sub MinSizeSize;
sub MinSizeWH;
sub MinimizeButton;
sub Movable;
sub Name;
sub PaneBorder;
sub PinButton;
sub Position;
sub Resizable;
sub Restore;
sub Right;
sub RightDockable;
sub Row;
sub SafeSet;
sub SetFlag;
sub Show;
sub ToolbarPane;
sub Top;
sub TopDockable;
sub Window;
sub new;
}
package Wx::AutoBufferedPaintDC {
sub new;
}
package Wx::BMPHandler {
sub new;
}
package Wx::BannerWindow {
sub Create;
sub SetBitmap;
sub SetGradient;
sub SetText;
sub new;
sub newDefault;
sub newFull;
sub newShort;
}
package Wx::BestHelpController {
sub new;
}
package Wx::Bitmap {
sub AddHandler;
sub CLONE;
sub ConvertToImage;
sub CopyFromIcon;
sub DESTROY;
sub GetDepth;
sub GetHandlers;
sub GetHeight;
sub GetMask;
sub GetPalette;
sub GetSubBitmap;
sub GetWidth;
sub InitStandardHandlers;
sub InsertHandler;
sub IsOk;
sub LoadFile;
sub Ok;
sub RemoveHandler;
sub SaveFile;
sub SetDepth;
sub SetHeight;
sub SetMask;
sub SetPalette;
sub SetWidth;
sub new;
sub newEmpty;
sub newFile;
sub newFromBits;
sub newFromXPM;
sub newIcon;
sub newImage;
}
package Wx::BitmapButton {
sub Create;
sub GetBitmapDisabled;
sub GetBitmapFocus;
sub GetBitmapHover;
sub GetBitmapLabel;
sub GetBitmapSelected;
sub NewCloseButton;
sub SetBitmapDisabled;
sub SetBitmapFocus;
sub SetBitmapHover;
sub SetBitmapLabel;
sub SetBitmapSelected;
sub new;
sub newDefault;
sub newFull;
}
package Wx::BitmapComboBox {
sub Append;
sub AppendData;
sub AppendString;
sub Create;
sub GetBitmapSize;
sub GetItemBitmap;
sub Insert;
sub InsertData;
sub InsertString;
sub SetItemBitmap;
sub new;
sub newDefault;
sub newFull;
}
package Wx::BitmapDataObject {
sub GetBitmap;
sub SetBitmap;
sub new;
}
package Wx::BookCtrl {
sub AddPage;
sub AdvanceSelection;
sub AssignImageList;
sub CalcSizeFromPage;
sub ChangeSelection;
sub DeleteAllPages;
sub DeletePage;
sub GetControlSizer;
sub GetCurrentPage;
sub GetFitToCurrentPage;
sub GetImageList;
sub GetInternalBorder;
sub GetPage;
sub GetPageCount;
sub GetPageImage;
sub GetPageText;
sub GetSelection;
sub HitTest;
sub InsertPage;
sub IsVertical;
sub RemovePage;
sub SetFitToCurrentPage;
sub SetImageList;
sub SetInternalBorder;
sub SetPageImage;
sub SetPageSize;
sub SetPageText;
sub SetSelection;
}
package Wx::BookCtrlEvent {
sub GetOldSelection;
sub GetSelection;
sub SetOldSelection;
sub SetSelection;
}
package Wx::BoolProperty {
sub DoSetAttribute;
sub GetPlValue;
sub IntToValue;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
}
package Wx::BoxSizer {
sub GetOrientation;
sub IsVertical;
sub SetOrientation;
sub new;
}
package Wx::Brush {
sub CLONE;
sub DESTROY;
sub GetColour;
sub GetStipple;
sub GetStyle;
sub IsHatch;
sub IsOk;
sub Ok;
sub SetColour;
sub SetColourColour;
sub SetColourName;
sub SetColourRGB;
sub SetStipple;
sub SetStyle;
sub new;
sub newBitmap;
sub newColour;
sub newName;
}
package Wx::BufferedDC {
sub GetStyle;
sub Init;
sub InitBitmap;
sub InitSize;
sub SetStyle;
sub UnMask;
sub new;
sub newBitmap;
sub newDefault;
sub newSize;
}
package Wx::BufferedPaintDC {
sub new;
sub newBitmap;
sub newWindow;
}
package Wx::BusyCursor {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::BusyInfo {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::Button {
sub Create;
sub GetAuthNeeded;
sub GetBitmap;
sub GetBitmapCurrent;
sub GetBitmapDisabled;
sub GetBitmapFocus;
sub GetBitmapLabel;
sub GetBitmapMargins;
sub GetBitmapPressed;
sub GetDefaultSize;
sub GetLabel;
sub SetAuthNeeded;
sub SetBitmap;
sub SetBitmapCurrent;
sub SetBitmapDisabled;
sub SetBitmapFocus;
sub SetBitmapLabel;
sub SetBitmapMargins0;
sub SetBitmapMargins1;
sub SetBitmapMargins;
sub SetBitmapPosition;
sub SetBitmapPressed;
sub SetDefault0;
sub SetDefault;
sub SetLabel;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CHMHelpController {
sub new;
}
package Wx::CURHandler {
sub new;
}
package Wx::CalendarCtrl {
sub Create;
sub EnableHolidayDisplay;
sub EnableMonthChange;
sub GetAttr;
sub GetDate;
sub GetHeaderColourBg;
sub GetHeaderColourFg;
sub GetHighlightColourBg;
sub GetHighlightColourFg;
sub GetHolidayColourBg;
sub GetHolidayColourFg;
sub ResetAttr;
sub SetAttr;
sub SetDate;
sub SetDateRange;
sub SetHeaderColours;
sub SetHighlightColours;
sub SetHoliday;
sub SetHolidayColours;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CalendarDateAttr {
sub CLONE;
sub DESTROY;
sub GetBackgroundColour;
sub GetBorder;
sub GetBorderColour;
sub GetFont;
sub GetTextColour;
sub HasBackgroundColour;
sub HasBorder;
sub HasBorderColour;
sub HasFont;
sub HasTextColour;
sub IsHoliday;
sub SetBackgroundColour;
sub SetBorder;
sub SetBorderColour;
sub SetFont;
sub SetHoliday;
sub SetTextColour;
sub new;
}
package Wx::CalendarEvent {
sub GetWeekDay;
}
package Wx::Caret {
sub Create;
sub CreateSize;
sub CreateWH;
sub Destroy;
sub GetBlinkTime;
sub GetPosition;
sub GetPositionXY;
sub GetSize;
sub GetSizeWH;
sub GetWindow;
sub Hide;
sub IsOk;
sub IsVisible;
sub Move;
sub MovePoint;
sub MoveXY;
sub SetBlinkTime;
sub SetSize;
sub SetSizeSize;
sub SetSizeWH;
sub Show;
sub new;
sub newDefault;
sub newSize;
sub newWH;
}
package Wx::CaretSuspend {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::CheckBox {
sub Create;
sub Get3StateValue;
sub GetValue;
sub Is3State;
sub Is3rdStateAllowedForUser;
sub IsChecked;
sub Set3StateValue;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CheckListBox {
sub Check;
sub Create;
sub IsChecked;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ChildFocusEvent {
sub GetWindow;
sub new;
}
package Wx::Choice {
sub Clear;
sub Create;
sub Delete;
sub GetColumns;
sub GetCurrentSelection;
sub SetColumns;
sub SetSelection;
sub SetStringSelection;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Choicebook {
sub Create;
sub GetChoiceCtrl;
sub IsVertical;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ClassInfo {
sub FindClass;
sub GetBaseClassName1;
sub GetBaseClassName2;
sub GetClassName;
sub GetFirst;
sub GetNext;
}
package Wx::Client {
sub Destroy;
sub MakeConnection;
sub OnMakeConnection;
sub ValidHost;
sub new;
}
package Wx::ClientDC {
sub new;
}
package Wx::Clipboard {
sub AddData;
sub Clear;
sub Close;
sub Flush;
sub GetData;
sub IsOpened;
sub IsSupported;
sub IsUsingPrimarySelection;
sub Open;
sub SetData;
sub UsePrimarySelection;
}
package Wx::ClipboardTextEvent {
sub new;
}
package Wx::CloseEvent {
sub CanVeto;
sub GetLoggingOff;
sub SetCanVeto;
sub SetLoggingOff;
sub Veto;
sub new;
}
package Wx::CollapsiblePane {
sub Collapse;
sub Create;
sub Expand;
sub GetPane;
sub IsCollapsed;
sub IsExpanded;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CollapsiblePaneEvent {
sub GetCollapsed;
sub SetCollapsed;
sub new;
}
package Wx::Colour {
sub Alpha;
sub Blue;
sub CLONE;
sub DESTROY;
sub GetAsString;
sub GetPixel;
sub Green;
sub IsOk;
sub Ok;
sub Red;
sub Set;
sub new;
sub newName;
sub newRGB;
sub newRGBA;
}
package Wx::ColourData {
sub CLONE;
sub DESTROY;
sub GetChooseFull;
sub GetColour;
sub GetCustomColour;
sub SetChooseFull;
sub SetColour;
sub SetCustomColour;
sub new;
}
package Wx::ColourDatabase {
sub AddColour;
sub Find;
sub FindName;
}
package Wx::ColourDialog {
sub GetColourData;
sub ShowModal;
sub new;
}
package Wx::ColourPickerCtrl {
sub Create;
sub GetColour;
sub SetColour;
sub SetColourColour;
sub SetColourString;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ColourPickerEvent {
sub GetColour;
sub SetColour;
}
package Wx::ColourProperty {
sub GetColour;
sub GetPlValue;
sub SetPlValue;
sub ValueToString;
sub new;
}
package Wx::ColourPropertyValue {
sub CLONE;
sub DESTROY;
sub GetColour;
sub Init;
sub new;
sub newColour;
sub newCopy;
sub newDefault;
sub newType;
sub newTypeColour;
}
package Wx::ComboBox {
sub AutoComplete;
sub AutoCompleteDirectories;
sub AutoCompleteFileNames;
sub CanCopy;
sub CanCut;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub ChangeValue;
sub Copy;
sub Create;
sub Cut;
sub Dismiss;
sub GetInsertionPoint;
sub GetLastPosition;
sub GetSelection;
sub GetValue;
sub IsListEmpty;
sub IsTextEmpty;
sub Paste;
sub Popup;
sub Redo;
sub Remove;
sub RemoveSelection;
sub Replace;
sub SetEditable;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetMark;
sub SetSelection;
sub SetSelectionN;
sub SetValue;
sub Undo;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ComboCtrl {
sub Copy;
sub Create;
sub Cut;
sub EnablePopupAnimation;
sub GetBitmapDisabled;
sub GetBitmapHover;
sub GetBitmapNormal;
sub GetBitmapPressed;
sub GetButton;
sub GetButtonSize;
sub GetCustomPaintWidth;
sub GetInsertionPoint;
sub GetLastPosition;
sub GetPopupControl;
sub GetPopupWindow;
sub GetTextCtrl;
sub GetTextRect;
sub GetValue;
sub HidePopup;
sub IsPopupShown;
sub Paste;
sub Remove;
sub Replace;
sub SetButtonBitmaps;
sub SetButtonPosition;
sub SetCustomPaintWidth;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetPopupAnchor;
sub SetPopupControl;
sub SetPopupExtents;
sub SetPopupMaxHeight;
sub SetPopupMinWidth;
sub SetSelection;
sub SetText;
sub SetValue;
sub ShowPopup;
sub Undo;
sub UseAltPopupWindow;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ComboPopup {
sub Dismiss;
sub GetAdjustedSize;
sub GetComboCtrl;
sub IsCreated;
sub LazyCreate;
sub OnComboDoubleClick;
sub OnComboKeyEvent;
sub OnDismiss;
sub OnPopup;
sub PaintComboControl;
sub SetStringValue;
sub new;
}
package Wx::Command {
sub CLONE;
sub CanUndo;
sub DESTROY;
sub Destroy;
sub Do;
sub GetName;
sub Undo;
}
package Wx::CommandEvent {
sub GetClientData;
sub GetExtraLong;
sub GetInt;
sub GetSelection;
sub GetString;
sub IsChecked;
sub IsSelection;
sub SetClientData;
sub SetExtraLong;
sub SetInt;
sub SetString;
sub new;
}
package Wx::CommandLinkButton {
sub Create;
sub GetLabel;
sub GetMainLabel;
sub GetNote;
sub SetLabel;
sub SetMainLabel;
sub SetMainLabelAndNote;
sub SetNote;
sub new;
sub newDefault;
sub newFull;
}
package Wx::CommandProcessor {
sub CLONE;
sub CanRedo;
sub CanUndo;
sub ClearCommands;
sub DESTROY;
sub GetCommands;
sub GetCurrentCommand;
sub GetEditMenu;
sub GetMaxCommands;
sub GetRedoAccelerator;
sub GetRedoMenuLabel;
sub GetUndoAccelerator;
sub GetUndoMenuLabel;
sub Initialize;
sub IsDirty;
sub MarkAsSaved;
sub Redo;
sub SetEditMenu;
sub SetMenuStrings;
sub SetRedoAccelerator;
sub SetUndoAccelerator;
sub Store;
sub Submit;
sub Undo;
sub new;
}
package Wx::ConfigBase {
sub Create;
sub DeleteAll;
sub DeleteEntry;
sub DeleteGroup;
sub Destroy;
sub DontCreateOnDemand;
sub Exists;
sub Flush;
sub Get;
sub GetAppName;
sub GetEntryType;
sub GetFirstEntry;
sub GetFirstGroup;
sub GetNextEntry;
sub GetNextGroup;
sub GetNumberOfEntries;
sub GetNumberOfGroups;
sub GetPath;
sub GetVendorName;
sub HasEntry;
sub HasGroup;
sub IsExpandingEnvVars;
sub IsRecordingDefaults;
sub Read;
sub ReadBinary;
sub ReadBool;
sub ReadDouble;
sub ReadInt;
sub ReadLong;
sub RenameEntry;
sub RenameGroup;
sub Set;
sub SetExpandEnvVars;
sub SetPath;
sub SetRecordDefaults;
sub Write;
sub WriteBinary;
sub WriteBool;
sub WriteFloat;
sub WriteInt;
}
package Wx::Connection {
sub Advise;
sub CLONE;
sub DESTROY;
sub Disconnect;
sub Execute;
sub GetConnected;
sub OnAdvise;
sub OnDisconnect;
sub OnExec;
sub OnExecute;
sub OnPoke;
sub OnRequest;
sub OnStartAdvise;
sub OnStopAdvise;
sub Poke;
sub Request;
sub SetConnected;
sub StartAdvise;
sub StopAdvise;
sub new;
sub newBuffer;
sub newDefault;
}
package Wx::ContextHelp {
sub BeginContextHelp;
sub CLONE;
sub DESTROY;
sub EndContextHelp;
sub SetStatus;
sub new;
}
package Wx::ContextHelpButton {
sub new;
}
package Wx::ContextMenuEvent {
sub GetPosition;
sub SetPosition;
sub new;
}
package Wx::Control {
sub Command;
sub GetLabelText;
}
package Wx::ControlWithItems {
sub Append;
sub AppendData;
sub AppendItems;
sub AppendItemsData;
sub AppendString;
sub Clear;
sub Delete;
sub FindString;
sub FindStringCase;
sub FindStringNoCase;
sub GetClientData;
sub GetCount;
sub GetSelection;
sub GetString;
sub GetStringSelection;
sub GetStrings;
sub Insert;
sub InsertData;
sub InsertItems;
sub InsertItemsData;
sub InsertString;
sub IsEmpty;
sub Select;
sub Set;
sub SetClientData;
sub SetItems;
sub SetItemsData;
sub SetSelection;
sub SetString;
sub SetStringSelection;
}
package Wx::Cursor {
sub CLONE;
sub DESTROY;
sub IsOk;
sub Ok;
sub new;
sub newFile;
sub newId;
sub newImage;
}
package Wx::CursorProperty {
sub GetPlValue;
sub OnMeasureImage;
sub SetPlValue;
sub new;
}
package Wx::DC {
sub Blit;
sub CLONE;
sub CalcBoundingBox;
sub Clear;
sub CrossHair;
sub DESTROY;
sub DestroyClippingRegion;
sub DeviceToLogicalX;
sub DeviceToLogicalXRel;
sub DeviceToLogicalY;
sub DeviceToLogicalYRel;
sub DrawArc;
sub DrawBitmap;
sub DrawCheckMark;
sub DrawCheckMarkRect;
sub DrawCheckMarkXYWH;
sub DrawCircle;
sub DrawEllipse;
sub DrawEllipticArc;
sub DrawIcon;
sub DrawLabel;
sub DrawLabelBitmap;
sub DrawLabelNoBitmap;
sub DrawLine;
sub DrawLines;
sub DrawPoint;
sub DrawPolygon;
sub DrawRectangle;
sub DrawRotatedText;
sub DrawRoundedRectangle;
sub DrawSpline;
sub DrawText;
sub EndDoc;
sub EndPage;
sub FloodFill;
sub GetAsBitmap;
sub GetBackground;
sub GetBackgroundMode;
sub GetBrush;
sub GetCharHeight;
sub GetCharWidth;
sub GetClippingBox;
sub GetContentScaleFactor;
sub GetDepth;
sub GetDeviceOrigin;
sub GetFont;
sub GetLayoutDirection;
sub GetLogicalFunction;
sub GetLogicalScale;
sub GetMapMode;
sub GetMultiLineTextExtent;
sub GetPPI;
sub GetPartialTextExtents;
sub GetPen;
sub GetPixel;
sub GetSize;
sub GetSizeMM;
sub GetSizeMMWH;
sub GetSizeWH;
sub GetTextBackground;
sub GetTextExtent;
sub GetTextForeground;
sub GetUserScale;
sub GradientFillConcentric;
sub GradientFillConcentricNoPoint;
sub GradientFillConcentricPoint;
sub GradientFillLinear;
sub IsOk;
sub LogicalToDeviceX;
sub LogicalToDeviceXRel;
sub LogicalToDeviceY;
sub LogicalToDeviceYRel;
sub MaxX;
sub MaxY;
sub MinX;
sub MinY;
sub Ok;
sub ResetBoundingBox;
sub SetAxisOrientation;
sub SetBackground;
sub SetBackgroundMode;
sub SetBrush;
sub SetClippingRegion;
sub SetClippingRegionRegion;
sub SetClippingRegionXYWH;
sub SetDeviceOrigin;
sub SetFont;
sub SetLayoutDirection;
sub SetLogicalFunction;
sub SetLogicalScale;
sub SetMapMode;
sub SetPalette;
sub SetPen;
sub SetTextBackground;
sub SetTextForeground;
sub SetUserScale;
sub StartDoc;
sub StartPage;
sub StretchBlit;
}
package Wx::DCClipper {
sub CLONE;
sub DESTROY;
sub new;
sub newRect;
sub newRegion;
sub newXYWH;
}
package Wx::DCOverlay {
sub CLONE;
sub Clear;
sub DESTROY;
sub new;
sub newDefault;
sub newLong;
}
package Wx::DataFormat {
sub CLONE;
sub DESTROY;
sub GetId;
sub GetType;
sub SetId;
sub SetType;
sub newNative;
sub newUser;
}
package Wx::DataObject {
sub CLONE;
sub DESTROY;
sub Destroy;
sub GetAllFormats;
sub GetDataHere;
sub GetDataSize;
sub GetFormatCount;
sub GetPreferredFormat;
sub IsSupported;
sub SetData;
}
package Wx::DataObjectComposite {
sub Add;
sub GetReceivedFormat;
sub new;
}
package Wx::DataObjectSimple {
sub GetFormat;
sub SetFormat;
sub new;
}
package Wx::DataView {
sub SetEvents;
}
package Wx::DataViewBitmapRenderer {
sub new;
}
package Wx::DataViewColumn {
sub CLONE;
sub DESTROY;
sub GetAlignment;
sub GetBitmap;
sub GetFlags;
sub GetMinWidth;
sub GetModelColumn;
sub GetOwner;
sub GetRenderer;
sub GetTitle;
sub GetWidth;
sub IsHidden;
sub IsReorderable;
sub IsResizeable;
sub IsSortOrderAscending;
sub IsSortable;
sub SetAlignment;
sub SetBitmap;
sub SetFlags;
sub SetHidden;
sub SetMinWidth;
sub SetOwner;
sub SetReorderable;
sub SetResizeable;
sub SetSortOrder;
sub SetSortable;
sub SetTitle;
sub SetWidth;
sub new1;
sub new2;
sub new;
}
package Wx::DataViewCtrl {
sub AppendBitmapColumn;
sub AppendBitmapColumnBitmap;
sub AppendBitmapColumnLabel;
sub AppendColumn;
sub AppendDateColumn;
sub AppendDateColumnBitmap;
sub AppendDateColumnLabel;
sub AppendIconTextColumn;
sub AppendIconTextColumnBitmap;
sub AppendIconTextColumnLabel;
sub AppendProgressColumn;
sub AppendProgressColumnBitmap;
sub AppendProgressColumnLabel;
sub AppendTextColumn;
sub AppendTextColumnBitmap;
sub AppendTextColumnLabel;
sub AppendToggleColumn;
sub AppendToggleColumnBitmap;
sub AppendToggleColumnLabel;
sub AssociateModel;
sub ClearColumns;
sub Collapse;
sub Create;
sub DeleteColumn;
sub EnsureVisible;
sub Expand;
sub GetColumn;
sub GetColumnCount;
sub GetColumnPosition;
sub GetExpanderColumn;
sub GetIndent;
sub GetItemRect;
sub GetModel;
sub GetSelection;
sub IsSelected;
sub PrependColumn;
sub Select;
sub SelectAll;
sub SetExpanderColumn;
sub SetIndent;
sub Unselect;
sub UnselectAll;
sub new;
sub newDefault;
sub newFull;
}
package Wx::DataViewDateRenderer {
sub new;
}
package Wx::DataViewEvent {
sub GetColumn;
sub GetDataViewColumn;
sub GetItem;
sub GetModel;
sub GetValue;
sub SetColumn;
sub SetDataViewColumn;
sub SetItem;
sub SetModel;
sub SetPosition;
sub SetValue;
sub new;
}
package Wx::DataViewIconText {
sub GetIcon;
sub GetText;
sub SetIcon;
sub SetText;
sub new;
}
package Wx::DataViewIconTextRenderer {
sub new;
}
package Wx::DataViewIndexListModel {
sub GetItem;
sub GetRow;
sub GetValueByRow;
sub Reset;
sub RowAppended;
sub RowChanged;
sub RowDeleted;
sub RowInserted;
sub RowPrepended;
sub RowValueChanged;
sub SetValueByRow;
}
package Wx::DataViewItem {
sub GetID;
sub IsOk;
}
package Wx::DataViewItemAttr {
sub GetBackgroundColour;
sub GetBold;
sub GetColour;
sub GetEffectiveFont;
sub GetItalic;
sub HasBackgroundColour;
sub HasColour;
sub HasFont;
sub IsDefault;
sub SetBackgroundColour;
sub SetBold;
sub SetColour;
sub SetItalic;
sub new;
}
package Wx::DataViewListCtrl {
sub AppendColumn0;
sub AppendColumn1;
sub AppendColumn;
sub AppendIconTextColumn;
sub AppendItem0;
sub AppendItem;
sub AppendProgressColumn;
sub AppendTextColumn;
sub AppendToggleColumn;
sub Create;
sub DeleteAllItems;
sub DeleteItem;
sub GetStore;
sub GetTextValue;
sub GetToggleValue;
sub GetValue;
sub InsertColumn0;
sub InsertColumn1;
sub InsertColumn;
sub InsertItem0;
sub InsertItem;
sub PrependColumn0;
sub PrependColumn1;
sub PrependColumn;
sub PrependItem0;
sub PrependItem;
sub SetTextValue;
sub SetToggleValue;
sub SetValue;
sub new;
sub wxDataViewListCtrl0;
sub wxDataViewListCtrl1;
}
package Wx::DataViewListStore {
sub AppendColumn;
sub AppendItem0;
sub AppendItem;
sub DeleteAllItems;
sub DeleteItem;
sub GetColumnCount;
sub GetColumnType;
sub GetValueByRow;
sub InsertColumn;
sub InsertItem0;
sub InsertItem;
sub PrependColumn;
sub PrependItem0;
sub PrependItem;
sub SetValueByRow;
sub new;
}
package Wx::DataViewModel {
sub Cleared;
sub DESTROY;
sub GetColumnCount;
sub GetColumnType;
sub GetParent;
sub HasContainerColumns;
sub HasDefaultCompare;
sub IsContainer;
sub ItemAdded;
sub ItemChanged;
sub ItemDeleted;
sub Resort;
sub SetValue;
sub ValueChanged;
}
package Wx::DataViewModelNotifier {
sub DESTROY;
sub GetOwner;
}
package Wx::DataViewProgressRenderer {
sub new;
}
package Wx::DataViewRenderer {
sub CLONE;
sub DESTROY;
sub GetMode;
sub GetOwner;
sub GetVariantType;
sub SetMode;
}
package Wx::DataViewSpinRenderer {
sub new;
}
package Wx::DataViewTextRenderer {
sub new;
}
package Wx::DataViewTextRendererAttr {
sub new;
}
package Wx::DataViewToggleRenderer {
sub new;
}
package Wx::DataViewTreeCtrl {
sub AppendContainer;
sub AppendItem;
sub Create;
sub DeleteAllItems;
sub DeleteChildren;
sub DeleteItem;
sub GetChildCount;
sub GetImageList;
sub GetItemData;
sub GetItemExpandedIcon;
sub GetItemIcon;
sub GetItemText;
sub GetNthChild;
sub GetStore;
sub InsertContainer;
sub InsertItem;
sub PrependContainer;
sub PrependItem;
sub SetImageList;
sub SetItemData;
sub SetItemExpandedIcon;
sub SetItemIcon;
sub SetItemText;
sub new;
sub newDefault;
sub newFull;
}
package Wx::DataViewTreeStore {
sub AppendContainer;
sub AppendItem;
sub DeleteAllItems;
sub DeleteChildren;
sub DeleteItem;
sub GetChildCount;
sub GetItemData;
sub GetItemExpandedIcon;
sub GetItemIcon;
sub GetItemText;
sub GetNthChild;
sub InsertContainer;
sub InsertItem;
sub PrependContainer;
sub PrependItem;
sub SetItemData;
sub SetItemExpandedIcon;
sub SetItemIcon;
sub SetItemText;
sub new;
}
package Wx::DataViewVirtualListModel {
sub GetColumnCount;
sub GetColumnType;
sub GetCount;
sub GetValueByRow;
sub SetValueByRow;
}
package Wx::DatagramSocket {
sub RecvFrom;
sub SendTo;
sub new;
}
package Wx::DateEvent {
sub GetDate;
sub SetDate;
}
package Wx::DatePickerCtrl {
sub Create;
sub GetRange;
sub GetValue;
sub SetRange;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::DateProperty {
sub DoSetAttribute;
sub GetDatePickerStyle;
sub GetDateValue;
sub GetFormat;
sub GetPlValue;
sub OnSetValue;
sub SetDateValue;
sub SetFormat;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
}
package Wx::DateSpan {
sub Add;
sub GetDays;
sub GetMonths;
sub GetTotalDays;
sub GetWeeks;
sub GetYears;
sub Multiply;
sub Neg;
sub SetDays;
sub SetMonths;
sub SetWeeks;
sub SetYears;
sub Subtract;
sub new;
}
package Wx::DateTime {
sub AddDate;
sub AddTime;
sub CLONE;
sub DESTROY;
sub Format;
sub FormatDate;
sub FormatISODate;
sub FormatISOTime;
sub FormatTime;
sub GetAmPmStrings;
sub GetCentury;
sub GetCurrentMonth;
sub GetCurrentYear;
sub GetDay;
sub GetDayOfYear;
sub GetHour;
sub GetMillisecond;
sub GetMinute;
sub GetMonth;
sub GetMonthName;
sub GetNumberOfDaysInMonth;
sub GetNumberOfDaysInYear;
sub GetSecond;
sub GetWeekDay;
sub GetWeekDayName;
sub GetWeekOfMonth;
sub GetWeekOfYear;
sub GetYear;
sub IsBetween;
sub IsEarlierThan;
sub IsEqualTo;
sub IsLaterThan;
sub IsLeapYear;
sub IsSameDate;
sub IsSameTime;
sub IsStrictlyBetween;
sub IsValid;
sub Now;
sub ResetTime;
sub Set;
sub SetDay;
sub SetHMS;
sub SetHour;
sub SetJDN;
sub SetMillisecond;
sub SetMinute;
sub SetMonth;
sub SetSecond;
sub SetTimeT;
sub SetToCurrent;
sub SetYear;
sub Today;
sub UNow;
sub new;
sub newFromDMY;
sub newFromTimeT;
}
package Wx::Dialog {
sub AddMainButtonId;
sub CanDoLayoutAdaptation;
sub Create;
sub CreateButtonSizer;
sub CreateSeparatedButtonSizer;
sub CreateStdDialogButtonSizer;
sub CreateTextSizer;
sub EnableLayoutAdaptation;
sub EndModal;
sub GetAffirmativeId;
sub GetContentWindow;
sub GetEscapeId;
sub GetLayoutAdaptationDone;
sub GetLayoutAdaptationLevel;
sub GetLayoutAdaptationMode;
sub GetMainButtonIds;
sub GetReturnCode;
sub GetTitle;
sub IsLayoutAdaptationEnabled;
sub IsMainButtonId;
sub IsModal;
sub SetAffirmativeId;
sub SetEscapeId;
sub SetFocusIgnoringChildren;
sub SetIcon;
sub SetIcons;
sub SetLayoutAdaptationDone;
sub SetLayoutAdaptationLevel;
sub SetLayoutAdaptationMode;
sub SetReturnCode;
sub SetTitle;
sub ShowModal;
sub TransferDataFromWindow;
sub TransferDataToWindow;
sub Validate;
sub new;
sub newDefault;
sub newFull;
}
package Wx::DirDialog {
sub GetMessage;
sub GetPath;
sub SetMessage;
sub SetPath;
sub ShowModal;
sub new;
}
package Wx::DirPickerCtrl {
sub Create;
sub GetPath;
sub SetPath;
sub new;
sub newDefault;
sub newFull;
}
package Wx::DirProperty {
sub DoGetValidator;
sub DoSetAttribute;
sub GetPlValue;
sub OnButtonClick;
sub SetPlValue;
sub new;
}
package Wx::Display {
sub CLONE;
sub ChangeMode;
sub DESTROY;
sub GetClientArea;
sub GetCount;
sub GetCurrentMode;
sub GetFromPoint;
sub GetFromWindow;
sub GetGeometry;
sub GetModes;
sub GetName;
sub IsOk;
sub IsPrimary;
sub ResetMode;
sub new;
}
package Wx::DocChildFrame {
sub Destroy;
sub GetDocument;
sub GetView;
sub SetDocument;
sub SetView;
sub new;
}
package Wx::DocMDIChildFrame {
sub Destroy;
sub GetDocument;
sub GetView;
sub SetDocument;
sub SetView;
sub new;
}
package Wx::DocMDIParentFrame {
sub GetDocumentManager;
sub new;
}
package Wx::DocManager {
sub ActivateView;
sub AddDocument;
sub AddFileToHistory;
sub AssociateTemplate;
sub Clear;
sub CloseDocuments;
sub CreateDocument;
sub CreateView;
sub DeleteTemplate;
sub DisassociateTemplate;
sub FileHistoryAddFilesToMenu;
sub FileHistoryLoad;
sub FileHistoryRemoveMenu;
sub FileHistorySave;
sub FileHistoryUseMenu;
sub FindTemplateForPath;
sub FlushDoc;
sub GetCurrentDocument;
sub GetCurrentView;
sub GetDocuments;
sub GetFileHistory;
sub GetHistoryFile;
sub GetHistoryFilesCount;
sub GetLastDirectory;
sub GetMaxDocsOpen;
sub GetTemplates;
sub Initialize;
sub MakeFrameTitle;
sub MakeNewDocumentName;
sub MatchTemplate;
sub OnCreateFileHistory;
sub OnFileClose;
sub OnFileCloseAll;
sub OnFileNew;
sub OnFileOpen;
sub OnFileRevert;
sub OnFileSave;
sub OnFileSaveAs;
sub OnPreview;
sub OnPrint;
sub OnRedo;
sub OnUndo;
sub OnUpdateFileNew;
sub OnUpdateFileOpen;
sub OnUpdateFileSave;
sub OnUpdateRedo;
sub OnUpdateUndo;
sub RemoveDocument;
sub RemoveFileFromHistory;
sub SelectDocumentPath;
sub SelectDocumentType;
sub SelectViewType;
sub SetLastDirectory;
sub SetMaxDocsOpen;
sub new;
}
package Wx::DocParentFrame {
sub GetDocumentManager;
sub new;
}
package Wx::DocTemplate {
sub CreateDocument;
sub CreateView;
sub FileMatchesTemplate;
sub GetDefaultExtension;
sub GetDescription;
sub GetDirectory;
sub GetDocumentManager;
sub GetDocumentName;
sub GetFileFilter;
sub GetFlags;
sub GetViewName;
sub IsVisible;
sub SetDefaultExtension;
sub SetDescription;
sub SetDirectory;
sub SetDocumentManager;
sub SetFileFilter;
sub SetFlags;
sub new;
}
package Wx::Document {
sub AddView;
sub Close;
sub DeleteAllViews;
sub DeleteContents;
sub GetDocumentManager;
sub GetDocumentName;
sub GetDocumentSaved;
sub GetDocumentTemplate;
sub GetDocumentWindow;
sub GetFilename;
sub GetFirstView;
sub GetTitle;
sub GetUserReadableName;
sub GetViews;
sub IsModified;
sub Modify;
sub NotifyClosing;
sub OnChangedViewList;
sub OnCloseDocument;
sub OnCreate;
sub OnCreateCommandProcessor;
sub OnNewDocument;
sub OnOpenDocument;
sub OnSaveDocument;
sub OnSaveModified;
sub RemoveView;
sub Revert;
sub Save;
sub SaveAs;
sub SetCommandProcessor;
sub SetDocumentName;
sub SetDocumentSaved;
sub SetDocumentTemplate;
sub SetFilename;
sub SetTitle;
sub UpdateAllViews;
sub new;
}
package Wx::DropFilesEvent {
sub GetFiles;
sub GetNumberOfFiles;
sub GetPosition;
}
package Wx::DropSource {
sub DoDragDrop;
sub GetDataObject;
sub SetCursor;
sub SetData;
sub newCursorData;
sub newCursorEmpty;
}
package Wx::DropTarget {
sub CLONE;
sub DESTROY;
sub GetData;
sub OnDragOver;
sub OnDrop;
sub OnEnter;
sub OnLeave;
sub SetDataObject;
sub new;
}
package Wx::EditEnumProperty {
sub GetPlValue;
sub SetPlValue;
sub new;
sub newArrays;
sub newChoices;
}
package Wx::EditableListBox {
sub Create;
sub GetDelButton;
sub GetDownButton;
sub GetEditButton;
sub GetListCtrl;
sub GetNewButton;
sub GetStrings;
sub GetUpButton;
sub SetStrings;
sub new;
sub newDefault;
sub newFull;
}
package Wx::EnumProperty {
sub GetChoiceSelection;
sub GetIndexForValue;
sub GetItemCount;
sub GetPlValue;
sub IntToValue;
sub OnSetValue;
sub OnValidationFailure;
sub SetPlValue;
sub StringToValue;
sub ValidateValue;
sub ValueToString;
sub new;
sub newArrays;
sub newChoices;
}
package Wx::EraseEvent {
sub GetDC;
sub new;
}
package Wx::Event {
sub CLONE;
sub DESTROY;
sub EVT_AUINOTEBOOK_ALLOW_DND($$$) ;
sub EVT_AUINOTEBOOK_BEGIN_DRAG($$$) ;
sub EVT_AUINOTEBOOK_BG_DCLICK($$$) ;
sub EVT_AUINOTEBOOK_BUTTON($$$) ;
sub EVT_AUINOTEBOOK_DRAG_DONE($$$) ;
sub EVT_AUINOTEBOOK_DRAG_MOTION($$$) ;
sub EVT_AUINOTEBOOK_END_DRAG($$$) ;
sub EVT_AUINOTEBOOK_PAGE_CHANGED($$$) ;
sub EVT_AUINOTEBOOK_PAGE_CHANGING($$$) ;
sub EVT_AUINOTEBOOK_PAGE_CLOSE($$$) ;
sub EVT_AUINOTEBOOK_PAGE_CLOSED($$$) ;
sub EVT_AUINOTEBOOK_TAB_MIDDLE_DOWN($$$) ;
sub EVT_AUINOTEBOOK_TAB_MIDDLE_UP($$$) ;
sub EVT_AUINOTEBOOK_TAB_RIGHT_DOWN($$$) ;
sub EVT_AUINOTEBOOK_TAB_RIGHT_UP($$$) ;
sub EVT_AUI_PANE_ACTIVATED($$) ;
sub EVT_AUI_PANE_BUTTON($$) ;
sub EVT_AUI_PANE_CLOSE($$) ;
sub EVT_AUI_PANE_MAXIMIZE($$) ;
sub EVT_AUI_PANE_RESTORE($$) ;
sub EVT_AUI_RENDER($$) ;
sub EVT_AUX1_DCLICK($$) ;
sub EVT_AUX1_DOWN($$) ;
sub EVT_AUX1_UP($$) ;
sub EVT_AUX2_DCLICK($$) ;
sub EVT_AUX2_DOWN($$) ;
sub EVT_AUX2_UP($$) ;
sub EVT_CHILD_FOCUS($$) ;
sub EVT_COLLAPSIBLEPANE_CHANGED($$$) ;
sub EVT_COLOURPICKER_CHANGED($$$) ;
sub EVT_COMMAND($$$$) ;
sub EVT_CREATE($$$) ;
sub EVT_DESTROY($$$) ;
sub EVT_DIRPICKER_CHANGED($$$) ;
sub EVT_FILECTRL_FILEACTIVATED($$$) ;
sub EVT_FILECTRL_FOLDERCHANGED($$$) ;
sub EVT_FILECTRL_SELECTIONCHANGED($$$) ;
sub EVT_FILEPICKER_CHANGED($$$) ;
sub EVT_FONTPICKER_CHANGED($$$) ;
sub EVT_GRID_CELL_BEGIN_DRAG($$) ;
sub EVT_GRID_CELL_CHANGE($$) ;
sub EVT_GRID_CELL_CHANGED($$) ;
sub EVT_GRID_CELL_CHANGING($$) ;
sub EVT_GRID_CELL_LEFT_CLICK($$) ;
sub EVT_GRID_CELL_LEFT_DCLICK($$) ;
sub EVT_GRID_CELL_RIGHT_CLICK($$) ;
sub EVT_GRID_CELL_RIGHT_DCLICK($$) ;
sub EVT_GRID_CMD_CELL_BEGIN_DRAG($$$) ;
sub EVT_GRID_CMD_CELL_CHANGE($$$) ;
sub EVT_GRID_CMD_CELL_CHANGED($$$) ;
sub EVT_GRID_CMD_CELL_CHANGING($$$) ;
sub EVT_GRID_CMD_CELL_LEFT_CLICK($$$) ;
sub EVT_GRID_CMD_CELL_LEFT_DCLICK($$$) ;
sub EVT_GRID_CMD_CELL_RIGHT_CLICK($$$) ;
sub EVT_GRID_CMD_CELL_RIGHT_DCLICK($$$) ;
sub EVT_GRID_CMD_COL_SIZE($$$) ;
sub EVT_GRID_CMD_EDITOR_CREATED($$$) ;
sub EVT_GRID_CMD_EDITOR_HIDDEN($$$) ;
sub EVT_GRID_CMD_EDITOR_SHOWN($$$) ;
sub EVT_GRID_CMD_LABEL_LEFT_CLICK($$$) ;
sub EVT_GRID_CMD_LABEL_LEFT_DCLICK($$$) ;
sub EVT_GRID_CMD_LABEL_RIGHT_CLICK($$$) ;
sub EVT_GRID_CMD_LABEL_RIGHT_DCLICK($$$) ;
sub EVT_GRID_CMD_RANGE_SELECT($$$) ;
sub EVT_GRID_CMD_ROW_SIZE($$$) ;
sub EVT_GRID_CMD_SELECT_CELL($$$) ;
sub EVT_GRID_COL_SIZE($$) ;
sub EVT_GRID_EDITOR_CREATED($$) ;
sub EVT_GRID_EDITOR_HIDDEN($$) ;
sub EVT_GRID_EDITOR_SHOWN($$) ;
sub EVT_GRID_LABEL_LEFT_CLICK($$) ;
sub EVT_GRID_LABEL_LEFT_DCLICK($$) ;
sub EVT_GRID_LABEL_RIGHT_CLICK($$) ;
sub EVT_GRID_LABEL_RIGHT_DCLICK($$) ;
sub EVT_GRID_RANGE_SELECT($$) ;
sub EVT_GRID_ROW_SIZE($$) ;
sub EVT_GRID_SELECT_CELL($$) ;
sub EVT_HEADER_BEGIN_REORDER($$$) ;
sub EVT_HEADER_BEGIN_RESIZE($$$) ;
sub EVT_HEADER_CLICK($$$) ;
sub EVT_HEADER_DCLICK($$$) ;
sub EVT_HEADER_DRAGGING_CANCELLED($$$) ;
sub EVT_HEADER_END_REORDER($$$) ;
sub EVT_HEADER_END_RESIZE($$$) ;
sub EVT_HEADER_MIDDLE_CLICK($$$) ;
sub EVT_HEADER_MIDDLE_DCLICK($$$) ;
sub EVT_HEADER_RESIZING($$$) ;
sub EVT_HEADER_RIGHT_CLICK($$$) ;
sub EVT_HEADER_RIGHT_DCLICK($$$) ;
sub EVT_HEADER_SEPARATOR_DCLICK($$$) ;
sub EVT_HYPERLINK($$$) ;
sub EVT_ICONIZE($$) ;
sub EVT_LEFT_DCLICK($$) ;
sub EVT_LEFT_DOWN($$) ;
sub EVT_LEFT_UP($$) ;
sub EVT_MAXIMIZE($$) ;
sub EVT_MENU_HIGHLIGHT_ALL($$) ;
sub EVT_MIDDLE_DCLICK($$) ;
sub EVT_MIDDLE_DOWN($$) ;
sub EVT_MIDDLE_UP($$) ;
sub EVT_MOUSE_CAPTURE_CHANGED($$) ;
sub EVT_MOUSE_CAPTURE_LOST($$) ;
sub EVT_MOVE_END($$) ;
sub EVT_MOVE_START($$) ;
sub EVT_PG_CHANGED($$$) ;
sub EVT_PG_CHANGING($$$) ;
sub EVT_PG_COL_BEGIN_DRAG($$$) ;
sub EVT_PG_COL_DRAGGING($$$) ;
sub EVT_PG_COL_END_DRAG($$$) ;
sub EVT_PG_DOUBLE_CLICK($$$) ;
sub EVT_PG_HIGHLIGHTED($$$) ;
sub EVT_PG_ITEM_COLLAPSED($$$) ;
sub EVT_PG_ITEM_EXPANDED($$$) ;
sub EVT_PG_LABEL_EDIT_BEGIN($$$) ;
sub EVT_PG_LABEL_EDIT_ENDING($$$) ;
sub EVT_PG_PAGE_CHANGED($$$) ;
sub EVT_PG_RIGHT_CLICK($$$) ;
sub EVT_PG_SELECTED($$$) ;
sub EVT_RIBBONBAR_PAGE_CHANGED($$$) ;
sub EVT_RIBBONBAR_PAGE_CHANGING($$$) ;
sub EVT_RIBBONBAR_TAB_LEFT_DCLICK($$$) ;
sub EVT_RIBBONBAR_TAB_MIDDLE_DOWN($$$) ;
sub EVT_RIBBONBAR_TAB_MIDDLE_UP($$$) ;
sub EVT_RIBBONBAR_TAB_RIGHT_DOWN($$$) ;
sub EVT_RIBBONBAR_TAB_RIGHT_UP($$$) ;
sub EVT_RIBBONBUTTONBAR_CLICKED($$$) ;
sub EVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED($$$) ;
sub EVT_RIBBONGALLERY_CLICKED($$$) ;
sub EVT_RIBBONGALLERY_HOVER_CHANGED($$$) ;
sub EVT_RIBBONGALLERY_SELECTED($$$) ;
sub EVT_RIBBONTOOLBAR_CLICKED($$$) ;
sub EVT_RIBBONTOOLBAR_DROPDOWN_CLICKED($$$) ;
sub EVT_RICHTEXT_CHARACTER($$$) ;
sub EVT_RICHTEXT_CONTENT_DELETED($$$) ;
sub EVT_RICHTEXT_CONTENT_INSERTED($$$) ;
sub EVT_RICHTEXT_DELETE($$$) ;
sub EVT_RICHTEXT_LEFT_CLICK($$$) ;
sub EVT_RICHTEXT_LEFT_DCLICK($$$) ;
sub EVT_RICHTEXT_MIDDLE_CLICK($$$) ;
sub EVT_RICHTEXT_RETURN($$$) ;
sub EVT_RICHTEXT_RIGHT_CLICK($$$) ;
sub EVT_RICHTEXT_STYLESHEET_CHANGED($$$) ;
sub EVT_RICHTEXT_STYLESHEET_CHANGING($$$) ;
sub EVT_RICHTEXT_STYLESHEET_REPLACED($$$) ;
sub EVT_RICHTEXT_STYLESHEET_REPLACING($$$) ;
sub EVT_RICHTEXT_STYLE_CHANGED($$$) ;
sub EVT_RIGHT_DCLICK($$) ;
sub EVT_RIGHT_DOWN($$) ;
sub EVT_RIGHT_UP($$) ;
sub EVT_SEARCHCTRL_CANCEL_BTN($$$) ;
sub EVT_SEARCHCTRL_SEARCH_BTN($$$) ;
sub EVT_SET_CURSOR($$) ;
sub EVT_TASKBAR_CLICK($$) ;
sub EVT_TASKBAR_LEFT_DCLICK($$) ;
sub EVT_TASKBAR_LEFT_DOWN($$) ;
sub EVT_TASKBAR_LEFT_UP($$) ;
sub EVT_TASKBAR_MOVE($$) ;
sub EVT_TASKBAR_RIGHT_DCLICK($$) ;
sub EVT_TASKBAR_RIGHT_DOWN($$) ;
sub EVT_TASKBAR_RIGHT_UP($$) ;
sub EVT_TIMER($$$) ;
sub EVT_TREELIST_COLUMN_SORTED($$$) ;
sub EVT_TREELIST_ITEM_ACTIVATED($$$) ;
sub EVT_TREELIST_ITEM_CHECKED($$$) ;
sub EVT_TREELIST_ITEM_CONTEXT_MENU($$$) ;
sub EVT_TREELIST_ITEM_EXPANDED($$$) ;
sub EVT_TREELIST_ITEM_EXPANDING($$$) ;
sub EVT_TREELIST_SELECTION_CHANGED($$$) ;
sub EVT_TREE_ITEM_GETTOOLTIP($$$) ;
sub EVT_TREE_STATE_IMAGE_CLICK($$$) ;
sub EVT_WEBVIEW_ERROR($$$) ;
sub EVT_WEBVIEW_LOADED($$$) ;
sub EVT_WEBVIEW_NAVIGATED($$$) ;
sub EVT_WEBVIEW_NAVIGATING($$$) ;
sub EVT_WEBVIEW_NEWWINDOW($$$) ;
sub EVT_WEBVIEW_TITLE_CHANGED($$$) ;
sub EVT_WINDOW_CREATE($$$) ;
sub EVT_WINDOW_DESTROY($$$) ;
sub EVT_WIZARD_CANCEL($$$) ;
sub EVT_WIZARD_FINISHED($$$) ;
sub EVT_WIZARD_HELP($$$) ;
sub EVT_WIZARD_PAGE_CHANGED($$$) ;
sub EVT_WIZARD_PAGE_CHANGING($$$) ;
sub GetEventObject;
sub GetEventType;
sub GetId;
sub GetSkipped;
sub GetTimestamp;
sub ResumePropagation;
sub SetEventObject;
sub SetEventType;
sub SetId;
sub SetTimestamp;
sub ShouldPropagate;
sub Skip;
sub StopPropagation;
}
package Wx::EventBlocker {
sub Block;
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::EventFilter {
sub CLONE;
sub Destroy;
sub FilterEvent;
}
package Wx::EvtHandler {
sub AddFilter;
sub AddPendingEvent;
sub Connect;
sub Destroy;
sub Disconnect;
sub GetEvtHandlerEnabled;
sub GetNextHandler;
sub GetPreviousHandler;
sub ProcessEvent;
sub ProcessEventLocally;
sub RemoveFilter;
sub SafelyProcessEvent;
sub SetEvtHandlerEnabled;
sub SetNextHandler;
sub SetPreviousHandler;
sub new;
}
package Wx::FSFile {
sub CLONE;
sub DESTROY;
sub GetAnchor;
sub GetLocation;
sub GetMimeType;
sub GetStream;
sub new;
}
package Wx::FileConfig {
sub SetUmask;
sub new;
}
package Wx::FileCtrl {
sub Create;
sub GetDirectory;
sub GetFilename;
sub GetFilenames;
sub GetFilterIndex;
sub GetPath;
sub GetPaths;
sub GetWildcard;
sub HasMultipleFileSelection;
sub SetDirectory;
sub SetFilename;
sub SetFilterIndex;
sub SetPath;
sub SetWildcard;
sub ShowHidden;
sub new;
sub newDefault;
sub newFull;
}
package Wx::FileCtrlEvent {
sub GetDirectory;
sub GetFile;
sub GetFiles;
sub SetDirectory;
sub SetFiles;
}
package Wx::FileDataObject {
sub AddFile;
sub GetFilenames;
sub new;
}
package Wx::FileDialog {
sub GetDirectory;
sub GetFilename;
sub GetFilenames;
sub GetFilterIndex;
sub GetMessage;
sub GetPath;
sub GetPaths;
sub GetWildcard;
sub SetDirectory;
sub SetFilename;
sub SetFilterIndex;
sub SetMessage;
sub SetPath;
sub SetWildcard;
sub ShowModal;
sub new;
}
package Wx::FileDirPickerEvent {
sub GetPath;
sub SetPath;
}
package Wx::FileDropTarget {
sub new;
}
package Wx::FileHistory {
sub AddFileToHistory;
sub AddFilesToMenu;
sub GetBaseId;
sub GetCount;
sub GetHistoryFile;
sub GetMaxFiles;
sub GetMenus;
sub Load;
sub RemoveFileFromHistory;
sub RemoveMenu;
sub Save;
sub SetBaseId;
sub UseMenu;
sub new;
}
package Wx::FilePickerCtrl {
sub Create;
sub GetPath;
sub SetPath;
sub new;
sub newDefault;
sub newFull;
}
package Wx::FileProperty {
sub DoGetValidator;
sub DoSetAttribute;
sub GetClassValidator;
sub GetEditorDialog;
sub GetFileName;
sub GetPlValue;
sub OnSetValue;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
}
package Wx::FileSystem {
sub AddHandler;
sub CLONE;
sub ChangePathTo;
sub DESTROY;
sub FindFileInPath;
sub FindFirst;
sub FindNext;
sub GetPath;
sub HasHandlerForPath;
sub OpenFile;
sub new;
}
package Wx::FileType {
sub GetDescription;
sub GetExtensions;
sub GetIcon;
sub GetMimeType;
sub GetMimeTypes;
sub GetOpenCommand;
sub GetPrintCommand;
}
package Wx::FileTypeInfo {
sub GetDescription;
sub GetExtensions;
sub GetExtensionsCount;
sub GetIconFile;
sub GetIconIndex;
sub GetMimeType;
sub GetOpenCommand;
sub GetPrintCommand;
sub GetShortDesc;
sub IsValid;
sub SetIcon;
sub SetShortDesc;
sub new;
}
package Wx::FindDialogEvent {
sub GetDialog;
sub GetFindString;
sub GetFlags;
sub GetReplaceString;
}
package Wx::FindReplaceData {
sub CLONE;
sub DESTROY;
sub GetFindString;
sub GetFlags;
sub GetReplaceString;
sub SetFindString;
sub SetFlags;
sub SetReplaceString;
sub new;
}
package Wx::FindReplaceDialog {
sub Create;
sub GetData;
sub SetData;
sub new;
sub newDefault;
sub newFull;
}
package Wx::FlagsProperty {
sub ChildChanged;
sub DoSetAttribute;
sub GetChoiceSelection;
sub GetItemCount;
sub GetLabel;
sub GetPlValue;
sub OnSetValue;
sub RefreshChildren;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
sub newArrays;
sub newChoices;
}
package Wx::FlexGridSizer {
sub AddGrowableCol0;
sub AddGrowableCol;
sub AddGrowableRow0;
sub AddGrowableRow;
sub GetFlexibleDirection;
sub GetNonFlexibleGrowMode;
sub RemoveGrowableCol;
sub RemoveGrowableRow;
sub SetFlexibleDirection;
sub SetNonFlexibleGrowMode;
sub new;
}
package Wx::FloatProperty {
sub DoGetValidator;
sub DoSetAttribute;
sub GetClassValidator;
sub GetPlValue;
sub SetPlValue;
sub StringToValue;
sub ValidateValue;
sub ValueToString;
sub new;
}
package Wx::FocusEvent {
sub GetWindow;
sub new;
}
package Wx::Font {
sub CLONE;
sub DESTROY;
sub GetDefaultEncoding;
sub GetEncoding;
sub GetFaceName;
sub GetFamily;
sub GetFamilyString;
sub GetNativeFontInfo;
sub GetNativeFontInfoDesc;
sub GetNativeFontInfoUserDesc;
sub GetPixelSize;
sub GetPointSize;
sub GetStyle;
sub GetStyleString;
sub GetUnderlined;
sub GetWeight;
sub GetWeightString;
sub IsFixedWidth;
sub IsOk;
sub IsUsingSizeInPixels;
sub New;
sub NewPoint;
sub NewPointFlags;
sub NewPointFlagsStatic;
sub NewPointStatic;
sub NewSize;
sub NewSizeFlags;
sub NewSizeFlagsStatic;
sub NewSizeStatic;
sub Ok;
sub SetDefaultEncoding;
sub SetEncoding;
sub SetFaceName;
sub SetFamily;
sub SetNativeFontInfo;
sub SetNativeFontInfoUserDesc;
sub SetPixelSize;
sub SetPointSize;
sub SetStyle;
sub SetUnderlined;
sub SetWeight;
sub font_spaceship;
sub new;
sub newFont;
sub newLong;
sub newNativeInfo;
sub newSize;
}
package Wx::FontData {
sub CLONE;
sub DESTROY;
sub EnableEffects;
sub GetAllowSymbols;
sub GetChosenFont;
sub GetColour;
sub GetEnableEffects;
sub GetInitialFont;
sub GetShowHelp;
sub SetAllowSymbols;
sub SetChosenFont;
sub SetColour;
sub SetInitialFont;
sub SetRange;
sub SetShowHelp;
sub new;
}
package Wx::FontDialog {
sub GetFontData;
sub new;
}
package Wx::FontEnumerator {
sub CLONE;
sub EnumerateEncodings;
sub EnumerateFacenames;
sub GetEncodings;
sub GetEncodingsMethod;
sub GetEncodingsStatic;
sub GetFacenames;
sub GetFacenamesMethod;
sub GetFacenamesStatic;
sub IsValidFacename;
sub OnFacename;
sub OnFontEncoding;
sub new;
}
package Wx::FontMapper {
sub CharsetToEncoding;
sub Get;
sub GetAllEncodingNames;
sub GetAltForEncoding;
sub GetEncoding;
sub GetEncodingDescription;
sub GetEncodingFromName;
sub GetEncodingName;
sub GetSupportedEncodingsCount;
sub IsEncodingAvailable;
sub SetConfigPath;
sub SetDialogParent;
sub SetDialogTitle;
}
package Wx::FontPickerCtrl {
sub Create;
sub GetMaxPointSize;
sub GetSelectedFont;
sub SetMaxPointSize;
sub SetSelectedFont;
sub new;
sub newDefault;
sub newFull;
}
package Wx::FontPickerEvent {
sub GetFont;
sub SetFont;
}
package Wx::FontProperty {
sub ChildChanged;
sub GetPlValue;
sub OnEvent;
sub OnSetValue;
sub RefreshChildren;
sub SetPlValue;
sub ValueToString;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Frame {
sub Create;
sub CreateStatusBar;
sub CreateToolBar;
sub GetClientAreaOrigin;
sub GetMenuBar;
sub GetStatusBar;
sub GetStatusBarPane;
sub GetTitle;
sub GetToolBar;
sub OnCreateStatusBar;
sub ProcessCommand;
sub SendSizeEvent;
sub SetIcon;
sub SetIcons;
sub SetMenuBar;
sub SetStatusBar;
sub SetStatusBarPane;
sub SetStatusText;
sub SetStatusWidths;
sub SetTitle;
sub SetToolBar;
sub new;
sub newDefault;
sub newFull;
}
package Wx::GBPosition {
sub GetCol;
sub GetRow;
sub SetCol;
sub SetRow;
sub new;
}
package Wx::GBSizerItem {
sub GetEndPos;
sub GetGBSizer;
sub GetPos;
sub GetPosXY;
sub GetSpan;
sub GetSpanWH;
sub Intersects;
sub IntersectsItem;
sub IntersectsPosition;
sub SetGBSizer;
sub SetPos;
sub SetSpan;
}
package Wx::GBSpan {
sub GetColspan;
sub GetRowspan;
sub SetColspan;
sub SetRowspan;
sub new;
}
package Wx::GCDC {
sub GetGraphicsContext;
sub SetGraphicsContext;
sub new;
sub newMemoryDC;
sub newWindowDC;
}
package Wx::GIFHandler {
sub new;
}
package Wx::Gauge {
sub Create;
sub GetBezelFace;
sub GetRange;
sub GetShadowWidth;
sub GetValue;
sub IsVertical;
sub Pulse;
sub SetBezelFace;
sub SetRange;
sub SetShadowWidth;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::GenericDirCtrl {
sub CollapsePath;
sub CollapseTree;
sub Create;
sub ExpandPath;
sub GetDefaultPath;
sub GetFilePath;
sub GetFilter;
sub GetFilterIndex;
sub GetFilterListCtrl;
sub GetPath;
sub GetRootId;
sub GetShowHidden;
sub GetTreeCtrl;
sub ReCreateTree;
sub SetDefaultPath;
sub SetFilter;
sub SetFilterIndex;
sub SetPath;
sub ShowHidden;
sub new;
sub newDefault;
sub newFull;
}
package Wx::GraphicsContext {
sub CLONE;
sub Clip;
sub ClipRegion;
sub ClipXYWH;
sub ConcatTransform;
sub Create;
sub CreateBrush;
sub CreateFont;
sub CreateLinearGradientBrush;
sub CreateMatrix;
sub CreatePath;
sub CreatePen;
sub CreateRadialGradientBrush;
sub DESTROY;
sub DrawBitmap;
sub DrawEllipse;
sub DrawIcon;
sub DrawLines;
sub DrawPath;
sub DrawRectangle;
sub DrawRoundedRectangle;
sub DrawText;
sub DrawTextAngle;
sub DrawTextNoAngle;
sub FillPath;
sub GetPartialTextExtents;
sub GetTextExtent;
sub GetTransform;
sub PopState;
sub PushState;
sub ResetClip;
sub Rotate;
sub Scale;
sub SetBrush;
sub SetBrushBrush;
sub SetBrushGraphics;
sub SetFont;
sub SetFontFont;
sub SetFontGraphics;
sub SetPen;
sub SetPenGraphics;
sub SetPenPen;
sub SetTransform;
sub StrokeLine;
sub StrokeLines;
sub StrokeLinesOne;
sub StrokeLinesTwo;
sub StrokePath;
sub Translate;
sub createFromMemoryDC;
sub createFromPrinterDC;
sub createFromWindow;
sub createFromWindowDC;
sub createMeasuringContext;
}
package Wx::GraphicsGradientStop {
sub CLONE;
sub DESTROY;
sub GetColour;
sub GetPosition;
sub SetColour;
sub SetPosition;
sub new;
}
package Wx::GraphicsGradientStops {
sub Add;
sub AddColour;
sub AddStop;
sub CLONE;
sub DESTROY;
sub GetCount;
sub GetEndColour;
sub GetStartColour;
sub Item;
sub SetEndColour;
sub SetStartColour;
sub new;
}
package Wx::GraphicsMatrix {
sub Concat;
sub Get;
sub Invert;
sub IsEqual;
sub IsIdentity;
sub Rotate;
sub Scale;
sub Set;
sub TransformDistance;
sub TransformPoint;
sub Translate;
}
package Wx::GraphicsObject {
sub CLONE;
sub DESTROY;
sub GetRenderer;
sub IsNull;
}
package Wx::GraphicsPath {
sub AddArc;
sub AddArcToPoint;
sub AddCircle;
sub AddCurveToPoint;
sub AddEllipse;
sub AddLineToPoint;
sub AddPath;
sub AddQuadCurveToPoint;
sub AddRectangle;
sub AddRoundedRectangle;
sub CloseSubpath;
sub Contains;
sub GetBox;
sub GetCurrentPoint;
sub MoveToPoint;
sub Transform;
}
package Wx::GraphicsRenderer {
sub CreateBrush;
sub CreateContext;
sub CreateFont;
sub CreateFromMemoryDC;
sub CreateFromPrinterDC;
sub CreateFromWindow;
sub CreateFromWindowDC;
sub CreateLinearGradientBrush1;
sub CreateLinearGradientBrush;
sub CreateMatrix;
sub CreateMeasuringContext;
sub CreatePath;
sub CreatePen;
sub CreateRadialGradientBrush1;
sub CreateRadialGradientBrush;
sub GetDefaultRenderer;
}
package Wx::Grid {
sub AppendCols;
sub AppendRows;
sub AutoSize;
sub AutoSizeColLabelSize;
sub AutoSizeColumn;
sub AutoSizeColumns;
sub AutoSizeRow;
sub AutoSizeRowLabelSize;
sub AutoSizeRows;
sub BeginBatch;
sub BlockToDeviceRect;
sub CanDragColMove;
sub CanDragColSize;
sub CanDragGridSize;
sub CanDragRowSize;
sub CanEnableCellControl;
sub CellToRectCo;
sub CellToRectXY;
sub ClearGrid;
sub ClearSelection;
sub Create;
sub CreateGrid;
sub DeleteCols;
sub DeleteRows;
sub DisableCellEditControl;
sub DisableDragColMove;
sub DisableDragColSize;
sub DisableDragGridSize;
sub DisableDragRowSize;
sub EnableCellEditControl;
sub EnableDragColMove;
sub EnableDragColSize;
sub EnableDragGridSize;
sub EnableDragRowSize;
sub EnableEditing;
sub EnableGridLines;
sub EndBatch;
sub ForceRefresh;
sub GetBatchCount;
sub GetCellAlignment;
sub GetCellBackgroundColour;
sub GetCellEditor;
sub GetCellFont;
sub GetCellOverflow;
sub GetCellRenderer;
sub GetCellTextColour;
sub GetCellValueCo;
sub GetCellValueXY;
sub GetColAt;
sub GetColGridLinePen;
sub GetColLabelAlignment;
sub GetColLabelSize;
sub GetColLabelValue;
sub GetColMinimalAcceptableWidth;
sub GetColPos;
sub GetColSize;
sub GetDefaultCellAlignment;
sub GetDefaultCellBackgroundColour;
sub GetDefaultCellFont;
sub GetDefaultCellOverflow;
sub GetDefaultCellTextColour;
sub GetDefaultColLabelSize;
sub GetDefaultColSize;
sub GetDefaultEditor;
sub GetDefaultEditorForCellCo;
sub GetDefaultEditorForCellXY;
sub GetDefaultEditorForType;
sub GetDefaultGridLinePen;
sub GetDefaultRenderer;
sub GetDefaultRendererForCell;
sub GetDefaultRendererForType;
sub GetDefaultRowLabelSize;
sub GetDefaultRowSize;
sub GetGridColLabelWindow;
sub GetGridCursorCol;
sub GetGridCursorRow;
sub GetGridLineColour;
sub GetGridRowLabelWindow;
sub GetGridWindow;
sub GetLabelBackgroundColour;
sub GetLabelFont;
sub GetLabelTextColour;
sub GetNumberCols;
sub GetNumberRows;
sub GetOrCreateCellAttr;
sub GetRowGridLinePen;
sub GetRowLabelAlignment;
sub GetRowLabelSize;
sub GetRowLabelValue;
sub GetRowMinimalAcceptableHeight;
sub GetRowSize;
sub GetScrollLineX;
sub GetScrollLineY;
sub GetSelectedCells;
sub GetSelectedCols;
sub GetSelectedRows;
sub GetSelectionBackground;
sub GetSelectionBlockBottomRight;
sub GetSelectionBlockTopLeft;
sub GetSelectionForeground;
sub GetSelectionMode;
sub GetTable;
sub GetViewWidth;
sub GridLinesEnabled;
sub HideCellEditControl;
sub HideColLabels;
sub HideRowLabels;
sub InsertCols;
sub InsertRows;
sub IsCellEditControlEnabled;
sub IsCurrentCellReadOnly;
sub IsEditable;
sub IsInSelectionCo;
sub IsInSelectionXY;
sub IsReadOnly;
sub IsSelection;
sub IsVisibleCo;
sub IsVisibleXY;
sub MakeCellVisibleCo;
sub MakeCellVisibleXY;
sub MoveCursorDown;
sub MoveCursorDownBlock;
sub MoveCursorLeft;
sub MoveCursorLeftBlock;
sub MoveCursorRight;
sub MoveCursorRightBlock;
sub MoveCursorUp;
sub MoveCursorUpBlock;
sub MovePageDown;
sub MovePageUp;
sub ProcessTableMessage;
sub RegisterDataType;
sub SaveEditControlValue;
sub SelectAll;
sub SelectBlockPP;
sub SelectBlockXYWH;
sub SelectCol;
sub SelectRow;
sub SetCellAlignment;
sub SetCellBackgroundColour;
sub SetCellEditor;
sub SetCellFont;
sub SetCellHighlightColour;
sub SetCellHighlightPenWidth;
sub SetCellHighlightROPenWidth;
sub SetCellOverflow;
sub SetCellRenderer;
sub SetCellSize;
sub SetCellTextColour;
sub SetCellValueCo;
sub SetCellValueXY;
sub SetColAttr;
sub SetColFormatBool;
sub SetColFormatCustom;
sub SetColFormatFloat;
sub SetColFormatNumber;
sub SetColLabelAlignment;
sub SetColLabelSize;
sub SetColLabelValue;
sub SetColMinimalAcceptableWidth;
sub SetColMinimalWidth;
sub SetColPos;
sub SetColSize;
sub SetDefaultCellAlignment;
sub SetDefaultCellBackgroundColour;
sub SetDefaultCellFont;
sub SetDefaultCellOverflow;
sub SetDefaultCellTextColour;
sub SetDefaultColSize;
sub SetDefaultEditor;
sub SetDefaultRenderer;
sub SetDefaultRowSize;
sub SetEvents;
sub SetGridCursor;
sub SetGridLineColour;
sub SetLabelBackgroundColour;
sub SetLabelFont;
sub SetLabelTextColour;
sub SetMargins;
sub SetReadOnly;
sub SetRowAttr;
sub SetRowLabelAlignment;
sub SetRowLabelSize;
sub SetRowLabelValue;
sub SetRowMinimalAcceptableHeight;
sub SetRowMinimalHeight;
sub SetRowSize;
sub SetScrollLineX;
sub SetScrollLineY;
sub SetSelectionBackground;
sub SetSelectionForeground;
sub SetSelectionMode;
sub SetTable;
sub SetUseNativeColLabels;
sub ShowCellEditControl;
sub XToCol;
sub XToEdgeOfCol;
sub YToEdgeOfRow;
sub YToRow;
sub new;
sub newDefault;
sub newFull;
}
package Wx::GridBagSizer {
sub Add;
sub AddItem;
sub AddSizer;
sub AddSpace;
sub AddWindow;
sub CheckForIntersection;
sub CheckForIntersectionItem;
sub CheckForIntersectionPos;
sub FindItem;
sub FindItemAtPoint;
sub FindItemAtPosition;
sub FindItemSizer;
sub FindItemWindow;
sub GetCellSize;
sub GetEmptyCellSize;
sub GetItemPosition;
sub GetItemPositionIndex;
sub GetItemPositionSizer;
sub GetItemPositionWindow;
sub GetItemSpan;
sub GetItemSpanIndex;
sub GetItemSpanSizer;
sub GetItemSpanWindow;
sub SetEmptyCellSize;
sub SetItemPosition;
sub SetItemPositionIndex;
sub SetItemPositionSizer;
sub SetItemPositionWindow;
sub SetItemSpan;
sub SetItemSpanIndex;
sub SetItemSpanSizer;
sub SetItemSpanWindow;
sub new;
}
package Wx::GridCellAttr {
sub CLONE;
sub DESTROY;
sub DecRef;
sub GetAlignment;
sub GetBackgroundColour;
sub GetEditor;
sub GetFont;
sub GetOverflow;
sub GetRenderer;
sub GetTextColour;
sub HasAlignment;
sub HasBackgroundColour;
sub HasEditor;
sub HasFont;
sub HasRenderer;
sub HasTextColour;
sub IncRef;
sub IsReadOnly;
sub SetAlignment;
sub SetBackgroundColour;
sub SetDefAttr;
sub SetEditor;
sub SetFont;
sub SetOverflow;
sub SetReadOnly;
sub SetRenderer;
sub SetTextColour;
sub new;
}
package Wx::GridCellAutoWrapStringEditor {
sub new;
}
package Wx::GridCellAutoWrapStringRenderer {
sub new;
}
package Wx::GridCellBoolEditor {
sub IsTrueValue;
sub UseStringValues;
sub new;
}
package Wx::GridCellBoolRenderer {
sub new;
}
package Wx::GridCellChoiceEditor {
sub SetParameters;
sub new;
}
package Wx::GridCellCoords {
sub CLONE;
sub DESTROY;
sub GetCol;
sub GetRow;
sub Set;
sub SetCol;
sub SetRow;
sub new;
}
package Wx::GridCellDateTimeRenderer {
sub new;
}
package Wx::GridCellEditor {
sub ApplyEdit;
sub BeginEdit;
sub CLONE;
sub DESTROY;
sub Destroy;
sub EndEdit;
sub GetControl;
sub HandleReturn;
sub IsAcceptedKey;
sub IsCreated;
sub PaintBackground;
sub Reset;
sub SetControl;
sub SetSize;
sub Show;
sub StartingClick;
sub StartingKey;
}
package Wx::GridCellEnumEditor {
sub new;
}
package Wx::GridCellEnumRenderer {
sub new;
}
package Wx::GridCellFloatEditor {
sub SetParameters;
sub new;
}
package Wx::GridCellFloatRenderer {
sub GetPrecision;
sub GetWidth;
sub SetPrecision;
sub SetWidth;
sub new;
}
package Wx::GridCellNumberEditor {
sub SetParameters;
sub new;
}
package Wx::GridCellNumberRenderer {
sub new;
}
package Wx::GridCellRenderer {
sub CLONE;
sub DESTROY;
sub Draw;
sub GetBestSize;
sub SetParameters;
}
package Wx::GridCellStringRenderer {
sub new;
}
package Wx::GridCellTextEditor {
sub SetParameters;
sub new;
}
package Wx::GridEditorCreatedEvent {
sub GetCol;
sub GetControl;
sub GetRow;
sub SetCol;
sub SetControl;
sub SetRow;
sub new;
}
package Wx::GridEvent {
sub AltDown;
sub ControlDown;
sub GetCol;
sub GetPosition;
sub GetRow;
sub MetaDown;
sub Selecting;
sub ShiftDown;
}
package Wx::GridRangeSelectEvent {
sub AltDown;
sub ControlDown;
sub GetBottomRightCoords;
sub GetBottomRow;
sub GetLeftCol;
sub GetRightCol;
sub GetTopLeftCoords;
sub GetTopRow;
sub MetaDown;
sub Selecting;
sub ShiftDown;
}
package Wx::GridSizeEvent {
sub AltDown;
sub ControlDown;
sub GetPosition;
sub GetRowOrCol;
sub MetaDown;
sub ShiftDown;
}
package Wx::GridSizer {
sub GetCols;
sub GetHGap;
sub GetRows;
sub GetVGap;
sub SetCols;
sub SetHGap;
sub SetRows;
sub SetVGap;
sub new;
}
package Wx::GridTableBase {
sub AppendCols;
sub AppendRows;
sub CanGetValueAs;
sub CanHaveAttributes;
sub CanSetValueAs;
sub Clear;
sub DeleteCols;
sub DeleteRows;
sub Destroy;
sub GetAttr;
sub GetAttrProvider;
sub GetColLabelValue;
sub GetColsCount;
sub GetNumberCols;
sub GetNumberRows;
sub GetRowLabelValue;
sub GetRowsCount;
sub GetTypeName;
sub GetValue;
sub GetValueAsBool;
sub GetValueAsDouble;
sub GetValueAsLong;
sub GetView;
sub InsertCols;
sub InsertRows;
sub IsEmpty;
sub IsEmptyCell;
sub SetAttr;
sub SetAttrProvider;
sub SetColAttr;
sub SetColLabelValue;
sub SetRowAttr;
sub SetRowLabelValue;
sub SetValue;
sub SetValueAsBool;
sub SetValueAsDouble;
sub SetValueAsLong;
sub SetView;
}
package Wx::GridTableMessage {
sub CLONE;
sub DESTROY;
sub GetCommandInt2;
sub GetCommandInt;
sub GetId;
sub GetTableObject;
sub SetCommandInt2;
sub SetCommandInt;
sub SetId;
sub SetTableObject;
sub new;
}
package Wx::GridUpdateLocker {
sub CLONE;
sub Create;
sub DESTROY;
sub new;
}
package Wx::HScrolledWindow {
sub CalcScrolledPosition;
sub CalcUnscrolledPosition;
sub Create;
sub EnablePhysicalScrolling;
sub GetColumnCount;
sub GetTargetWindow;
sub GetVisibleBegin;
sub GetVisibleColumnsBegin;
sub GetVisibleColumnsEnd;
sub GetVisibleEnd;
sub IsColumnVisible;
sub IsVisible;
sub RefreshAll;
sub RefreshColumn;
sub RefreshColumns;
sub RemoveScrollbar;
sub ScrollColumnPages;
sub ScrollColumns;
sub ScrollToColumn;
sub SetColumnCount;
sub SetTargetWindow;
sub UpdateScrollbar;
sub VirtualHitTest;
}
package Wx::HVScrolledWindow {
sub Create;
sub EnablePhysicalScrolling;
sub GetColumnCount;
sub GetRowColumnCount;
sub GetRowCount;
sub GetVisibleBegin;
sub GetVisibleColumnsBegin;
sub GetVisibleColumnsEnd;
sub GetVisibleEnd;
sub GetVisibleRowsBegin;
sub GetVisibleRowsEnd;
sub IsColumnVisible;
sub IsRowVisible;
sub IsVisible;
sub IsVisiblePosition;
sub IsVisibleRC;
sub RefreshColumn;
sub RefreshColumns;
sub RefreshRow;
sub RefreshRowColumn;
sub RefreshRowColumnPosition;
sub RefreshRowColumnRC;
sub RefreshRows;
sub RefreshRowsColumns;
sub RefreshRowsColumnsPosition;
sub RefreshRowsColumnsRC;
sub ScrollColumnPages;
sub ScrollColumns;
sub ScrollRowPages;
sub ScrollRows;
sub ScrollToColumn;
sub ScrollToRow;
sub ScrollToRowColumn;
sub ScrollToRowColumnPosition;
sub ScrollToRowColumnRC;
sub SetColumnCount;
sub SetRowColumnCount;
sub SetRowCount;
sub VirtualHitTest;
sub VirtualHitTestPoint;
sub VirtualHitTestXY;
}
package Wx::HeaderColumn {
sub GetAlignment;
sub GetBitmap;
sub GetFlags;
sub GetMinWidth;
sub GetTitle;
sub GetWidth;
sub HasFlag;
sub IsHidden;
sub IsReorderable;
sub IsResizeable;
sub IsShown;
sub IsSortKey;
sub IsSortOrderAscending;
sub IsSortable;
}
package Wx::HeaderColumnSimple {
sub GetAlignment;
sub GetBitmap;
sub GetFlags;
sub GetMinWidth;
sub GetTitle;
sub GetWidth;
sub IsSortKey;
sub IsSortOrderAscending;
sub SetAlignment;
sub SetBitmap;
sub SetFlags;
sub SetMinWidth;
sub SetSortOrder;
sub SetTitle;
sub SetWidth;
sub new;
sub wxHeaderColumnSimple0;
sub wxHeaderColumnSimple1;
}
package Wx::HeaderCtrl {
sub AddColumnsItems;
sub Create;
sub GetColumnAt;
sub GetColumnCount;
sub GetColumnPos;
sub GetColumnsOrder;
sub IsEmpty;
sub MoveColumnInOrderArray;
sub ResetColumnsOrder;
sub SetColumnCount;
sub SetColumnsOrder;
sub ShowColumnsMenu;
sub ShowCustomizeDialog;
sub UpdateColumn;
sub new;
}
package Wx::HeaderCtrlEvent {
sub GetColumn;
sub GetNewOrder;
sub GetWidth;
}
package Wx::HeaderCtrlSimple {
sub AppendColumn;
sub DeleteColumn;
sub GetBestFittingWidth;
sub HideColumn;
sub InsertColumn;
sub RemoveSortIndicator;
sub ShowColumn;
sub ShowSortIndicator;
sub new;
sub wxHeaderCtrlSimple0;
sub wxHeaderCtrlSimple1;
}
package Wx::HelpControllerBase {
sub Destroy;
sub DisplayBlock;
sub DisplayContents;
sub DisplayContextPopup;
sub DisplaySection;
sub DisplaySectionId;
sub DisplayTextPopup;
sub GetParentWindow;
sub Initialize;
sub KeywordSearch;
sub LoadFile;
sub Quit;
sub SetParentWindow;
sub SetViewer;
}
package Wx::HelpControllerHelpProvider {
sub GetHelpController;
sub SetHelpController;
sub new;
}
package Wx::HelpEvent {
sub GetLink;
sub GetPosition;
sub GetTarget;
sub SetLink;
sub SetPosition;
sub SetTarget;
sub new;
}
package Wx::HelpProvider {
sub AddHelp;
sub AddHelpById;
sub Destroy;
sub Get;
sub GetHelp;
sub Set;
sub ShowHelp;
}
package Wx::HtmlCell {
sub ConvertToText;
sub Destroy;
sub FindCellByPos;
sub GetAbsPos;
sub GetDepth;
sub GetDescent;
sub GetFirstChild;
sub GetFirstTerminal;
sub GetHeight;
sub GetId;
sub GetLastTerminal;
sub GetLink;
sub GetNext;
sub GetParent;
sub GetPosX;
sub GetPosY;
sub GetWidth;
sub IsBefore;
sub IsFormattingCell;
sub IsLinebreakAllowed;
sub IsTerminalCell;
sub Layout;
sub SetCanLiveOnPagebreak;
sub SetId;
sub SetLink;
sub SetNext;
sub SetParent;
sub SetPos;
sub new;
}
package Wx::HtmlCellEvent {
sub GetCell;
sub GetLinkClicked;
sub GetMouseEvent;
sub GetPoint;
sub SetLinkClicked;
}
package Wx::HtmlColourCell {
sub new;
}
package Wx::HtmlContainerCell {
sub GetAlignHor;
sub GetAlignVer;
sub GetBackgroundColour;
sub GetIndent;
sub GetIndentUnits;
sub InsertCell;
sub RemoveExtraSpacing;
sub SetAlign;
sub SetAlignHor;
sub SetAlignVer;
sub SetBackgroundColour;
sub SetBorder;
sub SetIndent;
sub SetMinHeight;
sub SetWidthFloat;
sub SetWidthFloatTag;
sub new;
}
package Wx::HtmlDCRenderer {
sub CLONE;
sub DESTROY;
sub GetTotalHeight;
sub Render;
sub SetDC;
sub SetFonts;
sub SetHtmlText;
sub SetSize;
sub new;
}
package Wx::HtmlEasyPrinting {
sub CLONE;
sub DESTROY;
sub GetPageSetupData;
sub GetParentWindow;
sub GetPrintData;
sub PageSetup;
sub PreviewFile;
sub PreviewText;
sub PrintFile;
sub PrintText;
sub SetFonts;
sub SetFooter;
sub SetHeader;
sub SetParentWindow;
sub new;
}
package Wx::HtmlFontCell {
sub new;
}
package Wx::HtmlHelpController {
sub AddBook;
sub Display;
sub DisplayContents;
sub DisplayId;
sub DisplayIndex;
sub KeywordSearch;
sub ReadCustomization;
sub SetTempDir;
sub SetTitleFormat;
sub UseConfig;
sub WriteCustomization;
sub new;
}
package Wx::HtmlLinkEvent {
sub GetLinkInfo;
}
package Wx::HtmlLinkInfo {
sub GetEvent;
sub GetHref;
sub GetHtmlCell;
sub GetTarget;
}
package Wx::HtmlListBox {
sub Create;
sub GetFileSystem;
}
package Wx::HtmlParser {
sub AddTagHandler;
sub DoneParser;
sub GetCurrentTag;
sub GetFS;
sub GetProduct;
sub InitParser;
sub OpenURL;
sub Parse;
sub PopTagHandler;
sub PushTagHandler;
sub RestoreState;
sub SetFS;
sub SetSource;
sub SetSourceAndSaveState;
sub StopParsing;
}
package Wx::HtmlPrintout {
sub CleanUpStatics;
sub Destroy;
sub GetPageInfo;
sub HasPage;
sub OnBeginDocument;
sub OnPreparePrinting;
sub OnPrintPage;
sub SetFonts;
sub SetFooter;
sub SetHeader;
sub SetHtmlFile;
sub SetHtmlText;
sub SetMargins;
sub SetStandardFonts;
sub new;
}
package Wx::HtmlTag {
sub GetAllParams;
sub GetChildren;
sub GetFirstSibling;
sub GetLastSibling;
sub GetName;
sub GetNextSibling;
sub GetNextTag;
sub GetParam;
sub GetParamAsColour;
sub GetParamAsInt;
sub GetParent;
sub GetPreviousSibling;
sub HasEnding;
sub HasParam;
}
package Wx::HtmlTagHandler {
sub GetSupportedTags;
sub HandleTag;
sub SetParser;
}
package Wx::HtmlWidgetCell {
sub new;
}
package Wx::HtmlWinParser {
sub CloseContainer;
sub CreateCurrentFont;
sub GetActualColor;
sub GetAlign;
sub GetCharHeight;
sub GetCharWidth;
sub GetContainer;
sub GetDC;
sub GetFontBold;
sub GetFontFace;
sub GetFontFixed;
sub GetFontItalic;
sub GetFontSize;
sub GetFontUnderlined;
sub GetLink;
sub GetLinkColor;
sub GetPixelScale;
sub GetWindow;
sub OpenContainer;
sub OpenURL;
sub SetActualColor;
sub SetAlign;
sub SetContainer;
sub SetDC;
sub SetFontBold;
sub SetFontFace;
sub SetFontFixed;
sub SetFontItalic;
sub SetFontSize;
sub SetFontUnderlined;
sub SetLink;
sub SetLinkColor;
}
package Wx::HtmlWindow {
sub AppendToPage;
sub GetOpenedAnchor;
sub GetOpenedPage;
sub GetOpenedPageTitle;
sub GetParser;
sub GetRelatedFrame;
sub HistoryBack;
sub HistoryCanBack;
sub HistoryCanForward;
sub HistoryClear;
sub HistoryForward;
sub LoadFile;
sub LoadPage;
sub OnLinkClicked;
sub OnSetTitle;
sub ReadCustomization;
sub SelectAll;
sub SelectLine;
sub SelectWord;
sub SelectionToText;
sub SetBorders;
sub SetFonts;
sub SetPage;
sub SetRelatedFrame;
sub SetRelatedStatusBar;
sub ToText;
sub WriteCustomization;
sub new;
}
package Wx::HtmlWordCell {
sub SetPreviousWord;
}
package Wx::HyperlinkCtrl {
sub Create;
sub GetHoverColour;
sub GetNormalColour;
sub GetURL;
sub GetVisited;
sub GetVisitedColour;
sub SetHoverColour;
sub SetNormalColour;
sub SetURL;
sub SetVisited;
sub SetVisitedColour;
sub newDefault;
sub newFull;
}
package Wx::HyperlinkEvent {
sub GetURL;
sub SetURL;
sub new;
}
package Wx::ICOHandler {
sub new;
}
package Wx::IFFHandler {
sub new;
}
package Wx::IPV4address {
sub GetOrigHostname;
sub SetBroadcastAddress;
sub new;
}
package Wx::IPaddress {
sub GetHostname;
sub GetIPAddress;
sub GetService;
sub IsLocalHost;
sub SetAnyAddress;
sub SetHostname;
sub SetService;
}
package Wx::Icon {
sub CLONE;
sub CopyFromBitmap;
sub DESTROY;
sub GetDepth;
sub GetHeight;
sub GetWidth;
sub IsOk;
sub LoadFile;
sub Ok;
sub SetDepth;
sub SetHeight;
sub SetWidth;
sub new;
sub newFile;
sub newFromXPM;
sub newLocation;
sub newNull;
}
package Wx::IconBundle {
sub AddIcon;
sub AddIconFile;
sub AddIconIcon;
sub GetIcon;
sub GetIconCoord;
sub GetIconOfExactSize;
sub GetIconOfExactSizeCoord;
sub GetIconOfExactSizeSize;
sub GetIconSize;
sub IsEmpty;
sub new;
sub newEmpty;
sub newFile;
sub newIcon;
}
package Wx::IconLocation {
sub IsOk;
}
package Wx::IconizeEvent {
sub Iconized;
sub IsIconized;
}
package Wx::IdleEvent {
sub GetMode;
sub MoreRequested;
sub RequestMore;
sub SetMode;
sub new;
}
package Wx::Image {
sub AddHandler;
sub Blur;
sub BlurHorizontal;
sub BlurVertical;
sub CLONE;
sub ConvertAlphaToMask;
sub ConvertColourToAlpha;
sub ConvertToGreyscale;
sub ConvertToMono;
sub Copy;
sub Create;
sub DESTROY;
sub Destroy;
sub FindHandlerExtType;
sub FindHandlerMime;
sub FindHandlerName;
sub FindHandlerType;
sub GetAlpha;
sub GetAlphaData;
sub GetAlphaXY;
sub GetBlue;
sub GetData;
sub GetGreen;
sub GetHeight;
sub GetMaskBlue;
sub GetMaskGreen;
sub GetMaskRed;
sub GetOption;
sub GetOptionInt;
sub GetOrFindMaskColour;
sub GetPalette;
sub GetRed;
sub GetSubImage;
sub GetWidth;
sub HasAlpha;
sub HasMask;
sub HasOption;
sub HasPalette;
sub InitAlpha;
sub InsertHandler;
sub IsOk;
sub IsTransparent;
sub LoadFile;
sub LoadFileMIME;
sub LoadFileType;
sub LoadStreamMIME;
sub LoadStreamType;
sub Mirror;
sub Ok;
sub Replace;
sub Rescale;
sub Rotate90;
sub Rotate;
sub RotateHue;
sub SaveFile;
sub SaveFileMIME;
sub SaveFileOnly;
sub SaveFileType;
sub SaveStreamMIME;
sub SaveStreamType;
sub Scale;
sub SetAlpha;
sub SetAlphaData;
sub SetAlphaXY;
sub SetData;
sub SetMask;
sub SetMaskColour;
sub SetOption;
sub SetOptionInt;
sub SetPalette;
sub SetRGB;
sub SetRGBpixel;
sub SetRGBrect;
sub ShrinkBy;
sub new;
sub newBitmap;
sub newData;
sub newDataAlpha;
sub newIcon;
sub newNameMIME;
sub newNameType;
sub newNull;
sub newStreamMIME;
sub newStreamType;
sub newWH;
}
package Wx::ImageFileProperty {
sub GetPlValue;
sub OnMeasureImage;
sub OnSetValue;
sub SetPlValue;
sub new;
}
package Wx::ImageHandler {
sub Destroy;
sub GetExtension;
sub GetImageCount;
sub GetMimeType;
sub GetName;
sub GetType;
sub LoadFile;
sub SaveFile;
sub SetExtension;
sub SetMimeType;
sub SetName;
sub SetType;
}
package Wx::ImageList {
sub Add;
sub AddBitmap;
sub AddIcon;
sub AddWithColourMask;
sub CLONE;
sub DESTROY;
sub Draw;
sub GetBitmap;
sub GetIcon;
sub GetImageCount;
sub GetSize;
sub Remove;
sub RemoveAll;
sub Replace;
sub ReplaceBitmap;
sub ReplaceIcon;
sub new;
}
package Wx::IndividualLayoutConstraint {
sub Above;
sub Absolute;
sub AsIs;
sub Below;
sub LeftOf;
sub PercentOf;
sub RightOf;
sub SameAs;
sub Set;
sub Unconstrained;
}
package Wx::InfoBar {
sub AddButton;
sub Create;
sub Dismiss;
sub GetEffectDuration;
sub GetHideEffect;
sub GetShowEffect;
sub RemoveButton;
sub SetEffectDuration;
sub SetFont;
sub SetShowHideEffects;
sub ShowMessage;
sub new;
sub wxInfoBar0;
sub wxInfoBar1;
}
package Wx::InitDialogEvent {
sub new;
}
package Wx::InputStream {
sub GETC;
sub READ;
sub READLINE;
sub SEEK;
sub TELL;
}
package Wx::IntProperty {
sub DoGetValidator;
sub GetClassValidator;
sub GetPlValue;
sub IntToValue;
sub SetPlValue;
sub StringToValue;
sub ValidateValue;
sub ValueToString;
sub new;
}
package Wx::JPEGHandler {
sub new;
}
package Wx::JoystickEvent {
sub ButtonDown;
sub ButtonIsDown;
sub ButtonUp;
sub GetButtonChange;
sub GetButtonState;
sub GetJoystick;
sub GetPosition;
sub GetZPosition;
sub IsButton;
sub IsMove;
sub IsZMove;
sub new;
}
package Wx::KeyEvent {
sub AltDown;
sub CmdDown;
sub ControlDown;
sub DoAllowNextEvent;
sub GetKeyCode;
sub GetModifiers;
sub GetRawKeyCode;
sub GetUnicodeKey;
sub GetX;
sub GetY;
sub HasModifiers;
sub IsNextEventAllowed;
sub MetaDown;
sub ShiftDown;
sub new;
}
package Wx::LanguageInfo {
sub CLONE;
sub DESTROY;
sub GetCanonicalName;
sub GetDescription;
sub GetLanguage;
sub GetWinLang;
sub GetWinSublang;
sub new;
}
package Wx::LayoutConstraints {
sub bottom;
sub centreX;
sub centreY;
sub height;
sub left;
sub new;
sub right;
sub top;
sub width;
}
package Wx::ListBox {
sub Create;
sub Deselect;
sub GetSelections;
sub HitTest;
sub IsSelected;
sub SetFirstItem;
sub SetFirstItemString;
sub SetSelection;
sub SetStringSelection;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ListCtrl {
sub Arrange;
sub AssignImageList;
sub ClearAll;
sub Create;
sub DeleteAllItems;
sub DeleteColumn;
sub DeleteItem;
sub EditLabel;
sub EnsureVisible;
sub FindItem;
sub FindItemAtPos;
sub FindItemData;
sub GetColumn;
sub GetColumnCount;
sub GetColumnWidth;
sub GetCountPerPage;
sub GetEditControl;
sub GetImageList;
sub GetItem;
sub GetItemBackgroundColour;
sub GetItemCount;
sub GetItemData;
sub GetItemFont;
sub GetItemPosition;
sub GetItemRect;
sub GetItemSpacing;
sub GetItemState;
sub GetItemText;
sub GetItemTextColour;
sub GetNextItem;
sub GetSelectedItemCount;
sub GetSubItemRect;
sub GetTextColour;
sub GetTopItem;
sub GetViewRect;
sub HitTest;
sub InsertColumn;
sub InsertColumnInfo;
sub InsertColumnString;
sub InsertImageItem;
sub InsertImageStringItem;
sub InsertItem;
sub InsertStringImageItem;
sub InsertStringItem;
sub IsVirtual;
sub RefreshItem;
sub RefreshItems;
sub ScrollList;
sub SetColumn;
sub SetColumnWidth;
sub SetImageList;
sub SetItem;
sub SetItemBackgroundColour;
sub SetItemColumnImage;
sub SetItemCount;
sub SetItemData;
sub SetItemFont;
sub SetItemImage;
sub SetItemInfo;
sub SetItemPosition;
sub SetItemPtrData;
sub SetItemState;
sub SetItemString;
sub SetItemText;
sub SetItemTextColour;
sub SetSingleStyle;
sub SetTextColour;
sub SetWindowStyleFlag;
sub SortItems;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ListEvent {
sub GetCacheFrom;
sub GetCacheTo;
sub GetColumn;
sub GetData;
sub GetImage;
sub GetIndex;
sub GetItem;
sub GetKeyCode;
sub GetLabel;
sub GetMask;
sub GetPoint;
sub GetText;
sub IsEditCancelled;
sub new;
}
package Wx::ListItem {
sub CLONE;
sub Clear;
sub ClearAttributes;
sub DESTROY;
sub GetAlign;
sub GetBackgroundColour;
sub GetColumn;
sub GetData;
sub GetFont;
sub GetId;
sub GetImage;
sub GetMask;
sub GetState;
sub GetText;
sub GetTextColour;
sub GetWidth;
sub SetAlign;
sub SetBackgroundColour;
sub SetColumn;
sub SetData;
sub SetFont;
sub SetId;
sub SetImage;
sub SetMask;
sub SetState;
sub SetStateMask;
sub SetText;
sub SetTextColour;
sub SetWidth;
sub new;
}
package Wx::ListItemAttr {
sub CLONE;
sub DESTROY;
sub GetBackgroundColour;
sub GetFont;
sub GetTextColour;
sub HasBackgroundColour;
sub HasFont;
sub HasTextColour;
sub SetBackgroundColour;
sub SetFont;
sub SetTextColour;
sub new;
}
package Wx::ListView {
sub ClearColumnImage;
sub Create;
sub Focus;
sub GetFirstSelected;
sub GetFocusedItem;
sub GetNextSelected;
sub IsSelected;
sub Select;
sub SetColumnImage;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Listbook {
sub Create;
sub GetListView;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Locale {
sub AddCatalog;
sub AddCatalogLookupPathPrefix;
sub AddLanguage;
sub CLONE;
sub DESTROY;
sub FindLanguageInfo;
sub GetCanonicalName;
sub GetHeaderValue;
sub GetLanguage;
sub GetLanguageInfo;
sub GetLanguageName;
sub GetLocale;
sub GetName;
sub GetString;
sub GetSysName;
sub GetSystemEncoding;
sub GetSystemEncodingName;
sub GetSystemLanguage;
sub Init;
sub IsAvailable;
sub IsLoaded;
sub IsOk;
sub newLong;
sub newShort;
}
package Wx::Log {
sub AddTraceMask;
sub ClearTraceMasks;
sub Destroy;
sub DoCreateOnDemand;
sub DontCreateOnDemand;
sub EnableLogging;
sub Flush;
sub FlushActive;
sub GetActiveTarget;
sub GetComponentLevel;
sub GetLogLevel;
sub GetRepetitionCounting;
sub GetTimestamp;
sub GetTraceMask;
sub GetTraceMasks;
sub GetVerbose;
sub HasPendingMessages;
sub IsAllowedTraceMask;
sub IsEnabled;
sub IsLevelEnabled;
sub RemoveTraceMask;
sub Resume;
sub SetActiveTarget;
sub SetComponentLevel;
sub SetLogLevel;
sub SetRepetitionCounting;
sub SetTraceMask;
sub SetVerbose;
sub SetVerboseFunctionDefault;
sub SetVerboseFunctionParam;
sub SetVerboseMethodDefault;
sub SetVerboseMethodParam;
sub Suspend;
sub _SetTimestamp;
}
package Wx::LogChain {
sub DetachOldLog;
sub GetOldLog;
sub IsPassingMessages;
sub PassMessages;
sub SetLog;
sub new;
}
package Wx::LogFormatter {
sub Destroy;
}
package Wx::LogGui {
sub new;
}
package Wx::LogNull {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::LogPassThrough {
sub new;
}
package Wx::LogRecordInfo {
sub GetNumValue;
sub GetStrValue;
sub StoreNumValue;
sub StoreStrValue;
sub StoreValue;
sub component;
sub filename;
sub func;
sub line;
sub timestamp;
}
package Wx::LogStderr {
sub new;
}
package Wx::LogTextCtrl {
sub new;
}
package Wx::LogWindow {
sub new;
}
package Wx::LongStringProperty {
sub DisplayEditorDialog;
sub GetPlValue;
sub OnButtonClick;
sub OnEvent;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
}
package Wx::MDIChildFrame {
sub Activate;
sub Maximize;
sub Restore;
sub new;
}
package Wx::MDIParentFrame {
sub ActivateNext;
sub ActivatePrevious;
sub ArrangeIcons;
sub Cascade;
sub Create;
sub GetActiveChild;
sub GetClientWindow;
sub GetWindowMenu;
sub SetWindowMenu;
sub Tile;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Mask {
sub Destroy;
sub new;
sub newBitmap;
sub newBitmapColour;
sub newBitmapIndex;
}
package Wx::MaximizeEvent {
sub new;
}
package Wx::MediaCtrl {
sub Create;
sub GetDownloadProgress;
sub GetDownloadTotal;
sub GetPlaybackRate;
sub GetState;
sub GetVolume;
sub Length;
sub LoadFile;
sub LoadURI;
sub Pause;
sub Play;
sub Seek;
sub SetPlaybackRate;
sub SetVolume;
sub ShowPlayerControls;
sub Stop;
sub Tell;
sub new;
sub newDefault;
sub newFull;
}
package Wx::MediaEvent {
sub new;
}
package Wx::MemoryDC {
sub SelectObject;
sub SelectObjectAsSource;
sub new;
}
package Wx::MemoryFSHandler {
sub AddBinaryFile;
sub AddBinaryFileWithMimeType;
sub AddBitmapFile;
sub AddImageFile;
sub AddTextFile;
sub AddTextFileWithMimeType;
sub RemoveFile;
sub new;
}
package Wx::Menu {
sub AppendCheckItem;
sub AppendItem;
sub AppendRadioItem;
sub AppendSeparator;
sub AppendString;
sub AppendSubMenu;
sub AppendSubMenu_;
sub Break;
sub Check;
sub DeleteId;
sub DeleteItem;
sub DestroyId;
sub DestroyItem;
sub DestroyMenu;
sub Enable;
sub FindItem;
sub FindItemByPosition;
sub GetHelpString;
sub GetLabel;
sub GetLabelText;
sub GetMenuItemCount;
sub GetMenuItems;
sub GetTitle;
sub InsertCheckItem;
sub InsertItem;
sub InsertRadioItem;
sub InsertSeparator;
sub InsertString;
sub InsertSubMenu;
sub IsChecked;
sub IsEnabled;
sub PrependCheckItem;
sub PrependItem;
sub PrependRadioItem;
sub PrependSeparator;
sub PrependString;
sub PrependSubMenu;
sub RemoveId;
sub RemoveItem;
sub SetHelpString;
sub SetLabel;
sub SetTitle;
sub UpdateUI;
sub new;
}
package Wx::MenuBar {
sub Append;
sub Check;
sub Enable;
sub EnableTop;
sub FindItem;
sub FindMenu;
sub FindMenuItem;
sub GetHelpString;
sub GetLabel;
sub GetLabelTop;
sub GetMenu;
sub GetMenuCount;
sub GetMenuLabel;
sub GetMenuLabelText;
sub Insert;
sub IsChecked;
sub IsEnabled;
sub IsEnabledTop;
sub Refresh;
sub Remove;
sub Replace;
sub SetHelpString;
sub SetLabel;
sub SetLabelTop;
sub SetMenuLabel;
sub new;
}
package Wx::MenuEvent {
sub GetMenu;
sub GetMenuId;
sub IsPopup;
sub new;
}
package Wx::MenuItem {
sub Check;
sub Enable;
sub GetBackgroundColour;
sub GetBitmap;
sub GetFont;
sub GetHelp;
sub GetId;
sub GetItemLabel;
sub GetItemLabelText;
sub GetKind;
sub GetLabel;
sub GetLabelFromText;
sub GetLabelText;
sub GetMarginWidth;
sub GetMenu;
sub GetSubMenu;
sub GetText;
sub GetTextColour;
sub IsCheckable;
sub IsChecked;
sub IsEnabled;
sub IsSeparator;
sub IsSubMenu;
sub SetBackgroundColour;
sub SetBitmap;
sub SetBitmaps;
sub SetFont;
sub SetHelp;
sub SetItemLabel;
sub SetMarginWidth;
sub SetMenu;
sub SetSubMenu;
sub SetText;
sub SetTextColour;
sub new;
}
package Wx::MessageDialog {
sub SetExtendedMessage;
sub SetHelpLabel;
sub SetMessage;
sub SetOKCancelLabels;
sub SetOKLabel;
sub SetYesNoCancelLabels;
sub SetYesNoLabels;
sub ShowModal;
sub new;
}
package Wx::MimeTypesManager {
sub AddFallbacks;
sub CLONE;
sub DESTROY;
sub GetFileTypeFromExtension;
sub GetFileTypeFromMimeType;
sub IsOfType;
sub new;
}
package Wx::MiniFrame {
sub new;
}
package Wx::MirrorDC {
sub new;
}
package Wx::MouseCaptureChangedEvent {
sub GetCapturedWindow;
sub new;
}
package Wx::MouseCaptureLostEvent {
sub new;
}
package Wx::MouseEvent {
sub AltDown;
sub Aux1DClick;
sub Aux1Down;
sub Aux1IsDown;
sub Aux1Up;
sub Aux2DClick;
sub Aux2Down;
sub Aux2IsDown;
sub Aux2Up;
sub Button;
sub ButtonDClick;
sub ButtonDown;
sub ButtonUp;
sub CmdDown;
sub ControlDown;
sub Dragging;
sub Entering;
sub GetButton;
sub GetClickCount;
sub GetLinesPerAction;
sub GetLogicalPosition;
sub GetPosition;
sub GetPositionXY;
sub GetWheelAxis;
sub GetWheelDelta;
sub GetWheelRotation;
sub GetX;
sub GetY;
sub IsButton;
sub IsPageScroll;
sub Leaving;
sub LeftDClick;
sub LeftDown;
sub LeftIsDown;
sub LeftUp;
sub MetaDown;
sub MiddleDClick;
sub MiddleDown;
sub MiddleIsDown;
sub MiddleUp;
sub Moving;
sub RightDClick;
sub RightDown;
sub RightIsDown;
sub RightUp;
sub ShiftDown;
sub new;
}
package Wx::MoveEvent {
sub GetPosition;
sub GetRect;
sub new;
}
package Wx::MultiChoiceDialog {
sub GetSelections;
sub SetSelections;
sub new;
}
package Wx::MultiChoiceProperty {
sub GetValueAsArrayInt;
sub OnEvent;
sub OnSetValue;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
sub newChoices;
sub newStrings;
sub newValues;
}
package Wx::NativeFontInfo {
sub CLONE;
sub DESTROY;
sub FromString;
sub FromUserString;
sub ToString;
sub ToUserString;
sub new;
}
package Wx::NavigationKeyEvent {
sub GetCurrentFocus;
sub GetDirection;
sub IsFromTab;
sub IsWindowChange;
sub SetCurrentFocus;
sub SetDirection;
sub SetFromTab;
sub SetWindowChange;
sub new;
}
package Wx::Notebook {
sub Create;
sub GetRowCount;
sub SetPadding;
sub SetPageSize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::NotebookEvent {
sub new;
}
package Wx::NotebookSizer {
sub GetNotebook;
sub new;
}
package Wx::NotificationMessage {
sub AlwaysUseGeneric;
sub CLONE;
sub Close;
sub DESTROY;
sub SetFlags;
sub SetMessage;
sub SetParent;
sub SetTitle;
sub Show;
sub UseTaskBarIcon;
sub new;
sub newDefault;
sub newFull;
}
package Wx::NotifyEvent {
sub Allow;
sub IsAllowed;
sub Veto;
sub new;
}
package Wx::NumberEntryDialog {
sub GetValue;
sub new;
}
package Wx::OutputStream {
sub SEEK;
sub TELL;
sub WRITE;
}
package Wx::Overlay {
sub CLONE;
sub DESTROY;
sub Reset;
sub new;
}
package Wx::OwnerDrawnComboBox {
sub Append;
sub AppendData;
sub AppendItems;
sub AppendItemsData;
sub AppendString;
sub Clear;
sub Delete;
sub FindString;
sub FindStringCase;
sub FindStringNoCase;
sub GetClientData;
sub GetCount;
sub GetSelection;
sub GetString;
sub GetStringSelection;
sub GetStrings;
sub GetWidestItem;
sub GetWidestItemWidth;
sub Insert;
sub InsertData;
sub InsertItems;
sub InsertItemsData;
sub InsertString;
sub IsEmpty;
sub Select;
sub Set;
sub SetClientData;
sub SetItems;
sub SetItemsData;
sub SetSelection;
sub SetString;
sub SetStringSelection;
}
package Wx::PCXHandler {
sub new;
}
package Wx::PGArrayEditorDialog {
sub Create;
sub EnableCustomNewAction;
sub GetDialogValue;
sub GetSelection;
sub GetTextCtrlValidator;
sub Init;
sub IsModified;
sub OnAddClick;
sub OnDeleteClick;
sub OnDownClick;
sub OnEndLabelEdit;
sub OnIdle;
sub OnUpClick;
sub SetDialogValue;
}
package Wx::PGArrayStringEditorDialog {
sub GetDialogValue;
sub Init;
sub SetCustomButton;
sub SetDialogValue;
sub new;
}
package Wx::PGCell {
sub CLONE;
sub DESTROY;
sub GetBgCol;
sub GetBitmap;
sub GetFgCol;
sub GetFont;
sub GetText;
sub HasText;
sub MergeFrom;
sub SetBgCol;
sub SetBitmap;
sub SetFgCol;
sub SetFont;
sub SetText;
sub new;
sub newCopy;
sub newDefault;
sub newFull;
}
package Wx::PGCellRenderer {
sub DrawCaptionSelectionRect;
sub DrawEditorValue;
sub DrawText;
sub GetImageSize;
sub PostDrawCell;
sub PreDrawCell;
sub Render;
}
package Wx::PGCheckBoxEditor {
sub CreateControls;
sub DrawValue;
sub GetName;
sub GetValueFromControl;
sub OnEvent;
sub SetControlIntValue;
sub SetValueToUnspecified;
sub UpdateControl;
sub new;
}
package Wx::PGChoiceAndButtonEditor {
sub CreateControls;
sub GetName;
sub new;
}
package Wx::PGChoiceEditor {
sub CanContainCustomImage;
sub CreateControls;
sub CreateControlsBase;
sub DeleteItem;
sub GetName;
sub GetValueFromControl;
sub InsertItem;
sub OnEvent;
sub SetControlIntValue;
sub SetControlStringValue;
sub SetValueToUnspecified;
sub UpdateControl;
sub new;
}
package Wx::PGChoiceEntry {
sub CLONE;
sub DESTROY;
sub GetValue;
sub SetValue;
sub new;
sub newCopy;
sub newDefault;
sub newValues;
}
package Wx::PGChoices {
sub Add;
sub AddArrayString;
sub AddAsSorted;
sub AddCoiceEntry;
sub AddSingleBitmapItem;
sub AddSingleItem;
sub AllocExclusive;
sub Assign;
sub AssignData;
sub CLONE;
sub Clear;
sub Copy;
sub DESTROY;
sub GetCount;
sub GetLabel;
sub GetLabels;
sub GetValue;
sub GetValuesForStrings;
sub Index;
sub IndexFromInt;
sub IndexFromString;
sub Insert;
sub InsertChoiceEntry;
sub InsertStringLabel;
sub IsOk;
sub Item;
sub RemoveAt;
sub Set;
sub new;
sub newArrayString;
sub newChoicesData;
sub newCopy;
sub newDefault;
}
package Wx::PGChoicesData {
sub Clear;
sub CopyDataFrom;
sub GetCount;
sub Insert;
sub Item;
sub new;
}
package Wx::PGComboBoxEditor {
sub CreateControls;
sub GetName;
sub GetValueFromControl;
sub OnEvent;
sub OnFocus;
sub UpdateControl;
sub new;
}
package Wx::PGDatePickerCtrlEditor {
sub CreateControls;
sub GetName;
sub GetValueFromControl;
sub OnEvent;
sub SetValueToUnspecified;
sub UpdateControl;
}
package Wx::PGEditor {
sub CLONE;
sub CanContainCustomImage;
sub CreateControls;
sub DESTROY;
sub DeleteItem;
sub DrawValue;
sub GetName;
sub GetValueFromControl;
sub InsertItem;
sub OnEvent;
sub OnFocus;
sub SetControlAppearance;
sub SetControlIntValue;
sub SetControlStringValue;
sub SetValueToUnspecified;
sub UpdateControl;
}
package Wx::PGEditorDialogAdapter {
sub CLONE;
sub DESTROY;
sub DoShowDialog;
sub GetValue;
sub SetValue;
sub ShowDialog;
}
package Wx::PGFileDialogAdapter {
sub DoShowDialog;
}
package Wx::PGLongStringDialogAdapter {
sub DoShowDialog;
}
package Wx::PGMultiButton {
sub Add;
sub AddBitmap;
sub AddString;
sub Finalize;
sub GetButton;
sub GetButtonId;
sub GetCount;
sub GetPrimarySize;
sub new;
}
package Wx::PGProperty {
sub AdaptListToValue;
sub AddChoice;
sub AddPrivateChild;
sub AppendChild;
sub AreAllChildrenSpecified;
sub AreChildrenComponents;
sub CLONE;
sub ChangeFlag;
sub ChildChanged;
sub DESTROY;
sub DeleteChildren;
sub DeleteChoice;
sub DoGetAttribute;
sub DoGetEditorClass;
sub DoGetValidator;
sub DoGetValue;
sub DoSetAttribute;
sub Enable;
sub GenerateComposedValue;
sub GetAttribute0;
sub GetAttribute1;
sub GetAttribute;
sub GetAttributeAsDouble;
sub GetAttributeAsLong;
sub GetAttributesAsList;
sub GetBaseName;
sub GetCell0;
sub GetCell1;
sub GetCell;
sub GetCellRenderer;
sub GetChildCount;
sub GetChildrenHeight;
sub GetChoiceSelection;
sub GetChoices;
sub GetClientData;
sub GetColumnEditor;
sub GetDefaultValue;
sub GetDisplayedString;
sub GetEditorClass;
sub GetEditorDialog;
sub GetFlags;
sub GetGrid;
sub GetGridIfDisplayed;
sub GetHelpString;
sub GetIndexInParent;
sub GetLabel;
sub GetLastVisibleSubItem;
sub GetMainParent;
sub GetMaxLength;
sub GetName;
sub GetOrCreateCell;
sub GetParent;
sub GetPropertyByName;
sub GetValidator;
sub GetValue;
sub GetValueAsString;
sub GetValueImage;
sub GetValueType;
sub GetY;
sub HasFlag;
sub HasVisibleChildren;
sub Hide;
sub Index;
sub InsertChild;
sub InsertChoice;
sub IsCategory;
sub IsEnabled;
sub IsExpanded;
sub IsRoot;
sub IsSomeParent;
sub IsTextEditable;
sub IsValueUnspecified;
sub IsVisible;
sub Item;
sub OnEvent;
sub OnMeasureImage;
sub OnSetValue;
sub OnValidationFailure;
sub RefreshChildren;
sub RefreshEditor;
sub SetAttribute;
sub SetAutoUnspecified;
sub SetBackgroundColour;
sub SetCell;
sub SetChoiceSelection;
sub SetChoices;
sub SetClientData;
sub SetDefaultValue;
sub SetEditor;
sub SetEditorEditor;
sub SetEditorEditorName;
sub SetFlagRecursively;
sub SetHelpString;
sub SetLabel;
sub SetMaxLength;
sub SetModifiedStatus;
sub SetName;
sub SetParentalType;
sub SetTextColour;
sub SetValidator;
sub SetValue;
sub SetValueFromInt;
sub SetValueFromString;
sub SetValueImage;
sub SetValueInEvent;
sub SetValueToUnspecified;
sub SetWasModified;
sub UpdateParentValues;
sub UsesAutoUnspecified;
sub ValidateValue;
sub ValueToString;
}
package Wx::PGSpinCtrlEditor {
sub CreateControls;
sub GetName;
sub OnEvent;
sub new;
}
package Wx::PGTextCtrlAndButtonEditor {
sub CreateControls;
sub GetName;
sub new;
}
package Wx::PGTextCtrlEditor {
sub CreateControls;
sub GetName;
sub GetTextCtrlValueFromControl;
sub GetValueFromControl;
sub OnEvent;
sub OnFocus;
sub OnTextCtrlEvent;
sub SetControlStringValue;
sub UpdateControl;
sub new;
}
package Wx::PGVIterator {
sub AtEnd;
sub Destroy;
sub GetProperty;
sub Next;
sub UnRef;
sub new;
sub newCopy;
sub newDefault;
}
package Wx::PGValidationInfo {
sub CLONE;
sub DESTROY;
sub GetFailureBehavior;
sub GetFailureMessage;
sub GetValue;
sub SetFailureBehavior;
sub SetFailureMessage;
sub new;
}
package Wx::PGWindowList {
sub CLONE;
sub DESTROY;
sub SetSecondary;
sub new;
sub newDefault;
sub newOneWindow;
sub newTwoWindows;
}
package Wx::PNGHandler {
sub new;
}
package Wx::PNMHandler {
sub new;
}
package Wx::PageSetupDialog {
sub Destroy;
sub GetPageSetupData;
sub ShowModal;
sub new;
}
package Wx::PageSetupDialogData {
sub Destroy;
sub EnableHelp;
sub EnableMargins;
sub EnableOrientation;
sub EnablePaper;
sub EnablePrinter;
sub GetDefaultInfo;
sub GetDefaultMinMargins;
sub GetEnableHelp;
sub GetEnableMargins;
sub GetEnableOrientation;
sub GetEnablePaper;
sub GetEnablePrinter;
sub GetMarginBottomRight;
sub GetMarginTopLeft;
sub GetMinMarginBottomRight;
sub GetMinMarginTopLeft;
sub GetPaperId;
sub GetPaperSize;
sub GetPrintData;
sub SetDefaultInfo;
sub SetDefaultMinMargins;
sub SetMarginBottomRight;
sub SetMarginTopLeft;
sub SetMinMarginBottomRight;
sub SetMinMarginTopLeft;
sub SetPaperId;
sub SetPaperSize;
sub SetPrintData;
sub new;
}
package Wx::PaintDC {
sub new;
}
package Wx::PaintEvent {
sub new;
}
package Wx::Palette {
sub CLONE;
sub DESTROY;
sub GetColoursCount;
sub GetPixel;
sub GetRGB;
sub IsOk;
sub Ok;
sub new;
}
package Wx::Panel {
sub Create;
sub SetFocusIgnoringChildren;
sub TransferDataFromWindow;
sub TransferDataToWindow;
sub Validate;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PasswordEntryDialog {
sub new;
}
package Wx::Pen {
sub CLONE;
sub DESTROY;
sub GetCap;
sub GetColour;
sub GetDashes;
sub GetJoin;
sub GetStipple;
sub GetStyle;
sub GetWidth;
sub IsOk;
sub Ok;
sub SetCap;
sub SetColour;
sub SetColourColour;
sub SetColourName;
sub SetColourRGB;
sub SetDashes;
sub SetJoin;
sub SetStipple;
sub SetStyle;
sub SetWidth;
sub new;
sub newBitmap;
sub newColour;
sub newString;
}
package Wx::PerlTestAbstractNonObject {
sub CLONE;
sub DoGetMessage;
sub EchoClassName;
sub GetMessage;
sub GetMoniker;
sub OnlyInBase;
}
package Wx::PerlTestAbstractObject {
sub CLONE;
sub DESTROY;
sub DoGetMessage;
sub EchoClassName;
sub GetMessage;
sub GetMoniker;
sub OnlyInBase;
}
package Wx::PerlTestNonObject {
sub CLONE;
sub DoGetMessage;
sub EchoClassName;
}
package Wx::PerlTestObject {
sub CLONE;
sub DESTROY;
sub DoGetMessage;
sub EchoClassName;
sub new;
}
package Wx::PickerBase {
sub GetInternalMargin;
sub GetPickerCtrl;
sub GetPickerCtrlProportion;
sub GetTextCtrl;
sub GetTextCtrlProportion;
sub HasTextCtrl;
sub IsPickerCtrlGrowable;
sub IsTextCtrlGrowable;
sub SetInternalMargin;
sub SetPickerCtrlGrowable;
sub SetPickerCtrlProportion;
sub SetTextCtrlGrowable;
sub SetTextCtrlProportion;
}
package Wx::PlArtProvider {
sub CreateBitmap;
sub new;
}
package Wx::PlCommand {
sub CanUndo;
sub new;
}
package Wx::PlCommandEvent {
sub DESTROY;
sub new;
}
package Wx::PlDataObjectSimple {
sub DESTROY;
sub new;
}
package Wx::PlDataViewIndexListModel {
sub new;
}
package Wx::PlDataViewVirtualListModel {
sub new;
}
package Wx::PlEvent {
sub DESTROY;
sub new;
}
package Wx::PlEventFilter {
sub new;
}
package Wx::PlFileSystemHandler {
sub new;
}
package Wx::PlFontEnumerator {
sub DESTROY;
sub OnFacename;
sub OnFontEncoding;
sub new;
}
package Wx::PlGridCellEditor {
sub PaintBackground;
sub new;
}
package Wx::PlGridCellRenderer {
sub Draw;
sub new;
}
package Wx::PlGridTable {
sub AppendCols;
sub AppendRows;
sub CanGetValueAs;
sub CanHaveAttributes;
sub CanSetValueAs;
sub Clear;
sub DeleteCols;
sub DeleteRows;
sub GetAttr;
sub GetColLabelValue;
sub GetRowLabelValue;
sub GetTypeName;
sub GetValueAsBool;
sub GetValueAsDouble;
sub GetValueAsLong;
sub GetView;
sub InsertCols;
sub InsertRows;
sub IsEmptyCell;
sub SetAttr;
sub SetColAttr;
sub SetColLabelValue;
sub SetRowAttr;
sub SetRowLabelValue;
sub SetValueAsBool;
sub SetValueAsDouble;
sub SetValueAsLong;
sub SetView;
sub new;
}
package Wx::PlHScrolledWindow {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlHVScrolledWindow {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlHeaderColumn {
sub new;
}
package Wx::PlHeaderCtrl {
sub wxHeaderCtrl0;
sub wxHeaderCtrl1;
}
package Wx::PlHtmlListBox {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlHtmlTagHandler {
sub GetParser;
sub new;
}
package Wx::PlHtmlWinTagHandler {
sub GetParser;
sub new;
}
package Wx::PlLog {
sub new;
}
package Wx::PlLogFormatter {
sub Destroy;
sub new;
}
package Wx::PlLogPassThrough {
sub new;
}
package Wx::PlOwnerDrawnComboBox {
sub Create;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlPerlTestAbstractNonObject {
sub DESTROY;
sub EchoClassName;
sub OnlyInBase;
sub new;
}
package Wx::PlPerlTestAbstractObject {
sub EchoClassName;
sub OnlyInBase;
sub new;
}
package Wx::PlPerlTestNonObject {
sub DESTROY;
sub DoGetMessage;
sub EchoClassName;
sub new;
}
package Wx::PlPopupTransientWindow {
sub CanDismiss;
sub Dismiss;
sub Popup;
sub ProcessLeftDown;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlPreviewControlBar {
sub CreateButtons;
sub new;
}
package Wx::PlPreviewFrame {
sub CreateCanvas;
sub CreateControlBar;
sub GetPreviewCanvas;
sub GetPreviewControlBar;
sub GetPrintPreview;
sub Initialize;
sub SetPreviewCanvas;
sub SetPreviewControlBar;
sub SetPrintPreview;
sub new;
}
package Wx::PlRichTextFileHandler {
sub CanHandle;
sub CanLoad;
sub CanSave;
sub new;
}
package Wx::PlSettableHeaderColumn {
sub new;
}
package Wx::PlSizer {
sub new;
}
package Wx::PlThreadEvent {
sub GetData;
sub SetStash;
sub _GetData;
sub new;
}
package Wx::PlTreeListItemComparator {
sub new;
}
package Wx::PlVListBox {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlVScrolledWindow {
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlValidator {
sub DESTROY;
sub new;
}
package Wx::PlWindow {
sub AcceptsFocus;
sub AcceptsFocusFromKeyboard;
sub AcceptsFocusRecursively;
sub Create;
sub DoGetBestSize;
sub DoMoveWindow;
sub Enable;
sub GetMaxSize;
sub GetMinSize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PlXmlResourceHandler {
sub new;
}
package Wx::Point {
sub CLONE;
sub DESTROY;
sub new;
sub x;
sub y;
}
package Wx::PopupTransientWindow {
sub CanDismiss;
sub Dismiss;
sub Popup;
sub ProcessLeftDown;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PopupWindow {
sub Create;
sub Position;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Position {
sub CLONE;
sub DESTROY;
sub GetCol;
sub GetColumn;
sub GetRow;
sub SetCol;
sub SetColumn;
sub SetRow;
sub col;
sub column;
sub new;
sub row;
}
package Wx::PowerEvent {
sub IsVetoed;
sub Veto;
}
package Wx::PreviewCanvas {
sub new;
}
package Wx::PreviewControlBar {
sub CreateButtons;
sub GetPrintPreview;
sub GetZoomControl;
sub OnFirst;
sub OnGotoPage;
sub OnLast;
sub OnNext;
sub OnPrevious;
sub OnPrint;
sub SetZoomControl;
sub new;
}
package Wx::PreviewFrame {
sub CreateCanvas;
sub CreateControlBar;
sub GetControlBar;
sub Initialize;
sub new;
}
package Wx::PrintData {
sub ConvertFromNative;
sub ConvertToNative;
sub Destroy;
sub GetBin;
sub GetCollate;
sub GetColour;
sub GetDuplex;
sub GetFilename;
sub GetMedia;
sub GetNoCopies;
sub GetOrientation;
sub GetPaperId;
sub GetPrintMode;
sub GetPrinterName;
sub GetPrivData;
sub GetPrivDataLen;
sub GetQuality;
sub IsOk;
sub IsOrientationReversed;
sub SetBin;
sub SetCollate;
sub SetColour;
sub SetDuplex;
sub SetFilename;
sub SetMedia;
sub SetNoCopies;
sub SetOrientation;
sub SetOrientationReversed;
sub SetPaperId;
sub SetPrintMode;
sub SetPrinterName;
sub SetPrivData;
sub SetQuality;
sub new;
}
package Wx::PrintDialog {
sub GetPrintDC;
sub GetPrintDialogData;
sub ShowModal;
sub new;
}
package Wx::PrintDialogData {
sub Destroy;
sub EnableHelp;
sub EnablePageNumbers;
sub EnablePrintToFile;
sub EnableSelection;
sub GetAllPages;
sub GetCollate;
sub GetFromPage;
sub GetMaxPage;
sub GetMinPage;
sub GetNoCopies;
sub GetPrintData;
sub GetPrintToFile;
sub GetSelection;
sub GetToPage;
sub IsOk;
sub SetCollate;
sub SetFromPage;
sub SetMaxPage;
sub SetMinPage;
sub SetNoCopies;
sub SetPrintData;
sub SetPrintToFile;
sub SetSelection;
sub SetToPage;
sub new;
}
package Wx::PrintFactory {
sub CreatePageSetupDialog;
sub CreatePrintDialogD;
sub CreatePrintDialogDD;
sub CreatePrintPreviewD;
sub CreatePrintPreviewDD;
sub CreatePrintSetupDialog;
sub CreatePrinter;
sub CreatePrinterLine;
sub CreateStatusLine;
sub GetFactory;
sub HasOwnPrintToFile;
sub HasPrintSetupDialog;
sub HasPrinterLine;
sub HasStatusLine;
sub SetPrintFactory;
}
package Wx::PrintPaperDatabase {
sub AddPaperType;
sub ConvertIdToName;
sub ConvertNameToId;
sub FindPaperType;
sub FindPaperTypeById;
sub FindPaperTypeByName;
sub FindPaperTypeByPlatformId;
sub FindPaperTypeBySize;
sub GetCount;
sub GetPaperSize;
sub GetSize;
sub GetSizeSize;
sub Item;
}
package Wx::PrintPaperType {
sub GetHeight;
sub GetId;
sub GetName;
sub GetPlatformId;
sub GetSize;
sub GetSizeDeviceUnits;
sub GetSizeMM;
sub GetWidth;
}
package Wx::PrintPreview {
sub Destroy;
sub GetCanvas;
sub GetCurrentPage;
sub GetFrame;
sub GetMaxPage;
sub GetMinPage;
sub GetPrintout;
sub GetPrintoutForPrinting;
sub IsOk;
sub Ok;
sub PaintPage;
sub Print;
sub SetCanvas;
sub SetCurrentPage;
sub SetFrame;
sub SetPrintout;
sub SetZoom;
sub new;
}
package Wx::Printer {
sub CLONE;
sub CreateAbortWindow;
sub DESTROY;
sub GetAbort;
sub GetLastError;
sub GetPrintDialogData;
sub Print;
sub PrintDialog;
sub ReportError;
sub Setup;
sub new;
}
package Wx::PrinterDC {
sub GetPaperRect;
sub new;
}
package Wx::Printout {
sub Destroy;
sub FitThisSizeToPage;
sub FitThisSizeToPageMargins;
sub FitThisSizeToPaper;
sub GetDC;
sub GetLogicalPageMarginsRect;
sub GetLogicalPageRect;
sub GetLogicalPaperRect;
sub GetPPIPrinter;
sub GetPPIScreen;
sub GetPageInfo;
sub GetPageSizeMM;
sub GetPageSizePixels;
sub GetPaperRectPixels;
sub GetPreview;
sub GetTitle;
sub HasPage;
sub IsPreview;
sub MapScreenSizeToDevice;
sub MapScreenSizeToPage;
sub MapScreenSizeToPageMargins;
sub MapScreenSizeToPaper;
sub OffsetLogicalOrigin;
sub OnBeginDocument;
sub OnBeginPrinting;
sub OnEndDocument;
sub OnEndPrinting;
sub OnPreparePrinting;
sub SetDC;
sub SetLogicalOrigin;
sub SetPPIPrinter;
sub SetPPIScreen;
sub SetPageSizeMM;
sub SetPageSizePixels;
sub SetPaperRectPixels;
sub SetPreview;
sub new;
}
package Wx::Process {
sub CloseOutput;
sub Destroy;
sub Detach;
sub Exists;
sub GetErrorStream;
sub GetInputStream;
sub GetOutputStream;
sub GetPid;
sub IsErrorAvailable;
sub IsInputAvailable;
sub IsInputOpened;
sub Kill;
sub OnTerminate;
sub Open;
sub Redirect;
sub new;
}
package Wx::ProcessEvent {
sub GetExitCode;
sub GetPid;
sub new;
}
package Wx::ProgressDialog {
sub GetMessage;
sub GetRange;
sub GetValue;
sub Pulse;
sub Resume;
sub SetRange;
sub Show;
sub Update;
sub WasCancelled;
sub WasSkipped;
sub new;
}
package Wx::PropertyCategory {
sub GetTextExtent;
sub GetValueAsString;
sub ValueToString;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PropertyGrid {
sub AddActionTrigger;
sub AddToSelection;
sub AddToSelectionProperty;
sub AddToSelectionString;
sub Append;
sub AppendIn;
sub AppendInProperty;
sub AppendInString;
sub AutoGetTranslation;
sub BeginAddChildren;
sub BeginAddChildrenProperty;
sub BeginAddChildrenString;
sub BeginLabelEdit;
sub CenterSplitter;
sub ChangePropertyValue;
sub ChangePropertyValueProperty;
sub ChangePropertyValueString;
sub Clear;
sub ClearActionTriggers;
sub ClearModifiedStatus;
sub ClearSelection;
sub Collapse;
sub CollapseAll;
sub CollapseProperty;
sub CollapseString;
sub CommitChangesFromEditor;
sub Create;
sub DedicateKey;
sub DeleteProperty;
sub DeletePropertyProperty;
sub DeletePropertyString;
sub DisableProperty;
sub DisablePropertyProperty;
sub DisablePropertyString;
sub DoHidePropertyError;
sub DoRegisterEditorClass;
sub DoShowPropertyError;
sub EditorValidate;
sub EditorsValueWasModified;
sub EditorsValueWasNotModified;
sub EnableCategories;
sub EnableProperty;
sub EnablePropertyProperty;
sub EnablePropertyString;
sub EndAddChildren;
sub EndAddChildrenProperty;
sub EndAddChildrenString;
sub EndLabelEdit;
sub EnsureVisible;
sub EnsureVisibleProperty;
sub EnsureVisibleString;
sub Expand;
sub ExpandAll;
sub ExpandProperty;
sub ExpandString;
sub FitColumns;
sub GetCaptionBackgroundColour;
sub GetCaptionFont;
sub GetCaptionForegroundColour;
sub GetCellBackgroundColour;
sub GetCellDisabledTextColour;
sub GetCellTextColour;
sub GetColumnCount;
sub GetColumnProportion;
sub GetEditorByName;
sub GetEditorControl;
sub GetEditorControlSecondary;
sub GetEditorTextCtrl;
sub GetEmptySpaceColour;
sub GetFirst;
sub GetFirstChild;
sub GetFirstChildProperty;
sub GetFirstChildString;
sub GetFontHeight;
sub GetGrid;
sub GetImageRect;
sub GetImageSize;
sub GetIterator;
sub GetIteratorPosOverload;
sub GetIteratorPropertyOverload;
sub GetLabelEditor;
sub GetLastItem;
sub GetLineColour;
sub GetMarginColour;
sub GetPanel;
sub GetPrimaryEditor;
sub GetPropertiesWithFlag;
sub GetProperty;
sub GetPropertyAttribute;
sub GetPropertyAttributeProperty;
sub GetPropertyAttributeString;
sub GetPropertyBackgroundColour;
sub GetPropertyBackgroundColourProperty;
sub GetPropertyBackgroundColourString;
sub GetPropertyByLabel;
sub GetPropertyByName;
sub GetPropertyByNameName;
sub GetPropertyByNameSubName;
sub GetPropertyCategory;
sub GetPropertyCategoryProperty;
sub GetPropertyCategoryString;
sub GetPropertyClientData;
sub GetPropertyEditor;
sub GetPropertyEditorProperty;
sub GetPropertyEditorString;
sub GetPropertyHelpString;
sub GetPropertyHelpStringProperty;
sub GetPropertyHelpStringString;
sub GetPropertyImage;
sub GetPropertyImageProperty;
sub GetPropertyImageString;
sub GetPropertyLabel;
sub GetPropertyLabelProperty;
sub GetPropertyLabelString;
sub GetPropertyName;
sub GetPropertyTextColour;
sub GetPropertyTextColourProperty;
sub GetPropertyTextColourString;
sub GetPropertyValidator;
sub GetPropertyValidatorProperty;
sub GetPropertyValidatorString;
sub GetPropertyValue;
sub GetPropertyValueAsArrayInt;
sub GetPropertyValueAsArrayIntProperty;
sub GetPropertyValueAsArrayIntString;
sub GetPropertyValueAsArrayString;
sub GetPropertyValueAsArrayStringProperty;
sub GetPropertyValueAsArrayStringString;
sub GetPropertyValueAsBool;
sub GetPropertyValueAsBoolProperty;
sub GetPropertyValueAsBoolString;
sub GetPropertyValueAsDateTime;
sub GetPropertyValueAsDateTimeProperty;
sub GetPropertyValueAsDateTimeString;
sub GetPropertyValueAsDouble;
sub GetPropertyValueAsDoubleProperty;
sub GetPropertyValueAsDoubleString;
sub GetPropertyValueAsInt;
sub GetPropertyValueAsIntProperty;
sub GetPropertyValueAsIntString;
sub GetPropertyValueAsLong;
sub GetPropertyValueAsLongLong;
sub GetPropertyValueAsLongLongProperty;
sub GetPropertyValueAsLongLongString;
sub GetPropertyValueAsLongProperty;
sub GetPropertyValueAsLongString;
sub GetPropertyValueAsString;
sub GetPropertyValueAsStringProperty;
sub GetPropertyValueAsStringString;
sub GetPropertyValueAsULong;
sub GetPropertyValueAsULongLong;
sub GetPropertyValueAsULongLongProperty;
sub GetPropertyValueAsULongLongString;
sub GetPropertyValueAsULongProperty;
sub GetPropertyValueAsULongString;
sub GetPropertyValueProperty;
sub GetPropertyValueString;
sub GetPropertyValues;
sub GetRoot;
sub GetRowHeight;
sub GetSelectedProperties;
sub GetSelectedProperty;
sub GetSelection;
sub GetSelectionBackgroundColour;
sub GetSelectionForegroundColour;
sub GetSplitterPosition;
sub GetStatusBar;
sub GetUncommittedPropertyValue;
sub GetUnspecifiedValueAppearance;
sub GetUnspecifiedValueText;
sub GetVIterator;
sub GetVerticalSpacing;
sub HideProperty;
sub HidePropertyProperty;
sub HidePropertyString;
sub HitTest;
sub InitAllTypeHandlers;
sub Insert;
sub InsertIndexProperty;
sub InsertIndexString;
sub InsertProperty;
sub InsertString;
sub IsAnyModified;
sub IsEditorFocused;
sub IsEditorsValueModified;
sub IsFrozen;
sub IsPropertyCategory;
sub IsPropertyCategoryProperty;
sub IsPropertyCategoryString;
sub IsPropertyEnabled;
sub IsPropertyEnabledProperty;
sub IsPropertyEnabledString;
sub IsPropertyExpanded;
sub IsPropertyExpandedProperty;
sub IsPropertyExpandedString;
sub IsPropertyModified;
sub IsPropertyModifiedProperty;
sub IsPropertyModifiedString;
sub IsPropertySelected;
sub IsPropertySelectedProperty;
sub IsPropertySelectedString;
sub IsPropertyShown;
sub IsPropertyShownProperty;
sub IsPropertyShownString;
sub IsPropertyValueUnspecified;
sub IsPropertyValueUnspecifiedProperty;
sub IsPropertyValueUnspecifiedString;
sub LimitPropertyEditing;
sub LimitPropertyEditingProperty;
sub LimitPropertyEditingString;
sub MakeColumnEditable;
sub OnTLPChanging;
sub RefreshEditor;
sub RefreshProperty;
sub RegisterAdditionalEditors;
sub RegisterEditorClass;
sub RemoveFromSelection;
sub RemoveFromSelectionProperty;
sub RemoveFromSelectionString;
sub RemoveProperty;
sub RemovePropertyProperty;
sub RemovePropertyString;
sub ReplaceProperty;
sub ReplacePropertyProperty;
sub ReplacePropertyString;
sub ResetColours;
sub ResetColumnSizes;
sub RestoreEditableState;
sub SaveEditableState;
sub SelectProperty;
sub SelectPropertyProperty;
sub SelectPropertyString;
sub SetBoolChoices;
sub SetCaptionBackgroundColour;
sub SetCaptionTextColour;
sub SetCellBackgroundColour;
sub SetCellDisabledTextColour;
sub SetCellTextColour;
sub SetColumnCount;
sub SetColumnProportion;
sub SetCurrentCategory;
sub SetCurrentCategoryProperty;
sub SetCurrentCategoryString;
sub SetEmptySpaceColour;
sub SetLineColour;
sub SetMarginColour;
sub SetPropertyAttribute;
sub SetPropertyAttributeAll;
sub SetPropertyAttributeProperty;
sub SetPropertyAttributeString;
sub SetPropertyBackgroundColour;
sub SetPropertyBackgroundColourProperty;
sub SetPropertyBackgroundColourString;
sub SetPropertyCell;
sub SetPropertyCellProperty;
sub SetPropertyCellString;
sub SetPropertyClientData;
sub SetPropertyColoursToDefault;
sub SetPropertyColoursToDefaultProperty;
sub SetPropertyColoursToDefaultString;
sub SetPropertyEditor;
sub SetPropertyEditorNameProperty;
sub SetPropertyEditorNameString;
sub SetPropertyEditorProperty;
sub SetPropertyEditorString;
sub SetPropertyHelpString;
sub SetPropertyHelpStringProperty;
sub SetPropertyHelpStringString;
sub SetPropertyImage;
sub SetPropertyImageProperty;
sub SetPropertyImageString;
sub SetPropertyLabel;
sub SetPropertyLabelProperty;
sub SetPropertyLabelString;
sub SetPropertyMaxLength;
sub SetPropertyMaxLengthProperty;
sub SetPropertyMaxLengthString;
sub SetPropertyName;
sub SetPropertyNameProperty;
sub SetPropertyNameString;
sub SetPropertyReadOnly;
sub SetPropertyReadOnlyProperty;
sub SetPropertyReadOnlyString;
sub SetPropertyTextColour;
sub SetPropertyTextColourProperty;
sub SetPropertyTextColourString;
sub SetPropertyValidator;
sub SetPropertyValidatorProperty;
sub SetPropertyValidatorString;
sub SetPropertyValue;
sub SetPropertyValueAsArrayInt;
sub SetPropertyValueAsArrayInt_property;
sub SetPropertyValueAsArrayInt_string;
sub SetPropertyValueAsArrayString;
sub SetPropertyValueAsArrayString_property;
sub SetPropertyValueAsArrayString_string;
sub SetPropertyValueAsBool;
sub SetPropertyValueAsBool_property;
sub SetPropertyValueAsBool_string;
sub SetPropertyValueAsDateTime;
sub SetPropertyValueAsDateTime_property;
sub SetPropertyValueAsDateTime_string;
sub SetPropertyValueAsDouble;
sub SetPropertyValueAsDouble_property;
sub SetPropertyValueAsDouble_string;
sub SetPropertyValueAsInt;
sub SetPropertyValueAsInt_property;
sub SetPropertyValueAsInt_string;
sub SetPropertyValueAsLong;
sub SetPropertyValueAsLongLong;
sub SetPropertyValueAsLongLong_property;
sub SetPropertyValueAsLongLong_string;
sub SetPropertyValueAsLong_property;
sub SetPropertyValueAsLong_string;
sub SetPropertyValueAsObject;
sub SetPropertyValueAsObject_property;
sub SetPropertyValueAsObject_string;
sub SetPropertyValueAsString;
sub SetPropertyValueAsString_property;
sub SetPropertyValueAsString_string;
sub SetPropertyValueAsULongLong;
sub SetPropertyValueAsULongLong_property;
sub SetPropertyValueAsULongLong_string;
sub SetPropertyValueAsVariant;
sub SetPropertyValueAsVariant_property;
sub SetPropertyValueAsVariant_string;
sub SetPropertyValueString_property;
sub SetPropertyValueString_string;
sub SetPropertyValueUnspecified;
sub SetPropertyValueUnspecifiedProperty;
sub SetPropertyValueUnspecifiedString;
sub SetPropertyValues;
sub SetPropertyValuesProperty;
sub SetPropertyValuesString;
sub SetSelection;
sub SetSelectionBackgroundColour;
sub SetSelectionTextColour;
sub SetSplitterLeft;
sub SetSplitterPosition;
sub SetUnspecifiedValueAppearance;
sub SetValidationFailureBehavior;
sub SetVerticalSpacing;
sub ShowPropertyError;
sub Sort;
sub SortChildren;
sub SortChildrenProperty;
sub SortChildrenString;
sub WasValueChangedInEvent;
sub _get_wxPG_ATTR_DEFAULT_VALUE;
sub _get_wxPG_ATTR_HINT;
sub _get_wxPG_ATTR_INLINE_HELP;
sub _get_wxPG_ATTR_MAX;
sub _get_wxPG_ATTR_MIN;
sub _get_wxPG_ATTR_UNITS;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PropertyGridEvent {
sub CanVeto;
sub Destroy;
sub GetColumn;
sub GetMainParent;
sub GetProperty;
sub GetPropertyName;
sub GetPropertyValue;
sub GetValidationFailureBehavior;
sub GetValue;
sub SetCanVeto;
sub SetProperty;
sub SetValidationFailureBehavior;
sub SetValidationFailureMessage;
sub Veto;
sub WasVetoed;
sub new;
sub newCopy;
sub newFull;
}
package Wx::PropertyGridHitTestResult {
sub CLONE;
sub DESTROY;
sub GetColumn;
sub GetProperty;
sub GetSplitter;
sub GetSplitterHitOffset;
sub new;
}
package Wx::PropertyGridIterator {
sub Assign;
sub AtEnd;
sub GetProperty;
sub Next;
sub Prev;
sub SetBaseParent;
}
package Wx::PropertyGridManager {
sub AddPage;
sub AddPageDefaultBitmap;
sub Append;
sub AppendIn;
sub AppendInProperty;
sub AppendInString;
sub BeginAddChildren;
sub BeginAddChildrenProperty;
sub BeginAddChildrenString;
sub Clear;
sub ClearModifiedStatus;
sub ClearPage;
sub ClearSelection;
sub Collapse;
sub CollapseAll;
sub CollapseProperty;
sub CollapseString;
sub CommitChangesFromEditor;
sub Create;
sub DeleteProperty;
sub DeletePropertyProperty;
sub DeletePropertyString;
sub DisableProperty;
sub DisablePropertyProperty;
sub DisablePropertyString;
sub EditorValidate;
sub EnableCategories;
sub EnableProperty;
sub EnablePropertyProperty;
sub EnablePropertyString;
sub EndAddChildren;
sub EndAddChildrenProperty;
sub EndAddChildrenString;
sub EnsureVisible;
sub Expand;
sub ExpandAll;
sub ExpandProperty;
sub ExpandString;
sub GetColumnCount;
sub GetColumnProportion;
sub GetCurrentPage;
sub GetDescBoxHeight;
sub GetEditorByName;
sub GetFirst;
sub GetFirstChild;
sub GetFirstChildProperty;
sub GetFirstChildString;
sub GetGrid;
sub GetIterator;
sub GetIteratorPosOverload;
sub GetIteratorPropertyOverload;
sub GetPage0;
sub GetPage1;
sub GetPage;
sub GetPageByName;
sub GetPageCount;
sub GetPageName;
sub GetPageRoot;
sub GetPropertiesWithFlag;
sub GetProperty;
sub GetPropertyAttribute;
sub GetPropertyAttributeProperty;
sub GetPropertyAttributeString;
sub GetPropertyBackgroundColour;
sub GetPropertyBackgroundColourProperty;
sub GetPropertyBackgroundColourString;
sub GetPropertyByLabel;
sub GetPropertyByName;
sub GetPropertyByNameName;
sub GetPropertyByNameSubName;
sub GetPropertyCategory;
sub GetPropertyCategoryProperty;
sub GetPropertyCategoryString;
sub GetPropertyClientData;
sub GetPropertyEditor;
sub GetPropertyEditorProperty;
sub GetPropertyEditorString;
sub GetPropertyHelpString;
sub GetPropertyHelpStringProperty;
sub GetPropertyHelpStringString;
sub GetPropertyImage;
sub GetPropertyImageProperty;
sub GetPropertyImageString;
sub GetPropertyLabel;
sub GetPropertyLabelProperty;
sub GetPropertyLabelString;
sub GetPropertyName;
sub GetPropertyTextColour;
sub GetPropertyTextColourProperty;
sub GetPropertyTextColourString;
sub GetPropertyValidator;
sub GetPropertyValidatorProperty;
sub GetPropertyValidatorString;
sub GetPropertyValue;
sub GetPropertyValueAsArrayInt;
sub GetPropertyValueAsArrayIntProperty;
sub GetPropertyValueAsArrayIntString;
sub GetPropertyValueAsArrayString;
sub GetPropertyValueAsArrayStringProperty;
sub GetPropertyValueAsArrayStringString;
sub GetPropertyValueAsBool;
sub GetPropertyValueAsBoolProperty;
sub GetPropertyValueAsBoolString;
sub GetPropertyValueAsDateTime;
sub GetPropertyValueAsDateTimeProperty;
sub GetPropertyValueAsDateTimeString;
sub GetPropertyValueAsDouble;
sub GetPropertyValueAsDoubleProperty;
sub GetPropertyValueAsDoubleString;
sub GetPropertyValueAsInt;
sub GetPropertyValueAsIntProperty;
sub GetPropertyValueAsIntString;
sub GetPropertyValueAsLong;
sub GetPropertyValueAsLongLong;
sub GetPropertyValueAsLongLongProperty;
sub GetPropertyValueAsLongLongString;
sub GetPropertyValueAsLongProperty;
sub GetPropertyValueAsLongString;
sub GetPropertyValueAsString;
sub GetPropertyValueAsStringProperty;
sub GetPropertyValueAsStringString;
sub GetPropertyValueAsULong;
sub GetPropertyValueAsULongLong;
sub GetPropertyValueAsULongLongProperty;
sub GetPropertyValueAsULongLongString;
sub GetPropertyValueAsULongProperty;
sub GetPropertyValueAsULongString;
sub GetPropertyValueProperty;
sub GetPropertyValueString;
sub GetPropertyValues;
sub GetSelectedPage;
sub GetSelectedProperties;
sub GetSelectedProperty;
sub GetSelection;
sub GetToolBar;
sub GetVIterator;
sub HideProperty;
sub HidePropertyProperty;
sub HidePropertyString;
sub InitAllTypeHandlers;
sub Insert;
sub InsertIndexProperty;
sub InsertIndexString;
sub InsertPage;
sub InsertProperty;
sub InsertString;
sub IsAnyModified;
sub IsFrozen;
sub IsPageModified;
sub IsPropertyCategory;
sub IsPropertyCategoryProperty;
sub IsPropertyCategoryString;
sub IsPropertyEnabled;
sub IsPropertyEnabledProperty;
sub IsPropertyEnabledString;
sub IsPropertyExpanded;
sub IsPropertyExpandedProperty;
sub IsPropertyExpandedString;
sub IsPropertyModified;
sub IsPropertyModifiedProperty;
sub IsPropertyModifiedString;
sub IsPropertySelected;
sub IsPropertyShown;
sub IsPropertyShownProperty;
sub IsPropertyShownString;
sub IsPropertyValueUnspecified;
sub IsPropertyValueUnspecifiedProperty;
sub IsPropertyValueUnspecifiedString;
sub LimitPropertyEditing;
sub LimitPropertyEditingProperty;
sub LimitPropertyEditingString;
sub RegisterAdditionalEditors;
sub RemovePage;
sub RemoveProperty;
sub RemovePropertyProperty;
sub RemovePropertyString;
sub ReplaceProperty;
sub ReplacePropertyProperty;
sub ReplacePropertyString;
sub RestoreEditableState;
sub SaveEditableState;
sub SelectPage;
sub SelectPageOLGridPage;
sub SelectPageOLInt;
sub SelectPageOLString;
sub SelectProperty;
sub SetBoolChoices;
sub SetColumnCount;
sub SetColumnProportion;
sub SetColumnTitle;
sub SetDescBoxHeight;
sub SetDescription;
sub SetPageSplitterPosition;
sub SetPropertyAttribute;
sub SetPropertyAttributeAll;
sub SetPropertyAttributeProperty;
sub SetPropertyAttributeString;
sub SetPropertyBackgroundColour;
sub SetPropertyBackgroundColourProperty;
sub SetPropertyBackgroundColourString;
sub SetPropertyCell;
sub SetPropertyCellProperty;
sub SetPropertyCellString;
sub SetPropertyClientData;
sub SetPropertyColoursToDefault;
sub SetPropertyColoursToDefaultProperty;
sub SetPropertyColoursToDefaultString;
sub SetPropertyEditor;
sub SetPropertyEditorNameProperty;
sub SetPropertyEditorNameString;
sub SetPropertyEditorProperty;
sub SetPropertyEditorString;
sub SetPropertyHelpString;
sub SetPropertyHelpStringProperty;
sub SetPropertyHelpStringString;
sub SetPropertyImage;
sub SetPropertyImageProperty;
sub SetPropertyImageString;
sub SetPropertyLabel;
sub SetPropertyLabelProperty;
sub SetPropertyLabelString;
sub SetPropertyMaxLength;
sub SetPropertyMaxLengthProperty;
sub SetPropertyMaxLengthString;
sub SetPropertyName;
sub SetPropertyNameProperty;
sub SetPropertyNameString;
sub SetPropertyReadOnly;
sub SetPropertyReadOnlyProperty;
sub SetPropertyReadOnlyString;
sub SetPropertyTextColour;
sub SetPropertyTextColourProperty;
sub SetPropertyTextColourString;
sub SetPropertyValidator;
sub SetPropertyValidatorProperty;
sub SetPropertyValidatorString;
sub SetPropertyValue;
sub SetPropertyValueAsArrayInt;
sub SetPropertyValueAsArrayInt_property;
sub SetPropertyValueAsArrayInt_string;
sub SetPropertyValueAsArrayString;
sub SetPropertyValueAsArrayString_property;
sub SetPropertyValueAsArrayString_string;
sub SetPropertyValueAsBool;
sub SetPropertyValueAsBool_property;
sub SetPropertyValueAsBool_string;
sub SetPropertyValueAsDateTime;
sub SetPropertyValueAsDateTime_property;
sub SetPropertyValueAsDateTime_string;
sub SetPropertyValueAsDouble;
sub SetPropertyValueAsDouble_property;
sub SetPropertyValueAsDouble_string;
sub SetPropertyValueAsInt;
sub SetPropertyValueAsInt_property;
sub SetPropertyValueAsInt_string;
sub SetPropertyValueAsLong;
sub SetPropertyValueAsLongLong;
sub SetPropertyValueAsLongLong_property;
sub SetPropertyValueAsLongLong_string;
sub SetPropertyValueAsLong_property;
sub SetPropertyValueAsLong_string;
sub SetPropertyValueAsObject;
sub SetPropertyValueAsObject_property;
sub SetPropertyValueAsObject_string;
sub SetPropertyValueAsString;
sub SetPropertyValueAsString_property;
sub SetPropertyValueAsString_string;
sub SetPropertyValueAsULongLong;
sub SetPropertyValueAsULongLong_property;
sub SetPropertyValueAsULongLong_string;
sub SetPropertyValueAsVariant;
sub SetPropertyValueAsVariant_property;
sub SetPropertyValueAsVariant_string;
sub SetPropertyValueString_property;
sub SetPropertyValueString_string;
sub SetPropertyValueUnspecified;
sub SetPropertyValueUnspecifiedProperty;
sub SetPropertyValueUnspecifiedString;
sub SetPropertyValues;
sub SetPropertyValuesProperty;
sub SetPropertyValuesString;
sub SetSplitterLeft;
sub SetSplitterPosition;
sub SetValidationFailureBehavior;
sub ShowHeader;
sub Sort;
sub SortChildren;
sub SortChildrenProperty;
sub SortChildrenString;
sub new;
sub newDefault;
sub newFull;
}
package Wx::PropertyGridPage {
sub Append;
sub AppendIn;
sub AppendInProperty;
sub AppendInString;
sub BeginAddChildren;
sub BeginAddChildrenProperty;
sub BeginAddChildrenString;
sub Clear;
sub ClearModifiedStatus;
sub ClearSelection;
sub Collapse;
sub CollapseAll;
sub CollapseProperty;
sub CollapseString;
sub DeleteProperty;
sub DeletePropertyProperty;
sub DeletePropertyString;
sub DisableProperty;
sub DisablePropertyProperty;
sub DisablePropertyString;
sub EditorValidate;
sub EnableProperty;
sub EnablePropertyProperty;
sub EnablePropertyString;
sub EndAddChildren;
sub EndAddChildrenProperty;
sub EndAddChildrenString;
sub Expand;
sub ExpandAll;
sub ExpandProperty;
sub ExpandString;
sub FitColumns;
sub GetColumnProportion;
sub GetEditorByName;
sub GetFirst;
sub GetFirstChild;
sub GetFirstChildProperty;
sub GetFirstChildString;
sub GetIndex;
sub GetIterator;
sub GetIteratorPosOverload;
sub GetIteratorPropertyOverload;
sub GetPropertiesWithFlag;
sub GetProperty;
sub GetPropertyAttribute;
sub GetPropertyAttributeProperty;
sub GetPropertyAttributeString;
sub GetPropertyBackgroundColour;
sub GetPropertyBackgroundColourProperty;
sub GetPropertyBackgroundColourString;
sub GetPropertyByLabel;
sub GetPropertyByName;
sub GetPropertyByNameName;
sub GetPropertyByNameSubName;
sub GetPropertyCategory;
sub GetPropertyClientData;
sub GetPropertyEditor;
sub GetPropertyEditorProperty;
sub GetPropertyEditorString;
sub GetPropertyHelpString;
sub GetPropertyHelpStringProperty;
sub GetPropertyHelpStringString;
sub GetPropertyImage;
sub GetPropertyImageProperty;
sub GetPropertyImageString;
sub GetPropertyLabel;
sub GetPropertyLabelProperty;
sub GetPropertyLabelString;
sub GetPropertyName;
sub GetPropertyTextColour;
sub GetPropertyTextColourProperty;
sub GetPropertyTextColourString;
sub GetPropertyValidator;
sub GetPropertyValidatorProperty;
sub GetPropertyValidatorString;
sub GetPropertyValue;
sub GetPropertyValueAsArrayInt;
sub GetPropertyValueAsArrayIntProperty;
sub GetPropertyValueAsArrayIntString;
sub GetPropertyValueAsArrayString;
sub GetPropertyValueAsArrayStringProperty;
sub GetPropertyValueAsArrayStringString;
sub GetPropertyValueAsBool;
sub GetPropertyValueAsBoolProperty;
sub GetPropertyValueAsBoolString;
sub GetPropertyValueAsDateTime;
sub GetPropertyValueAsDateTimeProperty;
sub GetPropertyValueAsDateTimeString;
sub GetPropertyValueAsDouble;
sub GetPropertyValueAsDoubleProperty;
sub GetPropertyValueAsDoubleString;
sub GetPropertyValueAsInt;
sub GetPropertyValueAsIntProperty;
sub GetPropertyValueAsIntString;
sub GetPropertyValueAsLong;
sub GetPropertyValueAsLongLong;
sub GetPropertyValueAsLongLongProperty;
sub GetPropertyValueAsLongLongString;
sub GetPropertyValueAsLongProperty;
sub GetPropertyValueAsLongString;
sub GetPropertyValueAsString;
sub GetPropertyValueAsStringProperty;
sub GetPropertyValueAsStringString;
sub GetPropertyValueAsULong;
sub GetPropertyValueAsULongLong;
sub GetPropertyValueAsULongLongProperty;
sub GetPropertyValueAsULongLongString;
sub GetPropertyValueAsULongProperty;
sub GetPropertyValueAsULongString;
sub GetPropertyValueProperty;
sub GetPropertyValueString;
sub GetPropertyValues;
sub GetRoot;
sub GetSelectedProperties;
sub GetSplitterPosition;
sub GetToolId;
sub GetVIterator;
sub HideProperty;
sub HidePropertyProperty;
sub HidePropertyString;
sub Init;
sub InitAllTypeHandlers;
sub Insert;
sub InsertIndexProperty;
sub InsertIndexString;
sub InsertProperty;
sub InsertString;
sub IsHandlingAllEvents;
sub IsPropertyCategory;
sub IsPropertyCategoryProperty;
sub IsPropertyCategoryString;
sub IsPropertyEnabled;
sub IsPropertyEnabledProperty;
sub IsPropertyEnabledString;
sub IsPropertyExpanded;
sub IsPropertyExpandedProperty;
sub IsPropertyExpandedString;
sub IsPropertyModified;
sub IsPropertyModifiedProperty;
sub IsPropertyModifiedString;
sub IsPropertySelected;
sub IsPropertyShown;
sub IsPropertyShownProperty;
sub IsPropertyShownString;
sub IsPropertyValueUnspecified;
sub IsPropertyValueUnspecifiedProperty;
sub IsPropertyValueUnspecifiedString;
sub LimitPropertyEditing;
sub LimitPropertyEditingProperty;
sub LimitPropertyEditingString;
sub OnShow;
sub RefreshProperty;
sub RegisterAdditionalEditors;
sub RemoveProperty;
sub RemovePropertyProperty;
sub RemovePropertyString;
sub ReplaceProperty;
sub ReplacePropertyProperty;
sub ReplacePropertyString;
sub RestoreEditableState;
sub SaveEditableState;
sub SetBoolChoices;
sub SetColumnProportion;
sub SetPropertyAttribute;
sub SetPropertyAttributeAll;
sub SetPropertyAttributeProperty;
sub SetPropertyAttributeString;
sub SetPropertyBackgroundColour;
sub SetPropertyBackgroundColourProperty;
sub SetPropertyBackgroundColourString;
sub SetPropertyCell;
sub SetPropertyCellProperty;
sub SetPropertyCellString;
sub SetPropertyClientData;
sub SetPropertyColoursToDefault;
sub SetPropertyColoursToDefaultProperty;
sub SetPropertyColoursToDefaultString;
sub SetPropertyEditor;
sub SetPropertyEditorNameProperty;
sub SetPropertyEditorNameString;
sub SetPropertyEditorProperty;
sub SetPropertyEditorString;
sub SetPropertyHelpString;
sub SetPropertyHelpStringProperty;
sub SetPropertyHelpStringString;
sub SetPropertyImage;
sub SetPropertyImageProperty;
sub SetPropertyImageString;
sub SetPropertyLabel;
sub SetPropertyLabelProperty;
sub SetPropertyLabelString;
sub SetPropertyMaxLength;
sub SetPropertyMaxLengthProperty;
sub SetPropertyMaxLengthString;
sub SetPropertyName;
sub SetPropertyNameProperty;
sub SetPropertyNameString;
sub SetPropertyReadOnly;
sub SetPropertyReadOnlyProperty;
sub SetPropertyReadOnlyString;
sub SetPropertyTextColour;
sub SetPropertyTextColourProperty;
sub SetPropertyTextColourString;
sub SetPropertyValidator;
sub SetPropertyValidatorProperty;
sub SetPropertyValidatorString;
sub SetPropertyValue;
sub SetPropertyValueAsArrayInt;
sub SetPropertyValueAsArrayInt_property;
sub SetPropertyValueAsArrayInt_string;
sub SetPropertyValueAsArrayString;
sub SetPropertyValueAsArrayString_property;
sub SetPropertyValueAsArrayString_string;
sub SetPropertyValueAsBool;
sub SetPropertyValueAsBool_property;
sub SetPropertyValueAsBool_string;
sub SetPropertyValueAsDateTime;
sub SetPropertyValueAsDateTime_property;
sub SetPropertyValueAsDateTime_string;
sub SetPropertyValueAsDouble;
sub SetPropertyValueAsDouble_property;
sub SetPropertyValueAsDouble_string;
sub SetPropertyValueAsInt;
sub SetPropertyValueAsInt_property;
sub SetPropertyValueAsInt_string;
sub SetPropertyValueAsLong;
sub SetPropertyValueAsLongLong;
sub SetPropertyValueAsLongLong_property;
sub SetPropertyValueAsLongLong_string;
sub SetPropertyValueAsLong_property;
sub SetPropertyValueAsLong_string;
sub SetPropertyValueAsObject;
sub SetPropertyValueAsObject_property;
sub SetPropertyValueAsObject_string;
sub SetPropertyValueAsString;
sub SetPropertyValueAsString_property;
sub SetPropertyValueAsString_string;
sub SetPropertyValueAsULongLong;
sub SetPropertyValueAsULongLong_property;
sub SetPropertyValueAsULongLong_string;
sub SetPropertyValueAsVariant;
sub SetPropertyValueAsVariant_property;
sub SetPropertyValueAsVariant_string;
sub SetPropertyValueString_property;
sub SetPropertyValueString_string;
sub SetPropertyValueUnspecified;
sub SetPropertyValueUnspecifiedProperty;
sub SetPropertyValueUnspecifiedString;
sub SetPropertyValues;
sub SetPropertyValuesProperty;
sub SetPropertyValuesString;
sub SetSplitterPosition;
sub SetValidationFailureBehavior;
sub Sort;
sub SortChildren;
sub SortChildrenProperty;
sub SortChildrenString;
sub new;
}
package Wx::PropertySheetDialog {
sub Create;
sub CreateButtons;
sub GetBookCtrl;
sub GetInnerSizer;
sub GetSheetInnerBorder;
sub GetSheetOuterBorder;
sub GetSheetStyle;
sub LayoutDialog;
sub SetBookCtrl;
sub SetInnerSize;
sub SetSheetInnerBorder;
sub SetSheetOuterBorder;
sub SetSheetStyle;
sub newDefault;
sub newFull;
}
package Wx::RadioBox {
sub Create;
sub EnableItem;
sub FindString;
sub GetColumnCount;
sub GetItemFromPoint;
sub GetItemHelpText;
sub GetItemLabel;
sub GetItemToolTip;
sub GetRowCount;
sub GetSelection;
sub GetString;
sub GetStringSelection;
sub IsItemEnabled;
sub IsItemShown;
sub SetItemHelpText;
sub SetItemLabel;
sub SetItemToolTip;
sub SetSelection;
sub SetString;
sub SetStringSelection;
sub ShowItem;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RadioButton {
sub Create;
sub GetValue;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RearrangeCtrl {
sub Create;
sub GetList;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RearrangeDialog {
sub AddExtraControls;
sub Create;
sub GetList;
sub GetOrder;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RearrangeList {
sub CanMoveCurrentDown;
sub CanMoveCurrentUp;
sub Create;
sub GetCurrentOrder;
sub MoveCurrentDown;
sub MoveCurrentUp;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Rect {
sub CLONE;
sub CentreIn;
sub Contains;
sub ContainsPoint;
sub ContainsRect;
sub ContainsXY;
sub DESTROY;
sub Deflate;
sub GetBottom;
sub GetBottomLeft;
sub GetBottomRight;
sub GetHeight;
sub GetLeft;
sub GetPosition;
sub GetRight;
sub GetSize;
sub GetTop;
sub GetTopLeft;
sub GetTopRight;
sub GetWidth;
sub GetX;
sub GetY;
sub Inflate;
sub Inside;
sub Intersect;
sub Intersects;
sub IsEmpty;
sub Offset;
sub SetHeight;
sub SetPosition;
sub SetSize;
sub SetWidth;
sub SetX;
sub SetY;
sub Union;
sub height;
sub new;
sub newPP;
sub newPS;
sub newXYWH;
sub width;
sub x;
sub y;
}
package Wx::RegConfig {
sub new;
}
package Wx::Region {
sub CLONE;
sub Clear;
sub Contains;
sub ContainsPoint;
sub ContainsRect;
sub ContainsXY;
sub ContainsXYWH;
sub ConvertToBitmap;
sub DESTROY;
sub GetBox;
sub GetBoxXYWH;
sub Intersect;
sub IntersectRect;
sub IntersectRegion;
sub IntersectXYWH;
sub IsEmpty;
sub IsEqual;
sub Offset;
sub Subtract;
sub SubtractRect;
sub SubtractRegion;
sub Union;
sub UnionBitmap;
sub UnionBitmapOnly;
sub UnionRect;
sub UnionRegion;
sub UnionXYWH;
sub Xor;
sub XorRect;
sub XorRegion;
sub XorXYWH;
sub new;
sub newBitmap;
sub newBitmapOnly;
sub newEmpty;
sub newPP;
sub newPolygon;
sub newRect;
sub newXYWH;
}
package Wx::RegionIterator {
sub CLONE;
sub DESTROY;
sub GetH;
sub GetHeight;
sub GetRect;
sub GetW;
sub GetWidth;
sub GetX;
sub GetY;
sub HaveRects;
sub Reset;
sub ResetRegion;
sub ResetVoid;
sub new;
sub newCopy;
sub newDefault;
sub newRegion;
}
package Wx::RibbonAUIArtProvider {
sub CLONE;
sub Clone;
sub DESTROY;
sub GetColour;
sub SetColour;
sub SetColourScheme;
sub SetFont;
sub new;
}
package Wx::RibbonArtProvider {
sub CLONE;
sub Clone;
sub GetColour;
sub GetColourScheme;
sub GetFlags;
sub GetFont;
sub GetMetric;
sub SetColour;
sub SetColourScheme;
sub SetFlags;
sub SetFont;
sub SetMetric;
}
package Wx::RibbonBar {
sub ArePanelsShown;
sub ClearPages;
sub Create;
sub DeletePage;
sub DismissExpandedPanel;
sub GetActivePage;
sub GetPage;
sub GetPageCount;
sub GetWindowStyleFlag;
sub HasMultiplePages;
sub HidePanels;
sub Realize;
sub SetActivePage;
sub SetActivePageByIndex;
sub SetActivePageByPage;
sub SetArtProvider;
sub SetTabCtrlMargins;
sub SetWindowStyleFlag;
sub ShowPanels;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RibbonBarEvent {
sub Clone;
sub GetPage;
sub SetPage;
sub new;
}
package Wx::RibbonButtonBar {
sub AddButton;
sub AddButtonLongParams;
sub AddButtonShortParams;
sub AddDropdownButton;
sub AddHybridButton;
sub AddToggleButton;
sub ClearButtons;
sub Create;
sub DeleteButton;
sub EnableButton;
sub GetButtonCount;
sub GetMinSize;
sub InsertButton;
sub InsertButtonLongParams;
sub InsertButtonShortParams;
sub InsertDropdownButton;
sub InsertHybridButton;
sub InsertToggleButton;
sub IsSizingContinuous;
sub Realize;
sub SetArtProvider;
sub ToggleButton;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RibbonButtonBarButtonBase {
sub GetBitmapLarge;
sub GetBitmapLargeDisabled;
sub GetBitmapSmall;
sub GetBitmapSmallDisabled;
sub GetClientData;
sub GetHelpString;
sub GetId;
sub GetKind;
sub GetLabel;
sub GetLargestSize;
sub GetSmallerSize;
sub GetState;
sub SetClientData;
sub bitmap_large;
sub bitmap_large_disabled;
sub bitmap_small;
sub bitmap_small_disabled;
sub client_data;
sub help_string;
sub id;
sub kind;
sub label;
sub state;
}
package Wx::RibbonButtonBarEvent {
sub Clone;
sub GetBar;
sub PopupMenu;
sub SetBar;
sub new;
}
package Wx::RibbonControl {
sub Create;
sub GetAncestorRibbonBar;
sub GetArtProvider;
sub GetBestSizeForParentSize;
sub GetNextLargerSize0;
sub GetNextLargerSize1;
sub GetNextLargerSize;
sub GetNextSmallerSize0;
sub GetNextSmallerSize1;
sub GetNextSmallerSize;
sub IsSizingContinuous;
sub Realise;
sub Realize;
sub SetArtProvider;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RibbonGallery {
sub Append;
sub AppendBasic;
sub AppendClientData;
sub Clear;
sub Create;
sub EnsureVisible;
sub GetActiveItem;
sub GetCount;
sub GetDownButtonState;
sub GetExtensionButtonState;
sub GetHoveredItem;
sub GetItem;
sub GetItemClientData;
sub GetSelection;
sub GetUpButtonState;
sub IsEmpty;
sub IsHovered;
sub IsSizingContinuous;
sub Layout;
sub Realize;
sub ScrollLines;
sub ScrollPixels;
sub SetItemClientData;
sub SetSelection;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RibbonGalleryEvent {
sub Clone;
sub GetGallery;
sub GetGalleryItem;
sub SetGallery;
sub SetGalleryItem;
sub new;
}
package Wx::RibbonGalleryItem {
sub CLONE;
sub DESTROY;
sub GetBitmap;
sub GetClientData;
sub GetPosition;
sub IsVisible;
sub SetBitmap;
sub SetClientData;
sub SetId;
sub SetIsVisible;
sub SetPosition;
}
package Wx::RibbonMSWArtProvider {
sub CLONE;
sub Clone;
sub DESTROY;
sub GetColour;
sub GetColourScheme;
sub GetFlags;
sub GetFont;
sub GetMetric;
sub SetColour;
sub SetColourScheme;
sub SetFlags;
sub SetFont;
sub SetMetric;
sub new;
}
package Wx::RibbonPage {
sub AdjustRectToIncludeScrollButtons;
sub Create;
sub DismissExpandedPanel;
sub GetIcon;
sub GetMajorAxis;
sub GetMinSize;
sub Layout;
sub Realize;
sub RemoveChild;
sub ScrollLines0;
sub ScrollLines1;
sub ScrollLines;
sub ScrollPixels;
sub SetArtProvider;
sub SetSizeWithScrollButtonAdjustment;
sub Show;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RibbonPanel {
sub AddChild;
sub CanAutoMinimise;
sub Create;
sub GetBestSizeForParentSize;
sub GetExpandedDummy;
sub GetExpandedPanel;
sub GetFlags;
sub GetMinSize;
sub GetMinimisedIcon;
sub HasExtButton;
sub HideExpanded;
sub IsExtButtonHovered;
sub IsHovered;
sub IsMinimised;
sub IsMinimisedDefault;
sub IsMinimisedSize;
sub IsSizingContinuous;
sub Layout;
sub Realize;
sub RemoveChild;
sub SetArtProvider;
sub ShowExpanded;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RibbonToolBar {
sub AddDropdownTool;
sub AddHybridTool;
sub AddSeparator;
sub AddToggleTool;
sub AddTool;
sub AddToolClientData;
sub AddToolSimple;
sub ClearTools;
sub Create;
sub DeleteTool;
sub DeleteToolByPos;
sub EnableTool;
sub FindById;
sub GetBestSizeForParentSize;
sub GetToolByPos;
sub GetToolClientData;
sub GetToolCount;
sub GetToolEnabled;
sub GetToolHelpString;
sub GetToolId;
sub GetToolKind;
sub GetToolPos;
sub GetToolState;
sub InsertDropdownTool;
sub InsertHybridTool;
sub InsertSeparator;
sub InsertToggleTool;
sub InsertTool;
sub InsertToolClientData;
sub InsertToolSimple;
sub IsSizingContinuous;
sub Realize;
sub SetRows;
sub SetToolClientData;
sub SetToolDisabledBitmap;
sub SetToolHelpString;
sub SetToolNormalBitmap;
sub ToggleTool;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RibbonToolBarEvent {
sub Clone;
sub GetBar;
sub PopupMenu;
sub SetBar;
sub new;
}
package Wx::RibbonToolBarToolBase {
sub GetBitmap;
sub GetBitmapDisabled;
sub GetClientData;
sub GetDropDown;
sub GetHelpString;
sub GetId;
sub GetKind;
sub GetPosition;
sub GetSize;
sub GetState;
sub SetClientData;
sub bitmap;
sub bitmap_disabled;
sub client_data;
sub dropdown;
sub help_string;
sub id;
sub kind;
sub position;
sub size;
sub state;
}
package Wx::RichText {
sub SetEvents;
}
package Wx::RichTextAttr {
sub CLONE;
sub DESTROY;
sub GetAlignment;
sub GetBackgroundColour;
sub GetBulletFont;
sub GetBulletName;
sub GetBulletNumber;
sub GetBulletStyle;
sub GetBulletText;
sub GetCharacterStyleName;
sub GetFlags;
sub GetFontAttributes;
sub GetFontFaceName;
sub GetFontSize;
sub GetFontStyle;
sub GetFontUnderlined;
sub GetFontWeight;
sub GetLeftIndent;
sub GetLeftSubIndent;
sub GetLineSpacing;
sub GetListStyleName;
sub GetParagraphSpacingAfter;
sub GetParagraphSpacingBefore;
sub GetParagraphStyleName;
sub GetRightIndent;
sub GetTabs;
sub GetTextColour;
sub GetURL;
sub HasAlignment;
sub HasBackgroundColour;
sub HasBulletName;
sub HasBulletNumber;
sub HasBulletStyle;
sub HasBulletText;
sub HasCharacterStyleName;
sub HasFont;
sub HasLeftIndent;
sub HasLineSpacing;
sub HasListStyleName;
sub HasPageBreak;
sub HasParagraphSpacingAfter;
sub HasParagraphSpacingBefore;
sub HasParagraphStyleName;
sub HasRightIndent;
sub HasTabs;
sub HasTextColour;
sub HasURL;
sub IsCharacterStyle;
sub IsDefault;
sub IsParagraphStyle;
sub SetAlignment;
sub SetBackgroundColour;
sub SetBulletFont;
sub SetBulletName;
sub SetBulletNumber;
sub SetBulletStyle;
sub SetBulletText;
sub SetCharacterStyleName;
sub SetFlags;
sub SetFontFaceName;
sub SetFontSize;
sub SetFontStyle;
sub SetFontUnderlined;
sub SetFontWeight;
sub SetLeftIndent;
sub SetLineSpacing;
sub SetListStyleName;
sub SetPageBreak;
sub SetParagraphSpacingAfter;
sub SetParagraphSpacingBefore;
sub SetParagraphStyleName;
sub SetRightIndent;
sub SetTabs;
sub SetTextColour;
sub SetURL;
sub new;
sub newAttr;
sub newAttrEx;
sub newCopy;
sub newDefault;
}
package Wx::RichTextBuffer {
sub AddEventHandler;
sub AddHandler;
sub AddImage;
sub AddParagraph;
sub BatchingUndo;
sub BeginAlignment;
sub BeginBatchUndo;
sub BeginBold;
sub BeginCharacterStyle;
sub BeginFont;
sub BeginFontSize;
sub BeginItalic;
sub BeginLeftIndent;
sub BeginLineSpacing;
sub BeginListStyle;
sub BeginNumberedBullet;
sub BeginParagraphSpacing;
sub BeginParagraphStyle;
sub BeginRightIndent;
sub BeginStandardBullet;
sub BeginStyle;
sub BeginSuppressUndo;
sub BeginSymbolBullet0;
sub BeginSymbolBullet;
sub BeginTextColour;
sub BeginURL;
sub BeginUnderline;
sub CLONE;
sub ClearListStyle;
sub Destroy;
sub EndAlignment;
sub EndAllStyles;
sub EndBatchUndo;
sub EndBold;
sub EndCharacterStyle;
sub EndFont;
sub EndFontSize;
sub EndItalic;
sub EndLeftIndent;
sub EndLineSpacing;
sub EndListStyle;
sub EndNumberedBullet;
sub EndParagraphSpacing;
sub EndParagraphStyle;
sub EndRightIndent;
sub EndStandardBullet;
sub EndStyle;
sub EndSuppressUndo;
sub EndSymbolBullet;
sub EndTextColour;
sub EndURL;
sub EndUnderline;
sub GetBasicStyle;
sub GetDefaultStyle;
sub GetRichTextAttrStyle;
sub GetRichTextAttrStyleForRange;
sub GetRichTextAttrUncombinedStyle;
sub GetStyleSheet;
sub InsertNewlineWithUndo;
sub InsertTextWithUndo;
sub PopStyleSheet;
sub PushStyleSheet;
sub ResetAndClearCommands;
sub SetBasicStyle;
sub SetBasicStyleEx;
sub SetBasicStyleRich;
sub SetStyle;
sub SetStyleEx;
sub SetStyleRich;
sub SetStyleSheet;
sub SuppressingUndo;
sub new;
}
package Wx::RichTextCharacterStyleDefinition {
sub new;
}
package Wx::RichTextCtrl {
sub AddImage;
sub AddParagraph;
sub AppendText;
sub ApplyAlignmentToSelection;
sub ApplyBoldToSelection;
sub ApplyItalicToSelection;
sub ApplyStyle;
sub ApplyStyleSheet;
sub ApplyUnderlineToSelection;
sub AutoComplete;
sub AutoCompleteFileNames;
sub BatchingUndo;
sub BeginAlignment;
sub BeginBatchUndo;
sub BeginBold;
sub BeginCharacterStyle;
sub BeginFont;
sub BeginFontSize;
sub BeginItalic;
sub BeginLeftIndent;
sub BeginLineSpacing;
sub BeginListStyle;
sub BeginNumberedBullet;
sub BeginParagraphSpacing;
sub BeginParagraphStyle;
sub BeginRightIndent;
sub BeginStandardBullet;
sub BeginStyle;
sub BeginSuppressUndo;
sub BeginSymbolBullet;
sub BeginTextColour;
sub BeginURL;
sub BeginUnderline;
sub CanCopy;
sub CanCut;
sub CanDeleteSelection;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub ChangeValue;
sub Clear;
sub ClearListStyle;
sub Copy;
sub Create;
sub Cut;
sub DeleteSelectedContent;
sub DeleteSelection;
sub DiscardEdits;
sub EndAlignment;
sub EndAllStyles;
sub EndBatchUndo;
sub EndBold;
sub EndCharacterStyle;
sub EndFont;
sub EndFontSize;
sub EndItalic;
sub EndLeftIndent;
sub EndLineSpacing;
sub EndListStyle;
sub EndNumberedBullet;
sub EndParagraphSpacing;
sub EndParagraphStyle;
sub EndRightIndent;
sub EndStandardBullet;
sub EndStyle;
sub EndSuppressUndo;
sub EndSymbolBullet;
sub EndTextColour;
sub EndURL;
sub EndUnderline;
sub ExtendSelection;
sub FindNextWordPosition;
sub GetAdjustedCaretPosition;
sub GetBasicStyle;
sub GetBuffer;
sub GetCaretPosition;
sub GetCaretPositionForDefaultStyle;
sub GetCaretPositionForIndex;
sub GetDefaultStyle;
sub GetDefaultStyleEx;
sub GetDelayedLayoutThreshold;
sub GetFilename;
sub GetFirstVisiblePoint;
sub GetFirstVisiblePosition;
sub GetHint;
sub GetInsertionPoint;
sub GetInternalSelectionRange;
sub GetLastPosition;
sub GetLineLength;
sub GetLineText;
sub GetLogicalPoint;
sub GetMargins;
sub GetNumberOfLines;
sub GetPhysicalPoint;
sub GetRange;
sub GetRichTextAttrStyle;
sub GetRichTextAttrStyleForRange;
sub GetRichTextAttrUncombinedStyle;
sub GetSelection;
sub GetSelectionRange;
sub GetStringSelection;
sub GetStyle;
sub GetStyleForRange;
sub GetStyleSheet;
sub GetTextAttrExStyle;
sub GetTextAttrExStyleForRange;
sub GetTextAttrStyle;
sub GetValue;
sub HasCAEx;
sub HasCARich;
sub HasCharacterAttributes;
sub HasPAEx;
sub HasPARich;
sub HasParagraphAttributes;
sub HasSelection;
sub HitTest;
sub IsDefaultStyleShowing;
sub IsEditable;
sub IsEmpty;
sub IsModified;
sub IsPositionVisible;
sub IsSelectionAligned;
sub IsSelectionBold;
sub IsSelectionItalics;
sub IsSelectionUnderlined;
sub LayoutContent;
sub LineBreak;
sub LoadFile;
sub MarkDirty;
sub MoveCaret;
sub MoveCaretBack;
sub MoveCaretForward;
sub MoveDown;
sub MoveEnd;
sub MoveHome;
sub MoveLeft;
sub MoveRight;
sub MoveToLineEnd;
sub MoveToLineStart;
sub MoveToParagraphEnd;
sub MoveToParagraphStart;
sub MoveUp;
sub Newline;
sub PageDown;
sub PageUp;
sub Paste;
sub PopStyleSheet;
sub PositionCaret;
sub PositionToXY;
sub PushStyleSheet;
sub Redo;
sub Remove;
sub RemoveSelection;
sub Replace;
sub SaveFile;
sub ScrollIntoView;
sub SelectAll;
sub SelectNone;
sub SelectWord;
sub SetAndShowDefaultStyle;
sub SetBasicStyle;
sub SetBasicStyleEx;
sub SetBasicStyleRich;
sub SetCaretPosition;
sub SetCaretPositionForDefaultStyle;
sub SetDefaultStyle;
sub SetDefaultStyleDefault;
sub SetDefaultStyleEx;
sub SetDefaultStyleToCursorStyle;
sub SetDelayedLayoutThreshold;
sub SetEditable;
sub SetFilename;
sub SetHint;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetInternalSelectionRange;
sub SetMargins;
sub SetMaxLength;
sub SetModified;
sub SetSelection;
sub SetSelectionRange;
sub SetStyle;
sub SetStyleEx;
sub SetStyleExExRange;
sub SetStyleExFromTo;
sub SetStyleExRange;
sub SetStyleFromTo;
sub SetStyleRange;
sub SetStyleSheet;
sub SetValue;
sub ShowPosition;
sub SuppressingUndo;
sub Undo;
sub WordLeft;
sub WordRight;
sub WriteImage;
sub WriteImageBitmap;
sub WriteImageFile;
sub WriteImageImage;
sub WriteText;
sub XYToPosition;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextEvent {
sub GetFlags;
sub GetNewStyleSheet;
sub GetOldStyleSheet;
sub SetFlags;
sub SetNewStyleSheet;
sub SetOldStyleSheet;
}
package Wx::RichTextFileHandler {
sub CanHandle;
sub CanLoad;
sub CanSave;
sub GetEncoding;
sub GetExtension;
sub GetName;
sub GetType;
sub IsVisible;
sub LoadFile;
sub SaveFile;
sub SetEncoding;
sub SetExtension;
sub SetName;
sub SetType;
sub SetVisible;
}
package Wx::RichTextFormattingDialog {
sub AddPageId;
sub ApplyStyle;
sub Create;
sub GetAttributes;
sub GetDialogStyleDefinition;
sub GetImageList;
sub GetStyle;
sub GetStyleDefinition;
sub GetStyleSheet;
sub SetAttributes;
sub SetImageList;
sub SetShowToolTips;
sub SetStyle;
sub SetStyleDefinition;
sub ShowToolTips;
sub UpdateDisplay;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextHTMLHandler {
sub ClearTemporaryImageLocations;
sub DeleteTemporaryImages;
sub GetFontSizeMapping;
sub GetTempDir;
sub GetTemporaryImageLocations;
sub SetFileCounter;
sub SetFontSizeMapping;
sub SetTempDir;
sub SetTemporaryImageLocations;
sub new;
}
package Wx::RichTextHeaderFooterData {
sub CLONE;
sub Clear;
sub DESTROY;
sub GetFont;
sub GetFooterMargin;
sub GetFooterText;
sub GetHeaderMargin;
sub GetHeaderText;
sub GetShowOnFirstPage;
sub GetText;
sub GetTextColour;
sub SetFont;
sub SetFooterText;
sub SetHeaderText;
sub SetMargins;
sub SetShowOnFirstPage;
sub SetText;
sub SetTextColour;
sub new;
sub newCopy;
sub newDefault;
}
package Wx::RichTextListStyleDefinition {
sub CombineWithParagraphStyle;
sub Copy;
sub FindLevelForIndent;
sub GetCombinedStyle;
sub GetCombinedStyleForLevel;
sub GetLevelAttributes;
sub GetLevelCount;
sub IsNumbered;
sub SetAttributes;
sub SetLevelAttributes;
sub new;
}
package Wx::RichTextParagraphStyleDefinition {
sub Copy;
sub GetNextStyle;
sub SetNextStyle;
sub new;
}
package Wx::RichTextPrinting {
sub CLONE;
sub DESTROY;
sub GetFooterText;
sub GetHeaderFooterData;
sub GetHeaderText;
sub GetPageSetupData;
sub GetParentWindow;
sub GetPreviewRect;
sub GetPrintData;
sub GetRichTextBufferPreview;
sub GetRichTextBufferPrinting;
sub GetTitle;
sub PageSetup;
sub PreviewBuffer;
sub PreviewFile;
sub PrintBuffer;
sub PrintFile;
sub SetFooterText;
sub SetHeaderFooterData;
sub SetHeaderFooterFont;
sub SetHeaderFooterTextColour;
sub SetHeaderText;
sub SetPageSetupData;
sub SetParentWindow;
sub SetPreviewRect;
sub SetPrintData;
sub SetRichTextBufferPreview;
sub SetRichTextBufferPrinting;
sub SetShowOnFirstPage;
sub SetTitle;
sub new;
}
package Wx::RichTextPrintout {
sub CalculateScaling;
sub Destroy;
sub GetHeaderFooterData;
sub GetPageInfo;
sub GetRichTextBuffer;
sub HasPage;
sub OnBeginDocument;
sub OnPreparePrinting;
sub OnPrintPage;
sub SetHeaderFooterData;
sub SetMargins;
sub SetRichTextBuffer;
sub new;
}
package Wx::RichTextRange {
sub CLONE;
sub Contains;
sub DESTROY;
sub GetEnd;
sub GetLength;
sub GetStart;
sub IsOutside;
sub IsWithin;
sub LimitTo;
sub SetEnd;
sub SetRange;
sub SetStart;
sub new;
sub newCopy;
sub newDefault;
sub newFromTo;
}
package Wx::RichTextStyleComboCtrl {
sub Create;
sub GetRichTextCtrl;
sub GetStyleSheet;
sub SetRichTextCtrl;
sub SetStyleSheet;
sub UpdateStyles;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleDefinition {
sub CLONE;
sub Copy;
sub DESTROY;
sub Eq;
sub GetBaseStyle;
sub GetDescription;
sub GetName;
sub GetStyle;
sub GetStyleMergedWithBase;
sub SetBaseStyle;
sub SetDescription;
sub SetName;
sub SetStyle;
}
package Wx::RichTextStyleListBox {
sub ApplyStyle;
sub ConvertTenthsMMToPixels;
sub Create;
sub CreateHTML;
sub GetApplyOnSelection;
sub GetIndexForStyle;
sub GetRichTextCtrl;
sub GetStyle;
sub GetStyleSheet;
sub GetStyleType;
sub SetApplyOnSelection;
sub SetRichTextCtrl;
sub SetStyleSelection;
sub SetStyleSheet;
sub SetStyleType;
sub UpdateStyles;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleListCtrl {
sub Create;
sub GetRichTextCtrl;
sub GetStyleChoice;
sub GetStyleListBox;
sub GetStyleSheet;
sub GetStyleType;
sub SetRichTextCtrl;
sub SetStyleSheet;
sub SetStyleType;
sub StyleIndexToType;
sub StyleTypeToIndex;
sub UpdateStyles;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleOrganiserDialog {
sub ApplyStyle;
sub Create;
sub GetFlags;
sub GetRestartNumbering;
sub GetRichTextCtrl;
sub GetSelectedStyle;
sub GetSelectedStyleDefinition;
sub GetStyleSheet;
sub SetFlags;
sub SetRestartNumbering;
sub SetRichTextCtrl;
sub SetShowToolTips;
sub SetStyleSheet;
sub ShowToolTips;
sub new;
sub newDefault;
sub newFull;
}
package Wx::RichTextStyleSheet {
sub AddCharacterStyle;
sub AddListStyle;
sub AddParagraphStyle;
sub AddStyle;
sub AppendSheet;
sub CLONE;
sub Copy;
sub DESTROY;
sub DeleteStyles;
sub FindCharacterStyle;
sub FindListStyle;
sub FindParagraphStyle;
sub FindStyle;
sub GetCharacterStyle;
sub GetCharacterStyleCount;
sub GetDescription;
sub GetListStyle;
sub GetListStyleCount;
sub GetName;
sub GetNextSheet;
sub GetParagraphStyle;
sub GetParagraphStyleCount;
sub GetPreviousSheet;
sub InsertSheet;
sub RemoveCharacterStyle;
sub RemoveListStyle;
sub RemoveParagraphStyle;
sub RemoveStyle;
sub SetDescription;
sub SetName;
sub SetNextSheet;
sub SetPreviousSheet;
sub Unlink;
sub new;
}
package Wx::RichTextXMLHandler {
sub new;
}
package Wx::RichToolTip {
sub CLONE;
sub DESTROY;
sub SetBackgroundColour;
sub SetIcon;
sub SetIconIcon;
sub SetIconId;
sub SetTimeout;
sub SetTipKind;
sub ShowFor;
sub new;
}
package Wx::SVGFileDC {
sub new;
}
package Wx::SashEvent {
sub GetDragRect;
sub GetDragStatus;
sub GetEdge;
sub new;
}
package Wx::SashWindow {
sub Create;
sub GetMaximumSizeX;
sub GetMaximumSizeY;
sub GetMinimumSizeX;
sub GetMinimumSizeY;
sub GetSashVisible;
sub SetMaximumSizeX;
sub SetMaximumSizeY;
sub SetMinimumSizeX;
sub SetMinimumSizeY;
sub SetSashVisible;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ScreenDC {
sub EndDrawingOnTop;
sub StartDrawingOnTop;
sub StartDrawingOnTopRect;
sub StartDrawingOnTopWindow;
sub new;
}
package Wx::ScrollBar {
sub Create;
sub GetPageSize;
sub GetRange;
sub GetThumbPosition;
sub GetThumbSize;
sub SetPageSize;
sub SetScrollbar;
sub SetThumbPosition;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ScrollEvent {
sub GetOrientation;
sub GetPosition;
}
package Wx::ScrollWinEvent {
sub GetOrientation;
sub GetPosition;
sub new;
}
package Wx::ScrolledWindow {
sub CalcScrolledPosition;
sub CalcUnscrolledPosition;
sub Create;
sub DoPrepareDC;
sub EnableScrolling;
sub GetScrollPixelsPerUnit;
sub GetViewStart;
sub GetVirtualSize;
sub IsRetained;
sub PrepareDC;
sub Scroll;
sub SetScrollRate;
sub SetScrollbars;
sub SetTargetWindow;
sub ShowScrollbars;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SearchCtrl {
sub AppendText;
sub AutoComplete;
sub AutoCompleteFileNames;
sub CanCopy;
sub CanCut;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub ChangeValue;
sub Clear;
sub Copy;
sub Create;
sub Cut;
sub DiscardEdits;
sub GetDefaultStyle;
sub GetDescriptiveText;
sub GetHint;
sub GetInsertionPoint;
sub GetLastPosition;
sub GetLineLength;
sub GetLineText;
sub GetMargins;
sub GetMenu;
sub GetNumberOfLines;
sub GetRange;
sub GetSelection;
sub GetStringSelection;
sub GetStyle;
sub GetValue;
sub HasSelection;
sub HitTest;
sub IsCancelButtonVisible;
sub IsEditable;
sub IsEmpty;
sub IsModified;
sub IsSearchButtonVisible;
sub MarkDirty;
sub Paste;
sub PositionToXY;
sub Redo;
sub Remove;
sub RemoveSelection;
sub Replace;
sub SelectAll;
sub SetDefaultStyle;
sub SetDescriptiveText;
sub SetEditable;
sub SetHint;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetMargins;
sub SetMaxLength;
sub SetMenu;
sub SetModified;
sub SetSelection;
sub SetStyle;
sub SetValue;
sub ShowCancelButton;
sub ShowPosition;
sub ShowSearchButton;
sub Undo;
sub WriteText;
sub XYToPosition;
sub new;
sub newDefault;
sub newFull;
}
package Wx::Server {
sub Create;
sub Destroy;
sub OnAcceptConnection;
sub new;
}
package Wx::SetCursorEvent {
sub GetCursor;
sub GetX;
sub GetY;
sub HasCursor;
sub SetCursor;
sub new;
}
package Wx::SettableHeaderColumn {
sub ChangeFlag;
sub ClearFlag;
sub SetAlignment;
sub SetBitmap;
sub SetFlag;
sub SetFlags;
sub SetHidden;
sub SetMinWidth;
sub SetReorderable;
sub SetResizeable;
sub SetSortOrder;
sub SetSortable;
sub SetTitle;
sub SetWidth;
sub ToggleFlag;
sub ToggleSortOrder;
sub UnsetAsSortKey;
}
package Wx::SimpleHelpProvider {
sub new;
}
package Wx::SimpleHtmlListBox {
sub Append;
sub AppendData;
sub AppendString;
sub AppendStrings;
sub Clear;
sub Create;
sub Delete;
sub GetCount;
sub GetSelection;
sub GetString;
sub SetSelection;
sub SetString;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SingleChoiceDialog {
sub GetSelection;
sub GetSelectionClientData;
sub GetStringSelection;
sub SetSelection;
sub new;
}
package Wx::SingleInstanceChecker {
sub CLONE;
sub Create;
sub DESTROY;
sub IsAnotherRunning;
sub new;
}
package Wx::Size {
sub CLONE;
sub DESTROY;
sub DecTo;
sub GetHeight;
sub GetWidth;
sub IncTo;
sub IsFullySpecified;
sub Scale;
sub Set;
sub SetDefaults;
sub SetHeight;
sub SetWidth;
sub height;
sub new;
sub width;
sub x;
sub y;
}
package Wx::SizeEvent {
sub GetRect;
sub GetSize;
sub new;
}
package Wx::Sizer {
sub Add;
sub AddSizer;
sub AddSpace;
sub AddSpacer0;
sub AddSpacer;
sub AddStretchSpacer0;
sub AddStretchSpacer;
sub AddWindow;
sub CalcMin;
sub Clear;
sub DeleteWindows;
sub Destroy;
sub Detach;
sub DetachNth;
sub DetachSizer;
sub DetachWindow;
sub Fit;
sub FitInside;
sub GetChildren;
sub GetContainingWindow;
sub GetItem;
sub GetItemById;
sub GetItemNth;
sub GetItemSizer;
sub GetItemWindow;
sub GetMinSize;
sub GetPosition;
sub GetSize;
sub Hide;
sub HideIndex;
sub HideSizer;
sub HideWindow;
sub Insert;
sub InsertSizer;
sub InsertSpace;
sub InsertSpacer0;
sub InsertSpacer;
sub InsertStretchSpacer0;
sub InsertStretchSpacer;
sub InsertWindow;
sub IsShown;
sub IsShownIndex;
sub IsShownSizer;
sub IsShownWindow;
sub Layout;
sub Prepend;
sub PrependSizer;
sub PrependSpace;
sub PrependSpacer0;
sub PrependSpacer;
sub PrependStretchSpacer0;
sub PrependStretchSpacer;
sub PrependWindow;
sub RecalcSizes;
sub Remove;
sub RemoveNth;
sub RemoveSizer;
sub Replace;
sub ReplaceIndex;
sub ReplaceSizer;
sub ReplaceWindow;
sub SetContainingWindow;
sub SetDimension;
sub SetItemMinSize;
sub SetItemMinSizeNth;
sub SetItemMinSizeSizer;
sub SetItemMinSizeWindow;
sub SetMinSize;
sub SetMinSizeSize;
sub SetMinSizeXY;
sub SetSizeHints;
sub Show;
sub ShowIndex;
sub ShowSizer;
sub ShowWindow;
}
package Wx::SizerItem {
sub AssignSizer;
sub AssignSpacer;
sub AssignWindow;
sub CalcMin;
sub DeleteWindows;
sub DetachSizer;
sub GetBorder;
sub GetFlag;
sub GetId;
sub GetMinSize;
sub GetOption;
sub GetPosition;
sub GetProportion;
sub GetRatio;
sub GetRect;
sub GetSize;
sub GetSizer;
sub GetSpacer;
sub GetUserData;
sub GetWindow;
sub IsShown;
sub IsSizer;
sub IsSpacer;
sub IsWindow;
sub SetBorder;
sub SetDimension;
sub SetFlag;
sub SetId;
sub SetInitSize;
sub SetMinSize;
sub SetMinSizeSize;
sub SetMinSizeWH;
sub SetOption;
sub SetProportion;
sub SetRatio;
sub SetRatioFloat;
sub SetRatioSize;
sub SetRatioWH;
sub SetUserData;
sub Show;
}
package Wx::Slider {
sub ClearSel;
sub ClearTicks;
sub Create;
sub GetLineSize;
sub GetMax;
sub GetMin;
sub GetPageSize;
sub GetSelEnd;
sub GetSelStart;
sub GetThumbLength;
sub GetTickFreq;
sub GetValue;
sub SetLineSize;
sub SetPageSize;
sub SetRange;
sub SetThumbLength;
sub SetTickFreq;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SockAddress {
sub CLONE;
sub Clear;
sub DESTROY;
sub Type;
}
package Wx::Socket::Event {
sub wxSOCKET_CONNECTION;
sub wxSOCKET_CONNECTION_FLAG;
sub wxSOCKET_INPUT;
sub wxSOCKET_INPUT_FLAG;
sub wxSOCKET_LOST;
sub wxSOCKET_LOST_FLAG;
sub wxSOCKET_OUTPUT;
sub wxSOCKET_OUTPUT_FLAG;
}
package Wx::SocketBase {
sub Close;
sub Destroy;
sub Discard;
sub Error;
sub GetFlags;
sub GetLocal;
sub GetPeer;
sub InterruptWait;
sub IsConnected;
sub IsData;
sub IsDisconnected;
sub LastCount;
sub LastError;
sub Notify;
sub Ok;
sub Peek;
sub Read;
sub ReadMsg;
sub RestoreState;
sub SaveState;
sub SetEventHandler;
sub SetFlags;
sub SetNotify;
sub SetTimeout;
sub Unread;
sub Wait;
sub WaitForLost;
sub WaitForRead;
sub WaitForWrite;
sub Write;
sub WriteMsg;
}
package Wx::SocketClient {
sub Connect;
sub new;
}
package Wx::SocketEvent {
sub GetSocket;
sub GetSocketEvent;
sub new;
}
package Wx::SocketServer {
sub Accept;
sub AcceptWith;
sub WaitForAccept;
sub new;
}
package Wx::Sound {
sub CLONE;
sub Create;
sub CreateData;
sub DESTROY;
sub IsOk;
sub Play;
sub Stop;
sub new;
sub newData;
sub newDefault;
sub newFile;
}
package Wx::SpinButton {
sub Create;
sub GetMax;
sub GetMin;
sub GetValue;
sub SetRange;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SpinCtrl {
sub Create;
sub GetMax;
sub GetMin;
sub GetValue;
sub SetRange;
sub SetSelection;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SpinCtrlDouble {
sub Create;
sub GetDigits;
sub GetIncrement;
sub GetMax;
sub GetMin;
sub GetValue;
sub SetDigits;
sub SetIncrement;
sub SetRange;
sub SetValue0;
sub SetValue1;
sub SetValue;
sub new;
sub wxSpinCtrlDouble0;
sub wxSpinCtrlDouble1;
}
package Wx::SpinEvent {
sub GetPosition;
sub SetPosition;
sub new;
}
package Wx::SplashScreen {
sub GetSplashStyle;
sub GetSplashWindow;
sub GetTimeout;
sub new;
}
package Wx::SplitterEvent {
sub GetSashPosition;
sub GetWindowBeingRemoved;
sub GetX;
sub GetY;
sub SetSashPosition;
sub new;
}
package Wx::SplitterWindow {
sub Create;
sub GetMinimumPaneSize;
sub GetSashGravity;
sub GetSashPosition;
sub GetSashSize;
sub GetSplitMode;
sub GetWindow1;
sub GetWindow2;
sub Initialize;
sub IsSplit;
sub ReplaceWindow;
sub SetFocusIgnoringChildren;
sub SetMinimumPaneSize;
sub SetSashGravity;
sub SetSashPosition;
sub SetSashSize;
sub SetSplitMode;
sub SplitHorizontally;
sub SplitVertically;
sub Unsplit;
sub UpdateSize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::StandardPaths {
sub Get;
sub GetConfigDir;
sub GetDataDir;
sub GetDocumentsDir;
sub GetExecutablePath;
sub GetLocalDataDir;
sub GetLocalizedResourcesDir;
sub GetPluginsDir;
sub GetResourcesDir;
sub GetTempDir;
sub GetUserConfigDir;
sub GetUserDataDir;
sub GetUserLocalDataDir;
sub UseAppInfo;
}
package Wx::StaticBitmap {
sub GetBitmap;
sub GetIcon;
sub SetBitmap;
sub SetIcon;
sub new;
sub newBitmap;
sub newIcon;
}
package Wx::StaticBox {
sub Create;
sub new;
}
package Wx::StaticBoxSizer {
sub GetStaticBox;
sub new;
}
package Wx::StaticLine {
sub Create;
sub GetDefaultSize;
sub IsVertical;
sub new;
}
package Wx::StaticText {
sub Create;
sub Wrap;
sub new;
}
package Wx::StatusBar {
sub GetFieldRect;
sub GetFieldsCount;
sub GetStatusText;
sub PopStatusText;
sub PushStatusText;
sub SetFieldsCount;
sub SetMinHeight;
sub SetStatusStyles;
sub SetStatusText;
sub SetStatusWidths;
sub new;
}
package Wx::StdDialogButtonSizer {
sub AddButton;
sub GetAffirmativeButton;
sub GetApplyButton;
sub GetCancelButton;
sub GetHelpButton;
sub GetNegativeButton;
sub Realize;
sub SetAffirmativeButton;
sub SetCancelButton;
sub SetNegativeButton;
sub new;
}
package Wx::StopWatch {
sub CLONE;
sub DESTROY;
sub Pause;
sub Resume;
sub Start;
sub Time;
sub new;
}
package Wx::Stream {
sub TIEHANDLE;
}
package Wx::StringProperty {
sub DoSetAttribute;
sub GetPlValue;
sub OnSetValue;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
}
package Wx::StyledTextCtrl {
sub AddRefDocument;
sub AddSelection;
sub AddText;
sub AddTextRaw;
sub AddUndoAction;
sub Allocate;
sub AnnotationClearAll;
sub AnnotationGetLines;
sub AnnotationGetStyle;
sub AnnotationGetStyleOffset;
sub AnnotationGetStyles;
sub AnnotationGetText;
sub AnnotationGetVisible;
sub AnnotationSetStyle;
sub AnnotationSetStyleOffset;
sub AnnotationSetStyles;
sub AnnotationSetText;
sub AnnotationSetVisible;
sub AppendText;
sub AppendTextRaw;
sub AutoCompActive;
sub AutoCompCancel;
sub AutoCompComplete;
sub AutoCompGetAutoHide;
sub AutoCompGetCancelAtStart;
sub AutoCompGetChooseSingle;
sub AutoCompGetCurrent;
sub AutoCompGetDropRestOfWord;
sub AutoCompGetIgnoreCase;
sub AutoCompGetMaxHeight;
sub AutoCompGetMaxWidth;
sub AutoCompGetSeparator;
sub AutoCompGetTypeSeparator;
sub AutoCompPosStart;
sub AutoCompSelect;
sub AutoCompSetAutoHide;
sub AutoCompSetCancelAtStart;
sub AutoCompSetChooseSingle;
sub AutoCompSetDropRestOfWord;
sub AutoCompSetFillUps;
sub AutoCompSetIgnoreCase;
sub AutoCompSetMaxHeight;
sub AutoCompSetMaxWidth;
sub AutoCompSetSeparator;
sub AutoCompSetTypeSeparator;
sub AutoCompShow;
sub AutoCompStops;
sub BackTab;
sub BeginUndoAction;
sub BraceBadLight;
sub BraceHighlight;
sub BraceMatch;
sub CallTipActive;
sub CallTipCancel;
sub CallTipPosAtStart;
sub CallTipSetBackground;
sub CallTipSetForeground;
sub CallTipSetForegroundHighlight;
sub CallTipSetHighlight;
sub CallTipShow;
sub CallTipUseStyle;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub Cancel;
sub CharLeft;
sub CharLeftExtend;
sub CharLeftRectExtend;
sub CharPositionFromPoint;
sub CharPositionFromPointClose;
sub CharRight;
sub CharRightExtend;
sub CharRightRectExtend;
sub ChooseCaretX;
sub Clear;
sub ClearAll;
sub ClearDocumentStyle;
sub ClearRegisteredImages;
sub ClearSelections;
sub CmdKeyAssign;
sub CmdKeyClear;
sub CmdKeyClearAll;
sub CmdKeyExecute;
sub Colourise;
sub ConvertEOLs;
sub Copy;
sub CopyAllowLine;
sub CopyRange;
sub CopyText;
sub CreateDocument;
sub Cut;
sub DelLineLeft;
sub DelLineRight;
sub DelWordLeft;
sub DelWordRight;
sub DeleteBack;
sub DeleteBackNotLine;
sub DoDragOver;
sub DoDropText;
sub DocLineFromVisible;
sub DocumentEnd;
sub DocumentEndExtend;
sub DocumentStart;
sub DocumentStartExtend;
sub EditToggleOvertype;
sub EmptyUndoBuffer;
sub EndUndoAction;
sub EnsureCaretVisible;
sub EnsureVisible;
sub EnsureVisibleEnforcePolicy;
sub FindColumn;
sub FindText;
sub FormFeed;
sub FormatRange;
sub GetAdditionalCaretForeground;
sub GetAdditionalCaretsBlink;
sub GetAdditionalCaretsVisible;
sub GetAdditionalSelAlpha;
sub GetAdditionalSelectionTyping;
sub GetAnchor;
sub GetBackSpaceUnIndents;
sub GetBufferedDraw;
sub GetCaretForeground;
sub GetCaretLineBackAlpha;
sub GetCaretLineBackground;
sub GetCaretLineVisible;
sub GetCaretPeriod;
sub GetCaretSticky;
sub GetCaretWidth;
sub GetCharAt;
sub GetCharacterPointer;
sub GetCodePage;
sub GetColumn;
sub GetControlCharSymbol;
sub GetCurrentLine;
sub GetCurrentPos;
sub GetDocPointer;
sub GetEOLMode;
sub GetEdgeColour;
sub GetEdgeColumn;
sub GetEdgeMode;
sub GetEndAtLastLine;
sub GetEndStyled;
sub GetExtraAscent;
sub GetExtraDescent;
sub GetFirstVisibleLine;
sub GetFoldExpanded;
sub GetFoldLevel;
sub GetFoldParent;
sub GetHighlightGuide;
sub GetIndent;
sub GetIndentationGuides;
sub GetKeysUnicode;
sub GetLastChild;
sub GetLastKeydownProcessed;
sub GetLayoutCache;
sub GetLength;
sub GetLexer;
sub GetLine;
sub GetLineCount;
sub GetLineEndPosition;
sub GetLineIndentPosition;
sub GetLineIndentation;
sub GetLineSelEndPosition;
sub GetLineSelStartPosition;
sub GetLineState;
sub GetLineVisible;
sub GetMainSelection;
sub GetMarginLeft;
sub GetMarginMask;
sub GetMarginRight;
sub GetMarginSensitive;
sub GetMarginType;
sub GetMarginWidth;
sub GetMarkerSymbolDefined;
sub GetMaxLineState;
sub GetModEventMask;
sub GetModify;
sub GetMouseDownCaptures;
sub GetMouseDwellTime;
sub GetMultipleSelection;
sub GetOvertype;
sub GetPasteConvertEndings;
sub GetPrintColourMode;
sub GetPrintMagnification;
sub GetPrintWrapMode;
sub GetProperty;
sub GetPropertyExpanded;
sub GetPropertyInt;
sub GetReadOnly;
sub GetRectangularSelectionAnchor;
sub GetRectangularSelectionAnchorVirtualSpace;
sub GetRectangularSelectionCaret;
sub GetRectangularSelectionCaretVirtualSpace;
sub GetRectangularSelectionModifier;
sub GetSTCCursor;
sub GetSTCFocus;
sub GetScrollWidth;
sub GetSearchFlags;
sub GetSelAlpha;
sub GetSelectedText;
sub GetSelection;
sub GetSelectionEnd;
sub GetSelectionMode;
sub GetSelectionNAnchor;
sub GetSelectionNAnchorVirtualSpace;
sub GetSelectionNCaret;
sub GetSelectionNCaretVirtualSpace;
sub GetSelectionNEnd;
sub GetSelectionNStart;
sub GetSelectionStart;
sub GetSelections;
sub GetStatus;
sub GetStyleAt;
sub GetStyleBits;
sub GetStyleBitsNeeded;
sub GetTabIndents;
sub GetTabWidth;
sub GetTargetEnd;
sub GetTargetStart;
sub GetText;
sub GetTextLength;
sub GetTextRange;
sub GetTwoPhaseDraw;
sub GetUndoCollection;
sub GetUseAntiAliasing;
sub GetUseHorizontalScrollBar;
sub GetUseTabs;
sub GetUseVerticalScrollBar;
sub GetViewEOL;
sub GetViewWhiteSpace;
sub GetVirtualSpaceOptions;
sub GetWhitespaceSize;
sub GetWrapIndentMode;
sub GetWrapMode;
sub GetWrapStartIndent;
sub GetWrapVisualFlags;
sub GetWrapVisualFlagsLocation;
sub GetXOffset;
sub GetZoom;
sub GotoLine;
sub GotoPos;
sub HideLines;
sub HideSelection;
sub Home;
sub HomeDisplay;
sub HomeDisplayExtend;
sub HomeExtend;
sub HomeRectExtend;
sub HomeWrap;
sub HomeWrapExtend;
sub IndicatorGetAlpha;
sub IndicatorGetForeground;
sub IndicatorGetStyle;
sub IndicatorSetAlpha;
sub IndicatorSetForeground;
sub IndicatorSetStyle;
sub InsertText;
sub InsertTextRaw;
sub LineCopy;
sub LineCut;
sub LineDelete;
sub LineDown;
sub LineDownExtend;
sub LineDownRectExtend;
sub LineDuplicate;
sub LineEnd;
sub LineEndDisplay;
sub LineEndDisplayExtend;
sub LineEndExtend;
sub LineEndRectExtend;
sub LineEndWrap;
sub LineEndWrapExtend;
sub LineFromPosition;
sub LineLength;
sub LineScroll;
sub LineScrollDown;
sub LineScrollUp;
sub LineTranspose;
sub LineUp;
sub LineUpExtend;
sub LineUpRectExtend;
sub LinesJoin;
sub LinesOnScreen;
sub LinesSplit;
sub LoadFile;
sub LowerCase;
sub MarginGetStyle;
sub MarginGetStyleOffset;
sub MarginGetStyles;
sub MarginGetText;
sub MarginSetStyle;
sub MarginSetStyleOffset;
sub MarginSetStyles;
sub MarginSetText;
sub MarginTextClearAll;
sub MarkerAdd;
sub MarkerAddSet;
sub MarkerDefine;
sub MarkerDefineBitmap;
sub MarkerDelete;
sub MarkerDeleteAll;
sub MarkerDeleteHandle;
sub MarkerGet;
sub MarkerLineFromHandle;
sub MarkerNext;
sub MarkerPrevious;
sub MarkerSetAlpha;
sub MarkerSetBackground;
sub MarkerSetForeground;
sub MoveCaretInsideView;
sub NewLine;
sub PageDown;
sub PageDownExtend;
sub PageDownRectExtend;
sub PageUp;
sub PageUpExtend;
sub PageUpRectExtend;
sub ParaDown;
sub ParaDownExtend;
sub ParaUp;
sub ParaUpExtend;
sub Paste;
sub PointFromPosition;
sub PositionAfter;
sub PositionBefore;
sub PositionFromLine;
sub PositionFromPoint;
sub PositionFromPointClose;
sub Redo;
sub RegisterImage;
sub ReleaseDocument;
sub ReplaceSelection;
sub ReplaceTarget;
sub ReplaceTargetRE;
sub RotateSelection;
sub SaveFile;
sub ScrollToColumn;
sub ScrollToLine;
sub SearchAnchor;
sub SearchInTarget;
sub SearchNext;
sub SearchPrev;
sub SelectAll;
sub SelectionDuplicate;
sub SelectionIsRectangle;
sub SetAdditionalCaretForeground;
sub SetAdditionalCaretsBlink;
sub SetAdditionalCaretsVisible;
sub SetAdditionalSelAlpha;
sub SetAdditionalSelBackground;
sub SetAdditionalSelForeground;
sub SetAdditionalSelectionTyping;
sub SetAnchor;
sub SetBackSpaceUnIndents;
sub SetBufferedDraw;
sub SetCaretForeground;
sub SetCaretLineBack;
sub SetCaretLineBackAlpha;
sub SetCaretLineBackground;
sub SetCaretLineVisible;
sub SetCaretPeriod;
sub SetCaretSticky;
sub SetCaretWidth;
sub SetCharsDefault;
sub SetCodePage;
sub SetControlCharSymbol;
sub SetCurrentPos;
sub SetDocPointer;
sub SetEOLMode;
sub SetEdgeColour;
sub SetEdgeColumn;
sub SetEdgeMode;
sub SetEndAtLastLine;
sub SetExtraAscent;
sub SetExtraDescent;
sub SetFirstVisibleLine;
sub SetFoldExpanded;
sub SetFoldFlags;
sub SetFoldLevel;
sub SetFoldMarginColour;
sub SetFoldMarginHiColour;
sub SetHScrollBar;
sub SetHighlightGuide;
sub SetHotspotActiveBackground;
sub SetHotspotActiveForeground;
sub SetHotspotActiveUnderline;
sub SetHotspotSingleLine;
sub SetIndent;
sub SetIndentationGuides;
sub SetKeyWords;
sub SetKeysUnicode;
sub SetLastKeydownProcessed;
sub SetLayoutCache;
sub SetLexer;
sub SetLexerLanguage;
sub SetLineIndentation;
sub SetLineState;
sub SetMainSelection;
sub SetMarginLeft;
sub SetMarginMask;
sub SetMarginRight;
sub SetMarginSensitive;
sub SetMarginType;
sub SetMarginWidth;
sub SetMargins;
sub SetModEventMask;
sub SetMouseDownCaptures;
sub SetMouseDwellTime;
sub SetMultipleSelection;
sub SetOvertype;
sub SetPasteConvertEndings;
sub SetPrintColourMode;
sub SetPrintMagnification;
sub SetPrintWrapMode;
sub SetProperty;
sub SetReadOnly;
sub SetRectangularSelectionAnchor;
sub SetRectangularSelectionAnchorVirtualSpace;
sub SetRectangularSelectionCaret;
sub SetRectangularSelectionCaretVirtualSpace;
sub SetRectangularSelectionModifier;
sub SetSTCCursor;
sub SetSTCFocus;
sub SetSavePoint;
sub SetScrollWidth;
sub SetSearchFlags;
sub SetSelAlpha;
sub SetSelBackground;
sub SetSelForeground;
sub SetSelection;
sub SetSelectionEnd;
sub SetSelectionMode;
sub SetSelectionNAnchor;
sub SetSelectionNAnchorVirtualSpace;
sub SetSelectionNCaret;
sub SetSelectionNCaretVirtualSpace;
sub SetSelectionNEnd;
sub SetSelectionNStart;
sub SetSelectionStart;
sub SetStatus;
sub SetStyleBits;
sub SetStyleBytes;
sub SetStyling;
sub SetTabIndents;
sub SetTabWidth;
sub SetTargetEnd;
sub SetTargetStart;
sub SetText;
sub SetTwoPhaseDraw;
sub SetUndoCollection;
sub SetUseAntiAliasing;
sub SetUseHorizontalScrollBar;
sub SetUseTabs;
sub SetUseVerticalScrollBar;
sub SetVScrollBar;
sub SetViewEOL;
sub SetViewWhiteSpace;
sub SetVirtualSpaceOptions;
sub SetVisiblePolicy;
sub SetWhitespaceBackground;
sub SetWhitespaceChars;
sub SetWhitespaceForeground;
sub SetWhitespaceSize;
sub SetWordChars;
sub SetWrapIndentMode;
sub SetWrapMode;
sub SetWrapStartIndent;
sub SetWrapVisualFlags;
sub SetWrapVisualFlagsLocation;
sub SetXCaretPolicy;
sub SetXOffset;
sub SetYCaretPolicy;
sub SetZoom;
sub ShowLines;
sub StartRecord;
sub StartStyling;
sub StopRecord;
sub StutteredPageDown;
sub StutteredPageDownExtend;
sub StutteredPageUp;
sub StutteredPageUpExtend;
sub StyleClearAll;
sub StyleResetDefault;
sub StyleSetBackground;
sub StyleSetBold;
sub StyleSetCase;
sub StyleSetChangeable;
sub StyleSetCharacterSet;
sub StyleSetEOLFilled;
sub StyleSetFaceName;
sub StyleSetFont;
sub StyleSetFontAttr;
sub StyleSetFontEncoding;
sub StyleSetForeground;
sub StyleSetHotSpot;
sub StyleSetItalic;
sub StyleSetSize;
sub StyleSetSpec;
sub StyleSetUnderline;
sub StyleSetVisible;
sub SwapMainAnchorCaret;
sub Tab;
sub TargetFromSelection;
sub TextHeight;
sub TextWidth;
sub ToggleCaretSticky;
sub ToggleFold;
sub Undo;
sub UpperCase;
sub UsePopUp;
sub UserListShow;
sub VCHome;
sub VCHomeExtend;
sub VCHomeRectExtend;
sub VCHomeWrap;
sub VCHomeWrapExtend;
sub VisibleFromDocLine;
sub WordEndPosition;
sub WordLeft;
sub WordLeftEnd;
sub WordLeftEndExtend;
sub WordLeftExtend;
sub WordPartLeft;
sub WordPartLeftExtend;
sub WordPartRight;
sub WordPartRightExtend;
sub WordRight;
sub WordRightEnd;
sub WordRightEndExtend;
sub WordRightExtend;
sub WordStartPosition;
sub WrapCount;
sub ZoomIn;
sub ZoomOut;
sub new;
}
package Wx::StyledTextEvent {
sub GetAlt;
sub GetControl;
sub GetDragAllowMove;
sub GetDragResult;
sub GetDragText;
sub GetFoldLevelNow;
sub GetFoldLevelPrev;
sub GetKey;
sub GetLParam;
sub GetLength;
sub GetLine;
sub GetLinesAdded;
sub GetListType;
sub GetMargin;
sub GetMessage;
sub GetModificationType;
sub GetModifiers;
sub GetPosition;
sub GetShift;
sub GetText;
sub GetWParam;
sub GetX;
sub GetY;
sub SetDragAllowMove;
sub SetDragResult;
sub SetDragText;
sub SetFoldLevelNow;
sub SetFoldLevelPrev;
sub SetKey;
sub SetLParam;
sub SetLength;
sub SetLine;
sub SetLinesAdded;
sub SetListType;
sub SetMargin;
sub SetMessage;
sub SetModificationType;
sub SetModifiers;
sub SetPosition;
sub SetText;
sub SetWParam;
sub SetX;
sub SetY;
}
package Wx::SymbolPickerDialog {
sub Create;
sub GetFontName;
sub GetFromUnicode;
sub GetNormalTextFontName;
sub GetSymbol;
sub GetSymbolChar;
sub HasSelection;
sub SetFontName;
sub SetFromUnicode;
sub SetNormalTextFontName;
sub SetSymbol;
sub SetUnicodeMode;
sub UseNormalFont;
sub new;
sub newDefault;
sub newFull;
}
package Wx::SysColourChangedEvent {
sub new;
}
package Wx::SystemColourProperty {
sub ColourToString;
sub DoSetAttribute;
sub GetColour;
sub GetCustomColourIndex;
sub GetPlValue;
sub GetVal;
sub IntToValue;
sub OnEvent;
sub OnMeasureImage;
sub OnSetValue;
sub QueryColourFromUser;
sub SetPlValue;
sub StringToValue;
sub ValueToString;
sub new;
}
package Wx::SystemOptions {
sub GetOption;
sub GetOptionInt;
sub HasOption;
sub IsFalse;
sub SetOption;
sub SetOptionInt;
}
package Wx::SystemSettings {
sub GetColour;
sub GetFont;
sub GetMetric;
sub GetScreenType;
sub GetSystemColour;
sub GetSystemFont;
sub GetSystemMetric;
}
package Wx::TGAHandler {
sub new;
}
package Wx::TIFFHandler {
sub new;
}
package Wx::TaskBarIcon {
sub Destroy;
sub IsIconInstalled;
sub IsOk;
sub PopupMenu;
sub RemoveIcon;
sub SetIcon;
sub new;
}
package Wx::TaskBarIconEvent {
sub new;
}
package Wx::TextAttr {
sub Apply;
sub CLONE;
sub DESTROY;
sub GetAlignment;
sub GetBackgroundColour;
sub GetBulletFont;
sub GetBulletName;
sub GetBulletNumber;
sub GetBulletStyle;
sub GetBulletText;
sub GetCharacterStyleName;
sub GetFlags;
sub GetFont;
sub GetFontAttributes;
sub GetFontEncoding;
sub GetFontFaceName;
sub GetFontSize;
sub GetFontStyle;
sub GetFontUnderlined;
sub GetFontWeight;
sub GetLeftIndent;
sub GetLeftSubIndent;
sub GetLineSpacing;
sub GetListStyleName;
sub GetOutlineLevel;
sub GetParagraphSpacingAfter;
sub GetParagraphSpacingBefore;
sub GetParagraphStyleName;
sub GetRightIndent;
sub GetTabs;
sub GetTextColour;
sub GetTextEffectFlags;
sub GetTextEffects;
sub GetURL;
sub HasAlignment;
sub HasBackgroundColour;
sub HasBulletName;
sub HasBulletNumber;
sub HasBulletStyle;
sub HasBulletText;
sub HasCharacterStyleName;
sub HasFlag;
sub HasFont;
sub HasFontEncoding;
sub HasFontFaceName;
sub HasFontItalic;
sub HasFontSize;
sub HasFontUnderlined;
sub HasFontWeight;
sub HasLeftIndent;
sub HasLineSpacing;
sub HasListStyleName;
sub HasOutlineLevel;
sub HasPageBreak;
sub HasParagraphSpacingAfter;
sub HasParagraphSpacingBefore;
sub HasParagraphStyleName;
sub HasRightIndent;
sub HasTabs;
sub HasTextColour;
sub HasTextEffect;
sub HasTextEffects;
sub HasURL;
sub IsCharacterStyle;
sub IsDefault;
sub IsParagraphStyle;
sub Merge;
sub SetAlignment;
sub SetBackgroundColour;
sub SetBulletFont;
sub SetBulletName;
sub SetBulletNumber;
sub SetBulletStyle;
sub SetBulletText;
sub SetCharacterStyleName;
sub SetFlags;
sub SetFont;
sub SetFontEncoding;
sub SetFontFaceName;
sub SetFontSize;
sub SetFontStyle;
sub SetFontUnderlined;
sub SetFontWeight;
sub SetLeftIndent;
sub SetLineSpacing;
sub SetListStyleName;
sub SetOutlineLevel;
sub SetPageBreak;
sub SetParagraphSpacingAfter;
sub SetParagraphSpacingBefore;
sub SetParagraphStyleName;
sub SetRightIndent;
sub SetTabs;
sub SetTextColour;
sub SetTextEffectFlags;
sub SetTextEffects;
sub SetURL;
sub new;
}
package Wx::TextAttrEx {
sub CLONE;
sub DESTROY;
sub GetBulletFont;
sub GetBulletName;
sub GetBulletNumber;
sub GetBulletStyle;
sub GetBulletText;
sub GetCharacterStyleName;
sub GetLineSpacing;
sub GetListStyleName;
sub GetParagraphSpacingAfter;
sub GetParagraphSpacingBefore;
sub GetParagraphStyleName;
sub GetURL;
sub HasBulletName;
sub HasBulletNumber;
sub HasBulletStyle;
sub HasBulletText;
sub HasCharacterStyleName;
sub HasLineSpacing;
sub HasListStyleName;
sub HasPageBreak;
sub HasParagraphSpacingAfter;
sub HasParagraphSpacingBefore;
sub HasParagraphStyleName;
sub HasURL;
sub IsCharacterStyle;
sub IsDefault;
sub IsParagraphStyle;
sub SetBulletFont;
sub SetBulletName;
sub SetBulletNumber;
sub SetBulletStyle;
sub SetBulletText;
sub SetCharacterStyleName;
sub SetLineSpacing;
sub SetListStyleName;
sub SetPageBreak;
sub SetParagraphSpacingAfter;
sub SetParagraphSpacingBefore;
sub SetParagraphStyleName;
sub SetURL;
sub new;
sub newAttr;
sub newCopy;
sub newDefault;
}
package Wx::TextCtrl {
sub Create;
sub GetStyle;
sub GetTextAttrStyle;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TextCtrlBase {
sub AppendText;
sub AutoComplete;
sub AutoCompleteFileNames;
sub CanCopy;
sub CanCut;
sub CanPaste;
sub CanRedo;
sub CanUndo;
sub ChangeValue;
sub Clear;
sub Copy;
sub Cut;
sub DiscardEdits;
sub EmulateKeyPress;
sub GetDefaultStyle;
sub GetInsertionPoint;
sub GetLastPosition;
sub GetLineLength;
sub GetLineText;
sub GetNumberOfLines;
sub GetRange;
sub GetSelection;
sub GetStringSelection;
sub GetValue;
sub HitTest;
sub IsEditable;
sub IsEmpty;
sub IsModified;
sub IsMultiLine;
sub IsSingleLine;
sub LoadFile;
sub MarkDirty;
sub Paste;
sub PositionToXY;
sub Redo;
sub Remove;
sub Replace;
sub SaveFile;
sub SelectAll;
sub SetDefaultStyle;
sub SetEditable;
sub SetInsertionPoint;
sub SetInsertionPointEnd;
sub SetMaxLength;
sub SetModified;
sub SetSelection;
sub SetStyle;
sub SetValue;
sub ShowPosition;
sub Undo;
sub WriteText;
sub XYToPosition;
}
package Wx::TextDataObject {
sub GetText;
sub GetTextLength;
sub SetText;
sub new;
}
package Wx::TextDropTarget {
sub new;
}
package Wx::TextEntryDialog {
sub GetValue;
sub SetValue;
sub ShowModal;
sub new;
}
package Wx::TextUrlEvent {
sub GetMouseEvent;
sub GetURLEnd;
sub GetURLStart;
}
package Wx::Thread {
sub IsMain;
}
package Wx::TimePickerCtrl {
sub Create;
sub GetValue;
sub SetValue;
sub new;
}
package Wx::TimeSpan {
sub GetDays;
sub GetHours;
sub GetWeeks;
sub IsEqualTo;
sub IsLongerThan;
sub IsNegative;
sub IsNull;
sub IsPositive;
sub IsShorterThan;
sub new;
sub newFromHMS;
}
package Wx::Timer {
sub Destroy;
sub GetId;
sub GetInterval;
sub IsOneShot;
sub IsRunning;
sub Notify;
sub SetOwner;
sub Start;
sub StartOnce;
sub Stop;
sub newDefault;
sub newEH;
}
package Wx::TimerEvent {
sub GetInterval;
sub GetTimer;
}
package Wx::TipProvider {
sub Destroy;
sub GetCurrentTip;
sub GetTip;
sub PreprocessTip;
sub SetCurrentTip;
sub new;
}
package Wx::ToggleButton {
sub Create;
sub GetValue;
sub SetValue;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ToolBar {
sub Create;
sub new;
sub newDefault;
sub newFull;
}
package Wx::ToolBarBase {
sub AddCheckTool;
sub AddControl;
sub AddRadioTool;
sub AddSeparator;
sub AddTool;
sub AddToolLong;
sub AddToolNewLong;
sub AddToolNewShort;
sub AddToolShort;
sub ClearTools;
sub DeleteTool;
sub DeleteToolByPos;
sub Destroy;
sub EnableTool;
sub FindById;
sub FindControl;
sub FindToolForPosition;
sub GetMargins;
sub GetMaxCols;
sub GetMaxRows;
sub GetToolBitmapSize;
sub GetToolClientData;
sub GetToolEnabled;
sub GetToolLongHelp;
sub GetToolPacking;
sub GetToolPos;
sub GetToolSeparation;
sub GetToolShortHelp;
sub GetToolSize;
sub GetToolState;
sub GetToolsCount;
sub InsertControl;
sub InsertSeparator;
sub InsertTool;
sub InsertToolLong;
sub InsertToolNewLong;
sub Realize;
sub RemoveTool;
sub SetDropdownMenu;
sub SetMargins;
sub SetMarginsSize;
sub SetMarginsXY;
sub SetMaxRowsCols;
sub SetRows;
sub SetToolBitmapSize;
sub SetToolClientData;
sub SetToolDisabledBitmap;
sub SetToolLongHelp;
sub SetToolNormalBitmap;
sub SetToolPacking;
sub SetToolSeparation;
sub SetToolShortHelp;
sub ToggleTool;
}
package Wx::ToolBarToolBase {
sub CanBeToggled;
sub Destroy;
sub Enable;
sub GetBitmap1;
sub GetBitmap2;
sub GetBitmap;
sub GetClientData;
sub GetControl;
sub GetDisabledBitmap;
sub GetDropdownMenu;
sub GetId;
sub GetKind;
sub GetLabel;
sub GetLongHelp;
sub GetNormalBitmap;
sub GetShortHelp;
sub GetStyle;
sub GetToolBar;
sub IsButton;
sub IsControl;
sub IsEnabled;
sub IsSeparator;
sub IsToggled;
sub SetBitmap1;
sub SetBitmap2;
sub SetClientData;
sub SetDisabledBitmap;
sub SetDropdownMenu;
sub SetLabel;
sub SetLongHelp;
sub SetNormalBitmap;
sub SetShortHelp;
sub SetToggle;
sub Toggle;
}
package Wx::ToolTip {
sub Enable;
sub GetTip;
sub GetWindow;
sub SetAutoPop;
sub SetDelay;
sub SetReshow;
sub SetTip;
sub new;
}
package Wx::Toolbook {
sub Create;
sub GetToolBar;
sub Realize;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TopLevelWindow {
sub CanSetTransparent;
sub EnableCloseButton;
sub GetDefaultItem;
sub GetIcon;
sub GetIcons;
sub GetTmpDefaultItem;
sub Iconize;
sub IsActive;
sub IsAlwaysMaximized;
sub IsFullScreen;
sub IsIconized;
sub IsMaximized;
sub MSWGetSystemMenu;
sub Maximize;
sub OSXIsModified;
sub OSXSetModified;
sub RequestUserAttention;
sub SetDefaultItem;
sub SetIcon;
sub SetIcons;
sub SetLayoutDirection;
sub SetMaxSize;
sub SetMinSize;
sub SetRepresentedFilename;
sub SetShape;
sub SetTmpDefaultItem;
sub SetTransparent;
sub ShouldPreventAppExit;
sub ShowFullScreen;
}
package Wx::TreeCtrl {
sub AddRoot;
sub AppendItem;
sub AssignButtonsImageList;
sub AssignImageList;
sub AssignStateImageList;
sub Collapse;
sub CollapseAll;
sub CollapseAllChildren;
sub CollapseAndReset;
sub Create;
sub Delete;
sub DeleteAllItems;
sub DeleteChildren;
sub EditLabel;
sub EndEditLabel;
sub EnsureVisible;
sub Expand;
sub ExpandAll;
sub ExpandAllChildren;
sub GetBoundingRect;
sub GetChildrenCount;
sub GetCount;
sub GetEditControl;
sub GetFirstChild;
sub GetFirstVisibleItem;
sub GetImageList;
sub GetIndent;
sub GetItemBackgroundColour;
sub GetItemData;
sub GetItemFont;
sub GetItemImage;
sub GetItemParent;
sub GetItemText;
sub GetItemTextColour;
sub GetLastChild;
sub GetNextChild;
sub GetNextSibling;
sub GetNextVisible;
sub GetParent;
sub GetPlData;
sub GetPrevSibling;
sub GetPrevVisible;
sub GetRootItem;
sub GetSelection;
sub GetSelections;
sub GetStateImageList;
sub HitTest;
sub InsertItem;
sub InsertItemBef;
sub InsertItemPrev;
sub IsBold;
sub IsEmpty;
sub IsExpanded;
sub IsSelected;
sub IsVisible;
sub ItemHasChildren;
sub OnCompareItems;
sub PrependItem;
sub ScrollTo;
sub SelectItem;
sub SetImageList;
sub SetIndent;
sub SetItemBackgroundColour;
sub SetItemBold;
sub SetItemData;
sub SetItemDropHighlight;
sub SetItemFont;
sub SetItemHasChildren;
sub SetItemImage;
sub SetItemText;
sub SetItemTextColour;
sub SetPlData;
sub SetStateImageList;
sub SortChildren;
sub Toggle;
sub ToggleItemSelection;
sub Unselect;
sub UnselectAll;
sub UnselectItem;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TreeEvent {
sub GetItem;
sub GetKeyCode;
sub GetKeyEvent;
sub GetLabel;
sub GetOldItem;
sub GetPoint;
sub GetQuickBestSize;
sub IsEditCancelled;
sub SetQuickBestSize;
sub SetToolTip;
sub new;
}
package Wx::TreeItemData {
sub Destroy;
sub GetData;
sub GetId;
sub SetData;
sub SetId;
sub new;
}
package Wx::TreeItemId {
sub CLONE;
sub DESTROY;
sub IsOk;
sub tiid_spaceship;
}
package Wx::TreeListCtrl {
sub AppendColumn;
sub AppendItem;
sub AreAllChildrenInState;
sub AssignImageList;
sub CheckItem;
sub CheckItemRecursively;
sub ClearColumns;
sub Collapse;
sub Create;
sub DeleteAllItems;
sub DeleteColumn;
sub DeleteItem;
sub Expand;
sub GetCheckedState;
sub GetColumnCount;
sub GetColumnWidth;
sub GetFirstChild;
sub GetFirstItem;
sub GetImageList;
sub GetItemData;
sub GetItemParent;
sub GetItemText;
sub GetNextItem;
sub GetNextSibling;
sub GetRootItem;
sub GetSelection;
sub GetSelections;
sub GetSortColumn;
sub GetView;
sub InsertItem;
sub IsExpanded;
sub IsSelected;
sub PrependItem;
sub Select;
sub SelectAll;
sub SetColumnWidth;
sub SetImageList;
sub SetItemComparator;
sub SetItemData;
sub SetItemImage;
sub SetItemText0;
sub SetItemText1;
sub SetItemText;
sub SetSortColumn;
sub UncheckItem;
sub Unselect;
sub UnselectAll;
sub UpdateItemParentStateRecursively;
sub WidthFor;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TreeListEvent {
sub GetColumn;
sub GetItem;
sub GetOldCheckedState;
}
package Wx::TreeListItem {
sub CLONE;
sub DESTROY;
sub IsOk;
}
package Wx::TreeListItemComparator {
sub Compare;
}
package Wx::Treebook {
sub AddSubPage;
sub CollapseNode;
sub Create;
sub ExpandNode;
sub GetPageParent;
sub GetTreeCtrl;
sub InsertSubPage;
sub IsNodeExpanded;
sub new;
sub newDefault;
sub newFull;
}
package Wx::TreebookEvent {
sub GetOldSelection;
sub GetSelection;
sub new;
}
package Wx::UIActionSimulator {
sub CLONE;
sub Char;
sub DESTROY;
sub KeyDown;
sub KeyUp;
sub MouseClick;
sub MouseDblClick;
sub MouseDown;
sub MouseDragDrop;
sub MouseMove;
sub MouseMoveCoords;
sub MouseMovePoint;
sub MouseUp;
sub Text;
sub new;
}
package Wx::UIntProperty {
sub DoGetValidator;
sub DoSetAttribute;
sub GetPlValue;
sub IntToValue;
sub SetPlValue;
sub StringToValue;
sub ValidateValue;
sub ValueToString;
sub new;
}
package Wx::URLDataObject {
sub GetURL;
sub SetURL;
sub new;
}
package Wx::UpdateUIEvent {
sub CanUpdate;
sub Check;
sub Enable;
sub GetChecked;
sub GetEnabled;
sub GetMode;
sub GetSetChecked;
sub GetSetEnabled;
sub GetSetShown;
sub GetSetText;
sub GetShown;
sub GetText;
sub GetUpdateInterval;
sub ResetUpdateTime;
sub SetMode;
sub SetText;
sub SetUpdateInterval;
sub Show;
sub new;
}
package Wx::VListBox {
sub Clear;
sub Create;
sub DeselectAll;
sub GetFirstSelected;
sub GetItemCount;
sub GetMargins;
sub GetNextSelected;
sub GetSelectedCount;
sub GetSelection;
sub GetSelectionBackground;
sub HasMultipleSelection;
sub IsCurrent;
sub IsSelected;
sub Select;
sub SelectAll;
sub SelectRange;
sub SetItemCount;
sub SetMargins;
sub SetSelection;
sub SetSelectionBackground;
sub Toggle;
}
package Wx::VScrolledWindow {
sub CalcScrolledPosition;
sub CalcUnscrolledPosition;
sub Create;
sub EnablePhysicalScrolling;
sub GetFirstVisibleLine;
sub GetLastVisibleLine;
sub GetLineCount;
sub GetRowCount;
sub GetTargetWindow;
sub GetVisibleBegin;
sub GetVisibleEnd;
sub GetVisibleRowsBegin;
sub GetVisibleRowsEnd;
sub HitTest;
sub IsRowVisible;
sub IsVisible;
sub Layout;
sub RefreshAll;
sub RefreshLine;
sub RefreshLines;
sub RefreshRow;
sub RefreshRows;
sub RemoveScrollbar;
sub ScrollLines;
sub ScrollPages;
sub ScrollRowPages;
sub ScrollRows;
sub ScrollToLine;
sub ScrollToRow;
sub SetLineCount;
sub SetRowCount;
sub SetTargetWindow;
sub UpdateScrollbar;
sub VirtualHitTest;
}
package Wx::Validator {
sub GetWindow;
sub SetBellOnError;
sub SetWindow;
}
package Wx::Variant {
sub Append;
sub CLONE;
sub Clear;
sub ClearList;
sub DESTROY;
sub Delete;
sub GetArrayString;
sub GetBool;
sub GetChar;
sub GetCount;
sub GetDateTime;
sub GetDouble;
sub GetList;
sub GetLong;
sub GetString;
sub GetType;
sub GetWxObjectPtr;
sub Insert;
sub IsNull;
sub IsType;
sub IsValueKindOf;
sub MakeNull;
sub MakeString;
sub Member;
sub NullList;
sub SetBool;
sub SetChar;
sub SetDateTime;
sub SetDouble;
sub SetLong;
sub SetString;
sub SetVariant;
sub SetWxObjectPtr;
sub Unshare;
sub new;
}
package Wx::VideoMode {
sub CLONE;
sub DESTROY;
sub GetDepth;
sub GetHeight;
sub GetWidth;
sub IsOk;
sub Matches;
sub new;
}
package Wx::View {
sub Activate;
sub Close;
sub GetDocument;
sub GetDocumentManager;
sub GetFrame;
sub GetViewName;
sub OnActivateView;
sub OnChangeFilename;
sub OnClose;
sub OnCreate;
sub OnCreatePrintout;
sub OnUpdate;
sub SetDocument;
sub SetFrame;
sub SetViewName;
sub new;
}
package Wx::WebView {
sub CanCopy;
sub CanCut;
sub CanGoBack;
sub CanGoForward;
sub CanPaste;
sub CanRedo;
sub CanSetZoomType;
sub CanUndo;
sub ClearHistory;
sub ClearSelection;
sub Copy;
sub Create;
sub Cut;
sub DeleteSelection;
sub EnableHistory;
sub Find;
sub GetBackwardHistory;
sub GetCurrentTitle;
sub GetCurrentURL;
sub GetForwardHistory;
sub GetNativeBackend;
sub GetPageSource;
sub GetPageText;
sub GetSelectedSource;
sub GetSelectedText;
sub GetZoom;
sub GetZoomType;
sub GoBack;
sub GoForward;
sub HasSelection;
sub IsBusy;
sub IsEditable;
sub LoadHistoryItem;
sub LoadURL;
sub New;
sub NewDefault;
sub Paste;
sub Print;
sub Redo;
sub Reload;
sub RunScript;
sub SelectAll;
sub SetEditable;
sub SetPage;
sub SetPageFH;
sub SetZoom;
sub SetZoomType;
sub Stop;
sub Undo;
}
package Wx::WebViewArchiveHandler {
sub GetFile;
sub new;
}
package Wx::WebViewEvent {
sub GetTarget;
sub GetURL;
sub new;
sub newDefault;
sub newFull;
}
package Wx::WebViewHandler {
sub GetFile;
sub GetName;
}
package Wx::WebViewHistoryItem {
sub CLONE;
sub DESTROY;
sub GetTitle;
sub GetUrl;
sub new;
}
package Wx::WinHelpController {
sub new;
}
package Wx::Window {
sub AcceptsFocus;
sub AcceptsFocusFromKeyboard;
sub AcceptsFocusRecursively;
sub AlwaysShowScrollbars;
sub CanSetTransparent;
sub CaptureMouse;
sub Center;
sub CenterOnParent;
sub CenterOnScreen;
sub Centre;
sub CentreOnParent;
sub CentreOnScreen;
sub ClearBackground;
sub ClientToScreen;
sub ClientToScreenPoint;
sub ClientToScreenXY;
sub Close;
sub ConvertDialogPointToPixels;
sub ConvertDialogSizeToPixels;
sub ConvertDialogToPixels;
sub ConvertPixelsPointToDialog;
sub ConvertPixelsSizeToDialog;
sub ConvertPixelsToDialog;
sub Create;
sub CreateWindowFromHWND;
sub Destroy;
sub DestroyChildren;
sub Disable;
sub DragAcceptFiles;
sub Enable;
sub FindFocus;
sub FindWindow;
sub FindWindowById;
sub FindWindowByLabel;
sub FindWindowByName;
sub Fit;
sub FitInside;
sub Freeze;
sub GetAcceleratorTable;
sub GetBackgroundColour;
sub GetBackgroundStyle;
sub GetBestSize;
sub GetCaret;
sub GetCharHeight;
sub GetCharWidth;
sub GetChildren;
sub GetClientSize;
sub GetClientSizeWH;
sub GetClientSizeXY;
sub GetConstraints;
sub GetContainingSizer;
sub GetContentScaleFactor;
sub GetCursor;
sub GetDropTarget;
sub GetEffectiveMinSize;
sub GetEventHandler;
sub GetExtraStyle;
sub GetFont;
sub GetForegroundColour;
sub GetGrandParent;
sub GetHandle;
sub GetHelpText;
sub GetId;
sub GetLabel;
sub GetLayoutDirection;
sub GetMaxSize;
sub GetMinSize;
sub GetName;
sub GetNextSibling;
sub GetParent;
sub GetPopupMenuSelectionFromUser;
sub GetPopupMenuSelectionFromUserPoint;
sub GetPopupMenuSelectionFromUserXY;
sub GetPosition;
sub GetPositionXY;
sub GetPrevSibling;
sub GetRect;
sub GetScreenPosition;
sub GetScreenPositionXY;
sub GetScreenRect;
sub GetScrollPos;
sub GetScrollRange;
sub GetScrollThumb;
sub GetSize;
sub GetSizeWH;
sub GetSizer;
sub GetTextExtent;
sub GetTitle;
sub GetToolTip;
sub GetUpdateRegion;
sub GetValidator;
sub GetVirtualSize;
sub GetVirtualSizeWH;
sub GetWindowBorderSize;
sub GetWindowStyleFlag;
sub GetWindowVariant;
sub HasCapture;
sub HasExtraStyle;
sub HasFlag;
sub HasFocus;
sub HasMultiplePages;
sub HasScrollbar;
sub HasTransparentBackground;
sub Hide;
sub InheritAttributes;
sub InitDialog;
sub InvalidateBestSize;
sub IsBeingDeleted;
sub IsDescendant;
sub IsDoubleBuffered;
sub IsEnabled;
sub IsExposed;
sub IsExposedPoint;
sub IsExposedRect;
sub IsExposedXYWH;
sub IsFrozen;
sub IsRetained;
sub IsScrollbarAlwaysShown;
sub IsShown;
sub IsShownOnScreen;
sub IsThisEnabled;
sub IsTopLevel;
sub Layout;
sub LineDown;
sub LineUp;
sub Lower;
sub MakeModal;
sub Move;
sub MoveAfterInTabOrder;
sub MoveBeforeInTabOrder;
sub MovePoint;
sub MoveXY;
sub Navigate;
sub NavigateIn;
sub NewControlId;
sub PageDown;
sub PageUp;
sub PopEventHandler;
sub PopupMenu;
sub PopupMenuPoint;
sub PopupMenuXY;
sub PushEventHandler;
sub Raise;
sub Refresh;
sub RefreshRect;
sub ReleaseMouse;
sub RemoveEventHandler;
sub Reparent;
sub ScreenToClient;
sub ScreenToClientPoint;
sub ScreenToClientXY;
sub ScrollLines;
sub ScrollPages;
sub ScrollWindow;
sub SetAcceleratorTable;
sub SetAutoLayout;
sub SetBackgroundColour;
sub SetBackgroundStyle;
sub SetBestFittingSize;
sub SetCanFocus;
sub SetCaret;
sub SetClientSize;
sub SetClientSizeSize;
sub SetClientSizeWH;
sub SetConstraints;
sub SetContainingSizer;
sub SetCursor;
sub SetDropTarget;
sub SetEventHandler;
sub SetExtraStyle;
sub SetFocus;
sub SetFocusFromKbd;
sub SetFont;
sub SetForegroundColour;
sub SetHelpText;
sub SetHelpTextForId;
sub SetId;
sub SetInitialSize;
sub SetLabel;
sub SetLayoutDirection;
sub SetMaxSize;
sub SetMinSize;
sub SetName;
sub SetOwnBackgroundColour;
sub SetOwnFont;
sub SetOwnForegroundColour;
sub SetScrollPos;
sub SetScrollbar;
sub SetSize;
sub SetSizeHints;
sub SetSizeRect;
sub SetSizeSize;
sub SetSizeWH;
sub SetSizeXYWHF;
sub SetSizer;
sub SetSizerAndFit;
sub SetTitle;
sub SetToolTip;
sub SetToolTipString;
sub SetToolTipTip;
sub SetTransparent;
sub SetValidator;
sub SetVirtualSize;
sub SetVirtualSizeSize;
sub SetVirtualSizeXY;
sub SetWindowStyle;
sub SetWindowStyleFlag;
sub SetWindowVariant;
sub ShouldInheritColours;
sub Show;
sub Thaw;
sub ToggleWindowStyle;
sub TransferDataFromWindow;
sub TransferDataToWindow;
sub UnreserveControlId;
sub Update;
sub UpdateWindowUI;
sub Validate;
sub WarpPointer;
sub new;
sub newDefault;
sub newFull;
}
package Wx::WindowCreateEvent {
sub GetWindow;
sub new;
}
package Wx::WindowDC {
sub new;
}
package Wx::WindowDestroyEvent {
sub GetWindow;
sub new;
}
package Wx::WindowDisabler {
sub CLONE;
sub DESTROY;
sub new;
sub newBool;
sub newWindow;
}
package Wx::WindowUpdateLocker {
sub CLONE;
sub DESTROY;
sub new;
}
package Wx::Wizard {
sub Create;
sub FitToPage;
sub GetBitmap;
sub GetBitmapBackgroundColour;
sub GetBitmapPlacement;
sub GetCurrentPage;
sub GetMinimumBitmapWidth;
sub GetPageAreaSizer;
sub GetPageSize;
sub HasNextPage;
sub HasPrevPage;
sub RunWizard;
sub SetBitmap;
sub SetBitmapBackgroundColour;
sub SetBitmapPlacement;
sub SetBorder;
sub SetMinimumBitmapWidth;
sub SetPageSize;
sub new;
sub newEmpty;
sub newFull;
}
package Wx::WizardEvent {
sub GetDirection;
sub GetPage;
}
package Wx::WizardPage {
sub Create;
sub GetBitmap;
sub GetNext;
sub GetPrev;
sub new;
sub newEmpty;
sub newFull;
}
package Wx::WizardPageSimple {
sub Chain;
sub SetNext;
sub SetPrev;
sub new;
}
package Wx::WrapSizer {
sub InformFirstDirection;
sub new;
}
package Wx::XPMHandler {
sub new;
}
package Wx::XmlAttribute {
sub Destroy;
sub GetName;
sub GetNext;
sub GetValue;
sub SetName;
sub SetNext;
sub SetValue;
sub new;
}
package Wx::XmlDocument {
sub GetFileEncoding;
sub GetRoot;
sub GetVersion;
sub IsOk;
sub SetFileEncoding;
sub SetRoot;
sub SetVersion;
}
package Wx::XmlNode {
sub AddAttribute;
sub AddChild;
sub DeleteAttribute;
sub Destroy;
sub GetAttribute;
sub GetAttributes;
sub GetChildren;
sub GetContent;
sub GetName;
sub GetNext;
sub GetParent;
sub GetType;
sub HasAttribute;
sub InsertChild;
sub RemoveChild;
sub SetAttributes;
sub SetChildren;
sub SetContent;
sub SetName;
sub SetNext;
sub SetParent;
sub SetType;
sub new;
}
package Wx::XmlResource {
sub AddHandler;
sub AddSubclassFactory;
sub AttachUnknownControl;
sub CLONE;
sub ClearHandlers;
sub CompareVersion;
sub DESTROY;
sub GetDomain;
sub GetFlags;
sub GetVersion;
sub GetXMLID;
sub GetXRCID;
sub InitAllHandlers;
sub Load;
sub LoadBitmap;
sub LoadDialog;
sub LoadFrame2;
sub LoadFrame;
sub LoadIcon;
sub LoadMenu;
sub LoadMenuBar;
sub LoadMenuBarOnParent;
sub LoadOnDialog;
sub LoadOnFrame;
sub LoadOnPanel;
sub LoadPanel;
sub LoadToolBar;
sub SetDomain;
sub SetFlags;
sub Unload;
sub new;
}
package Wx::XmlResourceHandler {
sub AddStyle;
sub AddWindowStyles;
sub CreateChildren;
sub CreateChildrenPrivately;
sub CreateResFromNode;
sub GetBitmap;
sub GetBool;
sub GetClass;
sub GetColour;
sub GetDimension;
sub GetFont;
sub GetID;
sub GetIcon;
sub GetInstance;
sub GetLong;
sub GetName;
sub GetNode;
sub GetNodeContent;
sub GetParamNode;
sub GetParamValue;
sub GetParent;
sub GetParentAsWindow;
sub GetPosition;
sub GetResource;
sub GetSize;
sub GetStyle;
sub GetText;
sub HasParam;
sub IsOfClass;
sub SetupWindow;
}
package Wx::XmlSubclassFactory {
sub new;
}
package Wx::ZipFSHandler {
sub new;
}
package Wx::_App {
sub Start;
sub new;
}
package XML::LibXML {
sub AUTOLOAD;
sub DISABLE_THREAD_SUPPORT;
sub HAVE_READER;
sub HAVE_SCHEMAS;
sub HAVE_STRUCT_ERRORS;
sub HAVE_THREAD_SUPPORT;
sub INIT_THREAD_SUPPORT;
sub LIBXML_DOTTED_VERSION;
sub LIBXML_RUNTIME_VERSION;
sub LIBXML_VERSION;
sub _CLONE;
sub _default_catalog;
sub _dump_registry;
sub _end_push;
sub _end_sax_push;
sub _externalEntityLoader;
sub _leaked_nodes;
sub _parse_fh;
sub _parse_file;
sub _parse_html_fh;
sub _parse_html_file;
sub _parse_html_string;
sub _parse_sax_fh;
sub _parse_sax_file;
sub _parse_sax_string;
sub _parse_sax_xml_chunk;
sub _parse_string;
sub _parse_xml_chunk;
sub _processXIncludes;
sub _push;
sub _start_push;
sub decodeFromUTF8;
sub encodeToUTF8;
sub export_GDOME;
sub import_GDOME;
sub load_catalog;
}
package XML::LibXML::Attr {
sub _setNamespace;
sub getNextSibling;
sub getOwnerElement;
sub getParentNode;
sub getPreviousSibling;
sub getValue;
sub isId;
sub name;
sub new;
sub nextSibling;
sub ownerElement;
sub parentElement;
sub previousSibling;
sub serialize;
sub serializeContent;
sub setValue;
sub toString;
sub value;
}
package XML::LibXML::CDATASection {
sub new;
}
package XML::LibXML::Comment {
sub new;
}
package XML::LibXML::Common {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXML::Devel {
sub fix_owner;
sub mem_used;
sub node_from_perl;
sub node_to_perl;
sub refcnt;
sub refcnt_dec;
sub refcnt_inc;
}
package XML::LibXML::Document {
sub URI;
sub _setDocumentElement;
sub _toString;
sub adoptNode;
sub cloneNode;
sub compression;
sub createAttribute;
sub createAttributeNS;
sub createCDATASection;
sub createComment;
sub createDTD;
sub createDocument;
sub createDocumentFragment;
sub createElement;
sub createElementNS;
sub createEntityReference;
sub createExternalSubset;
sub createInternalSubset;
sub createPI;
sub createProcessingInstruction;
sub createRawElement;
sub createRawElementNS;
sub createTextNode;
sub documentElement;
sub documentURI;
sub encoding;
sub externalSubset;
sub getDocumentElement;
sub getElementById;
sub getElementsById;
sub getEncoding;
sub getVersion;
sub importNode;
sub indexElements;
sub internalSubset;
sub is_valid;
sub new;
sub removeExternalSubset;
sub removeInternalSubset;
sub serialize_html;
sub setCompression;
sub setEncoding;
sub setExternalSubset;
sub setInternalSubset;
sub setStandalone;
sub setURI;
sub setVersion;
sub standalone;
sub toFH;
sub toFile;
sub toStringHTML;
sub validate;
sub version;
sub xmlEncoding;
sub xmlStandalone;
sub xmlVersion;
}
package XML::LibXML::DocumentFragment {
sub addNewChild;
sub appendText;
sub appendTextNode;
sub new;
}
package XML::LibXML::Dtd {
sub getPublicId;
sub getSystemId;
sub new;
sub parse_string;
sub parse_uri;
sub publicId;
sub systemId;
}
package XML::LibXML::Element {
sub _getAttribute;
sub _getAttributeNS;
sub _getNamespaceDeclURI;
sub _setAttribute;
sub _setAttributeNS;
sub _setNamespace;
sub addNewChild;
sub appendText;
sub appendTextChild;
sub appendTextNode;
sub blessed($) ;
sub getAttributeNode;
sub getAttributeNodeNS;
sub hasAttribute;
sub hasAttributeNS;
sub new;
sub removeAttribute;
sub removeAttributeNS;
sub removeAttributeNode;
sub setAttributeNode;
sub setAttributeNodeNS;
sub setNamespaceDeclPrefix;
sub setNamespaceDeclURI;
sub tagName;
}
package XML::LibXML::HashTable {
sub DESTROY;
sub new;
}
package XML::LibXML::InputCallback {
sub lib_cleanup_callbacks;
sub lib_init_callbacks;
}
package XML::LibXML::LibError {
sub code;
sub context_and_column;
sub domain;
sub file;
sub int1;
sub int2;
sub level;
sub line;
sub message;
sub num1;
sub num2;
sub str1;
sub str2;
sub str3;
}
package XML::LibXML::Namespace {
sub DESTROY;
sub _isEqual;
sub declaredPrefix;
sub declaredURI;
sub getData;
sub getLocalName;
sub getType;
sub getValue;
sub href;
sub localname;
sub new;
sub nodeType;
sub nodeValue;
sub unique_key;
sub value2;
sub value;
}
package XML::LibXML::Node {
sub DESTROY;
sub _attributes;
sub _childNodes;
sub _find;
sub _findnodes;
sub _getChildrenByTagNameNS;
sub _toStringC14N;
sub addChild;
sub addSibling;
sub appendChild;
sub baseURI;
sub cloneNode;
sub firstChild;
sub firstNonBlankChild;
sub getAttributes;
sub getChildnodes;
sub getData;
sub getFirstChild;
sub getLastChild;
sub getLocalName;
sub getName;
sub getNamespace;
sub getNamespaceURI;
sub getNamespaces;
sub getNextSibling;
sub getOwner;
sub getOwnerDocument;
sub getOwnerElement;
sub getParentNode;
sub getPrefix;
sub getPreviousSibling;
sub getType;
sub getValue;
sub hasAttributes;
sub hasChildNodes;
sub insertAfter;
sub insertBefore;
sub isEqual;
sub isSameNode;
sub lastChild;
sub line_number;
sub localNS;
sub localName;
sub localNamespace;
sub localname;
sub lookupNamespacePrefix;
sub lookupNamespaceURI;
sub namespaceURI;
sub namespaces;
sub nextNonBlankSibling;
sub nextSibling;
sub nodeName;
sub nodePath;
sub nodeType;
sub nodeValue;
sub normalize;
sub ownerDocument;
sub ownerNode;
sub parentNode;
sub prefix;
sub previousNonBlankSibling;
sub previousSibling;
sub removeChild;
sub removeChildNodes;
sub replaceChild;
sub replaceNode;
sub serialize;
sub setBaseURI;
sub setName;
sub setNodeName;
sub setRawName;
sub string_value;
sub textContent;
sub toString;
sub to_literal;
sub to_number;
sub unbindNode;
sub unique_key;
sub unlink;
sub unlinkNode;
}
package XML::LibXML::PI {
sub _setData;
}
package XML::LibXML::ParserContext {
sub DESTROY;
}
package XML::LibXML::Pattern {
sub DESTROY;
sub _compilePattern;
sub matchesNode;
}
package XML::LibXML::Reader {
sub _DESTROY;
sub _close;
sub _getParserProp;
sub _newForDOM;
sub _newForFd;
sub _newForFile;
sub _newForIO;
sub _newForString;
sub _nodePath;
sub _preservePattern;
sub _setParserProp;
sub _setRelaxNG;
sub _setRelaxNGFile;
sub _setXSD;
sub _setXSDFile;
sub attributeCount;
sub baseURI;
sub byteConsumed;
sub columnNumber;
sub copyCurrentNode;
sub depth;
sub document;
sub encoding;
sub finish;
sub getAttribute;
sub getAttributeHash;
sub getAttributeNo;
sub getAttributeNs;
sub hasAttributes;
sub hasValue;
sub isDefault;
sub isEmptyElement;
sub isNamespaceDecl;
sub isValid;
sub lineNumber;
sub localName;
sub lookupNamespace;
sub matchesPattern;
sub moveToAttribute;
sub moveToAttributeNo;
sub moveToAttributeNs;
sub moveToElement;
sub moveToFirstAttribute;
sub moveToNextAttribute;
sub name;
sub namespaceURI;
sub next;
sub nextElement;
sub nextPatternMatch;
sub nextSibling;
sub nextSiblingElement;
sub nodeType;
sub prefix;
sub preserveNode;
sub quoteChar;
sub read;
sub readAttributeValue;
sub readInnerXml;
sub readOuterXml;
sub readState;
sub skipSiblings;
sub standalone;
sub value;
sub xmlLang;
sub xmlVersion;
}
package XML::LibXML::RegExp {
sub DESTROY;
sub _compile;
sub isDeterministic;
sub matches;
}
package XML::LibXML::RelaxNG {
sub DESTROY;
sub parse_buffer;
sub parse_document;
sub parse_location;
sub validate;
}
package XML::LibXML::Schema {
sub DESTROY;
sub parse_buffer;
sub parse_location;
sub validate;
}
package XML::LibXML::Text {
sub appendData;
sub data;
sub deleteData;
sub insertData;
sub new;
sub replaceData;
sub setData;
sub substringData;
}
package XML::LibXML::XPathContext {
sub DESTROY;
sub _find;
sub _findnodes;
sub _free_node_pool;
sub getContextNode;
sub getContextPosition;
sub getContextSize;
sub getVarLookupData;
sub getVarLookupFunc;
sub lookupNs;
sub new;
sub registerFunctionNS;
sub registerNs;
sub registerVarLookupFunc;
sub setContextNode;
sub setContextPosition;
sub setContextSize;
}
package XML::LibXML::XPathExpression {
sub DESTROY;
sub new;
}
package XML::LibXSLT {
sub HAVE_EXSLT;
sub INIT_THREAD_SUPPORT;
sub LIBXSLT_DOTTED_VERSION;
sub LIBXSLT_RUNTIME_VERSION;
sub LIBXSLT_VERSION;
sub _parse_stylesheet;
sub _parse_stylesheet_file;
sub debug_callback;
sub decodeFromUTF8;
sub encodeToUTF8;
sub max_depth;
sub max_vars;
sub register_function;
sub xinclude_default;
}
package XML::LibXSLT::Stylesheet {
sub DESTROY;
sub _output_string;
sub media_type;
sub output_encoding;
sub output_fh;
sub output_file;
sub output_method;
sub transform;
sub transform_file;
}
package XML::LibXSLT::StylesheetWrapper {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXSLT::TransformContext {
sub stylesheet;
}
package XML::Parser::Expat {
sub DefaultCurrent;
sub Do_External_Parse;
sub ElementIndex;
sub ErrorString;
sub FreeEncoding;
sub GenerateNSName;
sub GetBase;
sub GetCurrentByteIndex;
sub GetCurrentColumnNumber;
sub GetCurrentLineNumber;
sub GetErrorCode;
sub GetSpecifiedAttributeCount;
sub LoadEncoding;
sub OriginalString;
sub ParseDone;
sub ParsePartial;
sub ParseStream;
sub ParseString;
sub ParserCreate;
sub ParserFree;
sub ParserRelease;
sub PositionContext;
sub RecognizedString;
sub SetAttListDeclHandler;
sub SetBase;
sub SetCharacterDataHandler;
sub SetCommentHandler;
sub SetDefaultHandler;
sub SetDoctypeHandler;
sub SetElementDeclHandler;
sub SetEndCdataHandler;
sub SetEndDoctypeHandler;
sub SetEndElementHandler;
sub SetEntityDeclHandler;
sub SetExtEntFinishHandler;
sub SetExternalEntityRefHandler;
sub SetNotationDeclHandler;
sub SetProcessingInstructionHandler;
sub SetStartCdataHandler;
sub SetStartElementHandler;
sub SetUnparsedEntityDeclHandler;
sub SetXMLDeclHandler;
sub SkipUntil;
sub UnsetAllHandlers;
}
package YAML::XS::LibYAML {
sub Dump;
sub Load;
}
package arybase {
sub FETCH;
sub STORE;
}
package arybase::mg {
sub FETCH;
sub STORE;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package bytes {
sub chr(_) ;
sub index($$;$) ;
sub length(_) ;
sub ord(_) ;
sub rindex($$;$) ;
sub substr($$;$$) ;
}
package constant {
sub _make_const(\[$@]) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package re {
sub install;
sub is_regexp($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub _handle;
sub create;
sub detach;
sub equal;
sub error;
sub get_stack_size;
sub is_detached;
sub is_joinable;
sub is_running;
sub join;
sub kill;
sub list;
sub new;
sub object;
sub self;
sub set_stack_size;
sub set_thread_exit_only;
sub tid;
sub wantarray;
sub yield;
}
package threads::shared {
sub _id(\[$@%]) ;
sub _refcnt(\[$@%]) ;
sub bless($;$) ;
sub blessed($) ;
sub cond_broadcast(\[$@%]) ;
sub cond_signal(\[$@%]) ;
sub cond_timedwait(\[$@%]$;\[$@%]) ;
sub cond_wait(\[$@%];\[$@%]) ;
sub is_shared(\[$@%]) ;
sub refaddr($) ;
sub reftype($) ;
sub share(\[$@%]) ;
}
package threads::shared::tie {
sub EXISTS;
sub EXTEND;
sub FIRSTKEY;
sub NEXTKEY;
sub POP;
sub PUSH;
sub SHIFT;
sub STORESIZE;
sub UNSHIFT;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
package version::vxs {
sub VCMP;
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
}
